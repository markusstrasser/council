{"video_id": "G8yfD_Xu7Ko", "title": "2.2 Linear Regression with Multiple Variables | Vectorization part 1 --[Machine Learning |Andrew Ng]", "description": "First Course:\nSupervised Machine Learning : Regression and Classification.\n\nIf you liked the content please subscribe and put a little blue thumb.\nTake heart! First Course:\nSupervised Machine Learning : Regression and Classification.\n\nIf you liked the content please subscribe and put a little blue thumb.\nTake heart!", "author": "Machine Learning", "keywords": [], "channel_url": "https://www.youtube.com/channel/UClG5HEAJJFOavT_UolqYROQ", "length": 415, "views": 337, "publish_date": "11/04/2022", "timestamp": 1661040000, "entity": "ML Specialization, Andrew Ng (2022)", "transcript": {"text": " In this video, you see a very useful idea called vectorization. When you're implementing a learning algorithm, using vectorization will both make your code shorter and also make it run much more efficiently. Learning how to write vectorized code will allow you to also take advantage of modern numerical linear algebra libraries, as well as maybe even GPU hardware that stands for graphics processor unit. This is hardware originally designed to speed up computer graphics on your computer, but turns out can be used when you write vectorized code to also help you execute your code much more quickly. Let's look at a concrete example of what vectorization means. Here's an example with parameters w and b, where w is a vector with three numbers, and you also have a vector of features x with also three numbers. So here, n is equal to three. So notice that in linear algebra, the index or the counting starts from one, and so the first value is subscripted w1 and x1. In Python code, you can define these variables w, b, and x using arrays like this. Here I'm actually using a numerical linear algebra library in Python called NumPy, which is by far the most widely used numerical linear algebra library in Python and in machine learning. Because in Python, the indexing of arrays or counting in arrays starts from zero, you would access the first value of w using w square bracket zero, the second value using w square bracket one, and the third using w square bracket two. So the indexing here goes from zero, one, to two, rather than one, two, to three. Similarly, to access individual features of x, you would use x0, x1, and x2. Many programming languages, including Python, start counting from zero rather than one. Now, let's look at an implementation without vectorization for computing the model's prediction. In code, it would look like this. You take each parameter w and multiply it by its associated feature. Now, you could write your code like this, but what if n is in three, but instead n is a hundred or a hundred thousand? It's both inefficient for you to code and inefficient for your computer to compute. So here's another way, still without using vectorization, but using a for loop. In math, you can use a summation operator to add all the products of wj and xj for j equals one through n. Then outside the summation, you add b at the end. So the summation goes from j equals one up to and including n for n equals three. J therefore goes from one, two, to three. In code, you can initialize f to zero, then for j in range from zero to n, this actually makes j go from zero to n minus one. So from zero, one to two, you can then add to f the product of wj times xj. Finally, outside the for loop, you add b. Notice that in Python, the range zero to n means that j goes from zero all the way to n minus one and does not include n itself. And more commonly, this is written range n in Python. But in this video, I added a zero here just to emphasize that it starts from zero. While this implementation is a bit better than the first one, it still doesn't use vectorization and isn't that efficient. Now let's look at how you can do this using vectorization. This is the math expression of the function f, which is the dot product of w and x plus b. And now you can implement this with a single line of code. By computing fp equals np dot dot, I said dot dot because the first dot is the period and the second dot is the function or the method called dot. But it's fp equals np dot dot w comma x. And this implements the mathematical dot products between the vectors w and x. And then finally, you can add b to it at the end. This NumPy dot function is a vectorized implementation of the dot product operation between two vectors. And especially when n is large, this will run much faster than the two previous code examples. I want to emphasize that vectorization actually has two distinct benefits. First it makes the code shorter. It's now just one line of code. Isn't that cool? And second, it also results in your code running much faster than either of the two previous implementations that did not use vectorization. And the reason that the vectorized implementation is much faster is behind the scenes, the NumPy dot function is able to use parallel hardware in your computer. And this is true whether you're running this on a normal computer, that is on a normal computer CPU, or if you are using a GPU, a graphics processor unit that's often used to accelerate machine learning jobs. And the ability of the NumPy dot function to use parallel hardware makes it much more efficient than the for loop or the sequential calculation that we saw previously. Now this version is much more practical when n is large because you are not typing w0 times x0 plus w1 times x1 plus lots of additional terms like you would have had for the previous version. But while this saves a lot on the typing, it's still not that computationally efficient because it still doesn't use vectorization. So to recap, vectorization makes your code shorter, so hopefully easier to write and easier for you or others to read. And it also makes it run much faster. But what is this magic behind vectorization that makes this run so much faster? Let's take a look at what your computer is actually doing behind the scenes to make vectorized code run so much faster.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 7.28, "text": " In this video, you see a very useful idea called vectorization.", "tokens": [50364, 682, 341, 960, 11, 291, 536, 257, 588, 4420, 1558, 1219, 8062, 2144, 13, 50728, 50728, 1133, 291, 434, 18114, 257, 2539, 9284, 11, 1228, 8062, 2144, 486, 1293, 652, 428, 3089, 50962, 50962, 11639, 293, 611, 652, 309, 1190, 709, 544, 19621, 13, 51201, 51201, 15205, 577, 281, 2464, 8062, 1602, 3089, 486, 2089, 291, 281, 611, 747, 5002, 295, 4363, 51422, 51422, 29054, 8213, 21989, 15148, 11, 382, 731, 382, 1310, 754, 18407, 8837, 300, 7382, 337, 51705, 51705, 11837, 15321, 4985, 13, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.16438013784001382, "compression_ratio": 1.575875486381323, "no_speech_prob": 0.02884737215936184}, {"id": 1, "seek": 0, "start": 7.28, "end": 11.96, "text": " When you're implementing a learning algorithm, using vectorization will both make your code", "tokens": [50364, 682, 341, 960, 11, 291, 536, 257, 588, 4420, 1558, 1219, 8062, 2144, 13, 50728, 50728, 1133, 291, 434, 18114, 257, 2539, 9284, 11, 1228, 8062, 2144, 486, 1293, 652, 428, 3089, 50962, 50962, 11639, 293, 611, 652, 309, 1190, 709, 544, 19621, 13, 51201, 51201, 15205, 577, 281, 2464, 8062, 1602, 3089, 486, 2089, 291, 281, 611, 747, 5002, 295, 4363, 51422, 51422, 29054, 8213, 21989, 15148, 11, 382, 731, 382, 1310, 754, 18407, 8837, 300, 7382, 337, 51705, 51705, 11837, 15321, 4985, 13, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.16438013784001382, "compression_ratio": 1.575875486381323, "no_speech_prob": 0.02884737215936184}, {"id": 2, "seek": 0, "start": 11.96, "end": 16.740000000000002, "text": " shorter and also make it run much more efficiently.", "tokens": [50364, 682, 341, 960, 11, 291, 536, 257, 588, 4420, 1558, 1219, 8062, 2144, 13, 50728, 50728, 1133, 291, 434, 18114, 257, 2539, 9284, 11, 1228, 8062, 2144, 486, 1293, 652, 428, 3089, 50962, 50962, 11639, 293, 611, 652, 309, 1190, 709, 544, 19621, 13, 51201, 51201, 15205, 577, 281, 2464, 8062, 1602, 3089, 486, 2089, 291, 281, 611, 747, 5002, 295, 4363, 51422, 51422, 29054, 8213, 21989, 15148, 11, 382, 731, 382, 1310, 754, 18407, 8837, 300, 7382, 337, 51705, 51705, 11837, 15321, 4985, 13, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.16438013784001382, "compression_ratio": 1.575875486381323, "no_speech_prob": 0.02884737215936184}, {"id": 3, "seek": 0, "start": 16.740000000000002, "end": 21.16, "text": " Learning how to write vectorized code will allow you to also take advantage of modern", "tokens": [50364, 682, 341, 960, 11, 291, 536, 257, 588, 4420, 1558, 1219, 8062, 2144, 13, 50728, 50728, 1133, 291, 434, 18114, 257, 2539, 9284, 11, 1228, 8062, 2144, 486, 1293, 652, 428, 3089, 50962, 50962, 11639, 293, 611, 652, 309, 1190, 709, 544, 19621, 13, 51201, 51201, 15205, 577, 281, 2464, 8062, 1602, 3089, 486, 2089, 291, 281, 611, 747, 5002, 295, 4363, 51422, 51422, 29054, 8213, 21989, 15148, 11, 382, 731, 382, 1310, 754, 18407, 8837, 300, 7382, 337, 51705, 51705, 11837, 15321, 4985, 13, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.16438013784001382, "compression_ratio": 1.575875486381323, "no_speech_prob": 0.02884737215936184}, {"id": 4, "seek": 0, "start": 21.16, "end": 26.82, "text": " numerical linear algebra libraries, as well as maybe even GPU hardware that stands for", "tokens": [50364, 682, 341, 960, 11, 291, 536, 257, 588, 4420, 1558, 1219, 8062, 2144, 13, 50728, 50728, 1133, 291, 434, 18114, 257, 2539, 9284, 11, 1228, 8062, 2144, 486, 1293, 652, 428, 3089, 50962, 50962, 11639, 293, 611, 652, 309, 1190, 709, 544, 19621, 13, 51201, 51201, 15205, 577, 281, 2464, 8062, 1602, 3089, 486, 2089, 291, 281, 611, 747, 5002, 295, 4363, 51422, 51422, 29054, 8213, 21989, 15148, 11, 382, 731, 382, 1310, 754, 18407, 8837, 300, 7382, 337, 51705, 51705, 11837, 15321, 4985, 13, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.16438013784001382, "compression_ratio": 1.575875486381323, "no_speech_prob": 0.02884737215936184}, {"id": 5, "seek": 0, "start": 26.82, "end": 28.68, "text": " graphics processor unit.", "tokens": [50364, 682, 341, 960, 11, 291, 536, 257, 588, 4420, 1558, 1219, 8062, 2144, 13, 50728, 50728, 1133, 291, 434, 18114, 257, 2539, 9284, 11, 1228, 8062, 2144, 486, 1293, 652, 428, 3089, 50962, 50962, 11639, 293, 611, 652, 309, 1190, 709, 544, 19621, 13, 51201, 51201, 15205, 577, 281, 2464, 8062, 1602, 3089, 486, 2089, 291, 281, 611, 747, 5002, 295, 4363, 51422, 51422, 29054, 8213, 21989, 15148, 11, 382, 731, 382, 1310, 754, 18407, 8837, 300, 7382, 337, 51705, 51705, 11837, 15321, 4985, 13, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.16438013784001382, "compression_ratio": 1.575875486381323, "no_speech_prob": 0.02884737215936184}, {"id": 6, "seek": 2868, "start": 28.68, "end": 33.4, "text": " This is hardware originally designed to speed up computer graphics on your computer, but", "tokens": [50364, 639, 307, 8837, 7993, 4761, 281, 3073, 493, 3820, 11837, 322, 428, 3820, 11, 457, 50600, 50600, 4523, 484, 393, 312, 1143, 562, 291, 2464, 8062, 1602, 3089, 281, 611, 854, 291, 14483, 428, 3089, 709, 50832, 50832, 544, 2661, 13, 50882, 50882, 961, 311, 574, 412, 257, 9859, 1365, 295, 437, 8062, 2144, 1355, 13, 51070, 51070, 1692, 311, 364, 1365, 365, 9834, 261, 293, 272, 11, 689, 261, 307, 257, 8062, 365, 1045, 3547, 11, 293, 51496, 51496, 291, 611, 362, 257, 8062, 295, 4122, 2031, 365, 611, 1045, 3547, 13, 51748, 51748], "temperature": 0.0, "avg_logprob": -0.12483958608096409, "compression_ratio": 1.6707818930041152, "no_speech_prob": 2.3185884856502526e-05}, {"id": 7, "seek": 2868, "start": 33.4, "end": 38.04, "text": " turns out can be used when you write vectorized code to also help you execute your code much", "tokens": [50364, 639, 307, 8837, 7993, 4761, 281, 3073, 493, 3820, 11837, 322, 428, 3820, 11, 457, 50600, 50600, 4523, 484, 393, 312, 1143, 562, 291, 2464, 8062, 1602, 3089, 281, 611, 854, 291, 14483, 428, 3089, 709, 50832, 50832, 544, 2661, 13, 50882, 50882, 961, 311, 574, 412, 257, 9859, 1365, 295, 437, 8062, 2144, 1355, 13, 51070, 51070, 1692, 311, 364, 1365, 365, 9834, 261, 293, 272, 11, 689, 261, 307, 257, 8062, 365, 1045, 3547, 11, 293, 51496, 51496, 291, 611, 362, 257, 8062, 295, 4122, 2031, 365, 611, 1045, 3547, 13, 51748, 51748], "temperature": 0.0, "avg_logprob": -0.12483958608096409, "compression_ratio": 1.6707818930041152, "no_speech_prob": 2.3185884856502526e-05}, {"id": 8, "seek": 2868, "start": 38.04, "end": 39.04, "text": " more quickly.", "tokens": [50364, 639, 307, 8837, 7993, 4761, 281, 3073, 493, 3820, 11837, 322, 428, 3820, 11, 457, 50600, 50600, 4523, 484, 393, 312, 1143, 562, 291, 2464, 8062, 1602, 3089, 281, 611, 854, 291, 14483, 428, 3089, 709, 50832, 50832, 544, 2661, 13, 50882, 50882, 961, 311, 574, 412, 257, 9859, 1365, 295, 437, 8062, 2144, 1355, 13, 51070, 51070, 1692, 311, 364, 1365, 365, 9834, 261, 293, 272, 11, 689, 261, 307, 257, 8062, 365, 1045, 3547, 11, 293, 51496, 51496, 291, 611, 362, 257, 8062, 295, 4122, 2031, 365, 611, 1045, 3547, 13, 51748, 51748], "temperature": 0.0, "avg_logprob": -0.12483958608096409, "compression_ratio": 1.6707818930041152, "no_speech_prob": 2.3185884856502526e-05}, {"id": 9, "seek": 2868, "start": 39.04, "end": 42.8, "text": " Let's look at a concrete example of what vectorization means.", "tokens": [50364, 639, 307, 8837, 7993, 4761, 281, 3073, 493, 3820, 11837, 322, 428, 3820, 11, 457, 50600, 50600, 4523, 484, 393, 312, 1143, 562, 291, 2464, 8062, 1602, 3089, 281, 611, 854, 291, 14483, 428, 3089, 709, 50832, 50832, 544, 2661, 13, 50882, 50882, 961, 311, 574, 412, 257, 9859, 1365, 295, 437, 8062, 2144, 1355, 13, 51070, 51070, 1692, 311, 364, 1365, 365, 9834, 261, 293, 272, 11, 689, 261, 307, 257, 8062, 365, 1045, 3547, 11, 293, 51496, 51496, 291, 611, 362, 257, 8062, 295, 4122, 2031, 365, 611, 1045, 3547, 13, 51748, 51748], "temperature": 0.0, "avg_logprob": -0.12483958608096409, "compression_ratio": 1.6707818930041152, "no_speech_prob": 2.3185884856502526e-05}, {"id": 10, "seek": 2868, "start": 42.8, "end": 51.32, "text": " Here's an example with parameters w and b, where w is a vector with three numbers, and", "tokens": [50364, 639, 307, 8837, 7993, 4761, 281, 3073, 493, 3820, 11837, 322, 428, 3820, 11, 457, 50600, 50600, 4523, 484, 393, 312, 1143, 562, 291, 2464, 8062, 1602, 3089, 281, 611, 854, 291, 14483, 428, 3089, 709, 50832, 50832, 544, 2661, 13, 50882, 50882, 961, 311, 574, 412, 257, 9859, 1365, 295, 437, 8062, 2144, 1355, 13, 51070, 51070, 1692, 311, 364, 1365, 365, 9834, 261, 293, 272, 11, 689, 261, 307, 257, 8062, 365, 1045, 3547, 11, 293, 51496, 51496, 291, 611, 362, 257, 8062, 295, 4122, 2031, 365, 611, 1045, 3547, 13, 51748, 51748], "temperature": 0.0, "avg_logprob": -0.12483958608096409, "compression_ratio": 1.6707818930041152, "no_speech_prob": 2.3185884856502526e-05}, {"id": 11, "seek": 2868, "start": 51.32, "end": 56.36, "text": " you also have a vector of features x with also three numbers.", "tokens": [50364, 639, 307, 8837, 7993, 4761, 281, 3073, 493, 3820, 11837, 322, 428, 3820, 11, 457, 50600, 50600, 4523, 484, 393, 312, 1143, 562, 291, 2464, 8062, 1602, 3089, 281, 611, 854, 291, 14483, 428, 3089, 709, 50832, 50832, 544, 2661, 13, 50882, 50882, 961, 311, 574, 412, 257, 9859, 1365, 295, 437, 8062, 2144, 1355, 13, 51070, 51070, 1692, 311, 364, 1365, 365, 9834, 261, 293, 272, 11, 689, 261, 307, 257, 8062, 365, 1045, 3547, 11, 293, 51496, 51496, 291, 611, 362, 257, 8062, 295, 4122, 2031, 365, 611, 1045, 3547, 13, 51748, 51748], "temperature": 0.0, "avg_logprob": -0.12483958608096409, "compression_ratio": 1.6707818930041152, "no_speech_prob": 2.3185884856502526e-05}, {"id": 12, "seek": 5636, "start": 56.36, "end": 60.019999999999996, "text": " So here, n is equal to three.", "tokens": [50364, 407, 510, 11, 297, 307, 2681, 281, 1045, 13, 50547, 50547, 407, 3449, 300, 294, 8213, 21989, 11, 264, 8186, 420, 264, 13251, 3719, 490, 472, 11, 293, 370, 264, 50852, 50852, 700, 2158, 307, 2325, 25383, 261, 16, 293, 2031, 16, 13, 51098, 51098, 682, 15329, 3089, 11, 291, 393, 6964, 613, 9102, 261, 11, 272, 11, 293, 2031, 1228, 41011, 411, 341, 13, 51494, 51494, 1692, 286, 478, 767, 1228, 257, 29054, 8213, 21989, 6405, 294, 15329, 1219, 22592, 47, 88, 11, 597, 51796, 51796], "temperature": 0.0, "avg_logprob": -0.13013951162273965, "compression_ratio": 1.5138888888888888, "no_speech_prob": 5.6822668739187066e-06}, {"id": 13, "seek": 5636, "start": 60.019999999999996, "end": 66.12, "text": " So notice that in linear algebra, the index or the counting starts from one, and so the", "tokens": [50364, 407, 510, 11, 297, 307, 2681, 281, 1045, 13, 50547, 50547, 407, 3449, 300, 294, 8213, 21989, 11, 264, 8186, 420, 264, 13251, 3719, 490, 472, 11, 293, 370, 264, 50852, 50852, 700, 2158, 307, 2325, 25383, 261, 16, 293, 2031, 16, 13, 51098, 51098, 682, 15329, 3089, 11, 291, 393, 6964, 613, 9102, 261, 11, 272, 11, 293, 2031, 1228, 41011, 411, 341, 13, 51494, 51494, 1692, 286, 478, 767, 1228, 257, 29054, 8213, 21989, 6405, 294, 15329, 1219, 22592, 47, 88, 11, 597, 51796, 51796], "temperature": 0.0, "avg_logprob": -0.13013951162273965, "compression_ratio": 1.5138888888888888, "no_speech_prob": 5.6822668739187066e-06}, {"id": 14, "seek": 5636, "start": 66.12, "end": 71.03999999999999, "text": " first value is subscripted w1 and x1.", "tokens": [50364, 407, 510, 11, 297, 307, 2681, 281, 1045, 13, 50547, 50547, 407, 3449, 300, 294, 8213, 21989, 11, 264, 8186, 420, 264, 13251, 3719, 490, 472, 11, 293, 370, 264, 50852, 50852, 700, 2158, 307, 2325, 25383, 261, 16, 293, 2031, 16, 13, 51098, 51098, 682, 15329, 3089, 11, 291, 393, 6964, 613, 9102, 261, 11, 272, 11, 293, 2031, 1228, 41011, 411, 341, 13, 51494, 51494, 1692, 286, 478, 767, 1228, 257, 29054, 8213, 21989, 6405, 294, 15329, 1219, 22592, 47, 88, 11, 597, 51796, 51796], "temperature": 0.0, "avg_logprob": -0.13013951162273965, "compression_ratio": 1.5138888888888888, "no_speech_prob": 5.6822668739187066e-06}, {"id": 15, "seek": 5636, "start": 71.03999999999999, "end": 78.96000000000001, "text": " In Python code, you can define these variables w, b, and x using arrays like this.", "tokens": [50364, 407, 510, 11, 297, 307, 2681, 281, 1045, 13, 50547, 50547, 407, 3449, 300, 294, 8213, 21989, 11, 264, 8186, 420, 264, 13251, 3719, 490, 472, 11, 293, 370, 264, 50852, 50852, 700, 2158, 307, 2325, 25383, 261, 16, 293, 2031, 16, 13, 51098, 51098, 682, 15329, 3089, 11, 291, 393, 6964, 613, 9102, 261, 11, 272, 11, 293, 2031, 1228, 41011, 411, 341, 13, 51494, 51494, 1692, 286, 478, 767, 1228, 257, 29054, 8213, 21989, 6405, 294, 15329, 1219, 22592, 47, 88, 11, 597, 51796, 51796], "temperature": 0.0, "avg_logprob": -0.13013951162273965, "compression_ratio": 1.5138888888888888, "no_speech_prob": 5.6822668739187066e-06}, {"id": 16, "seek": 5636, "start": 78.96000000000001, "end": 85.0, "text": " Here I'm actually using a numerical linear algebra library in Python called NumPy, which", "tokens": [50364, 407, 510, 11, 297, 307, 2681, 281, 1045, 13, 50547, 50547, 407, 3449, 300, 294, 8213, 21989, 11, 264, 8186, 420, 264, 13251, 3719, 490, 472, 11, 293, 370, 264, 50852, 50852, 700, 2158, 307, 2325, 25383, 261, 16, 293, 2031, 16, 13, 51098, 51098, 682, 15329, 3089, 11, 291, 393, 6964, 613, 9102, 261, 11, 272, 11, 293, 2031, 1228, 41011, 411, 341, 13, 51494, 51494, 1692, 286, 478, 767, 1228, 257, 29054, 8213, 21989, 6405, 294, 15329, 1219, 22592, 47, 88, 11, 597, 51796, 51796], "temperature": 0.0, "avg_logprob": -0.13013951162273965, "compression_ratio": 1.5138888888888888, "no_speech_prob": 5.6822668739187066e-06}, {"id": 17, "seek": 8500, "start": 85.0, "end": 92.12, "text": " is by far the most widely used numerical linear algebra library in Python and in machine learning.", "tokens": [50364, 307, 538, 1400, 264, 881, 13371, 1143, 29054, 8213, 21989, 6405, 294, 15329, 293, 294, 3479, 2539, 13, 50720, 50720, 1436, 294, 15329, 11, 264, 8186, 278, 295, 41011, 420, 13251, 294, 41011, 3719, 490, 4018, 11, 291, 51084, 51084, 576, 2105, 264, 700, 2158, 295, 261, 1228, 261, 3732, 16904, 4018, 11, 264, 1150, 2158, 1228, 51460, 51460, 261, 3732, 16904, 472, 11, 293, 264, 2636, 1228, 261, 3732, 16904, 732, 13, 51752, 51752], "temperature": 0.0, "avg_logprob": -0.08113750854095855, "compression_ratio": 1.7305699481865284, "no_speech_prob": 4.157301191298757e-06}, {"id": 18, "seek": 8500, "start": 92.12, "end": 99.4, "text": " Because in Python, the indexing of arrays or counting in arrays starts from zero, you", "tokens": [50364, 307, 538, 1400, 264, 881, 13371, 1143, 29054, 8213, 21989, 6405, 294, 15329, 293, 294, 3479, 2539, 13, 50720, 50720, 1436, 294, 15329, 11, 264, 8186, 278, 295, 41011, 420, 13251, 294, 41011, 3719, 490, 4018, 11, 291, 51084, 51084, 576, 2105, 264, 700, 2158, 295, 261, 1228, 261, 3732, 16904, 4018, 11, 264, 1150, 2158, 1228, 51460, 51460, 261, 3732, 16904, 472, 11, 293, 264, 2636, 1228, 261, 3732, 16904, 732, 13, 51752, 51752], "temperature": 0.0, "avg_logprob": -0.08113750854095855, "compression_ratio": 1.7305699481865284, "no_speech_prob": 4.157301191298757e-06}, {"id": 19, "seek": 8500, "start": 99.4, "end": 106.92, "text": " would access the first value of w using w square bracket zero, the second value using", "tokens": [50364, 307, 538, 1400, 264, 881, 13371, 1143, 29054, 8213, 21989, 6405, 294, 15329, 293, 294, 3479, 2539, 13, 50720, 50720, 1436, 294, 15329, 11, 264, 8186, 278, 295, 41011, 420, 13251, 294, 41011, 3719, 490, 4018, 11, 291, 51084, 51084, 576, 2105, 264, 700, 2158, 295, 261, 1228, 261, 3732, 16904, 4018, 11, 264, 1150, 2158, 1228, 51460, 51460, 261, 3732, 16904, 472, 11, 293, 264, 2636, 1228, 261, 3732, 16904, 732, 13, 51752, 51752], "temperature": 0.0, "avg_logprob": -0.08113750854095855, "compression_ratio": 1.7305699481865284, "no_speech_prob": 4.157301191298757e-06}, {"id": 20, "seek": 8500, "start": 106.92, "end": 112.76, "text": " w square bracket one, and the third using w square bracket two.", "tokens": [50364, 307, 538, 1400, 264, 881, 13371, 1143, 29054, 8213, 21989, 6405, 294, 15329, 293, 294, 3479, 2539, 13, 50720, 50720, 1436, 294, 15329, 11, 264, 8186, 278, 295, 41011, 420, 13251, 294, 41011, 3719, 490, 4018, 11, 291, 51084, 51084, 576, 2105, 264, 700, 2158, 295, 261, 1228, 261, 3732, 16904, 4018, 11, 264, 1150, 2158, 1228, 51460, 51460, 261, 3732, 16904, 472, 11, 293, 264, 2636, 1228, 261, 3732, 16904, 732, 13, 51752, 51752], "temperature": 0.0, "avg_logprob": -0.08113750854095855, "compression_ratio": 1.7305699481865284, "no_speech_prob": 4.157301191298757e-06}, {"id": 21, "seek": 11276, "start": 112.76, "end": 120.48, "text": " So the indexing here goes from zero, one, to two, rather than one, two, to three.", "tokens": [50364, 407, 264, 8186, 278, 510, 1709, 490, 4018, 11, 472, 11, 281, 732, 11, 2831, 813, 472, 11, 732, 11, 281, 1045, 13, 50750, 50750, 13157, 11, 281, 2105, 2609, 4122, 295, 2031, 11, 291, 576, 764, 2031, 15, 11, 2031, 16, 11, 293, 2031, 17, 13, 51189, 51189, 5126, 9410, 8650, 11, 3009, 15329, 11, 722, 13251, 490, 4018, 2831, 813, 472, 13, 51470, 51470, 823, 11, 718, 311, 574, 412, 364, 11420, 1553, 8062, 2144, 337, 15866, 264, 2316, 311, 17630, 13, 51822, 51822], "temperature": 0.0, "avg_logprob": -0.11978583986108954, "compression_ratio": 1.5244444444444445, "no_speech_prob": 9.276296850657673e-07}, {"id": 22, "seek": 11276, "start": 120.48, "end": 129.26, "text": " Similarly, to access individual features of x, you would use x0, x1, and x2.", "tokens": [50364, 407, 264, 8186, 278, 510, 1709, 490, 4018, 11, 472, 11, 281, 732, 11, 2831, 813, 472, 11, 732, 11, 281, 1045, 13, 50750, 50750, 13157, 11, 281, 2105, 2609, 4122, 295, 2031, 11, 291, 576, 764, 2031, 15, 11, 2031, 16, 11, 293, 2031, 17, 13, 51189, 51189, 5126, 9410, 8650, 11, 3009, 15329, 11, 722, 13251, 490, 4018, 2831, 813, 472, 13, 51470, 51470, 823, 11, 718, 311, 574, 412, 364, 11420, 1553, 8062, 2144, 337, 15866, 264, 2316, 311, 17630, 13, 51822, 51822], "temperature": 0.0, "avg_logprob": -0.11978583986108954, "compression_ratio": 1.5244444444444445, "no_speech_prob": 9.276296850657673e-07}, {"id": 23, "seek": 11276, "start": 129.26, "end": 134.88, "text": " Many programming languages, including Python, start counting from zero rather than one.", "tokens": [50364, 407, 264, 8186, 278, 510, 1709, 490, 4018, 11, 472, 11, 281, 732, 11, 2831, 813, 472, 11, 732, 11, 281, 1045, 13, 50750, 50750, 13157, 11, 281, 2105, 2609, 4122, 295, 2031, 11, 291, 576, 764, 2031, 15, 11, 2031, 16, 11, 293, 2031, 17, 13, 51189, 51189, 5126, 9410, 8650, 11, 3009, 15329, 11, 722, 13251, 490, 4018, 2831, 813, 472, 13, 51470, 51470, 823, 11, 718, 311, 574, 412, 364, 11420, 1553, 8062, 2144, 337, 15866, 264, 2316, 311, 17630, 13, 51822, 51822], "temperature": 0.0, "avg_logprob": -0.11978583986108954, "compression_ratio": 1.5244444444444445, "no_speech_prob": 9.276296850657673e-07}, {"id": 24, "seek": 11276, "start": 134.88, "end": 141.92000000000002, "text": " Now, let's look at an implementation without vectorization for computing the model's prediction.", "tokens": [50364, 407, 264, 8186, 278, 510, 1709, 490, 4018, 11, 472, 11, 281, 732, 11, 2831, 813, 472, 11, 732, 11, 281, 1045, 13, 50750, 50750, 13157, 11, 281, 2105, 2609, 4122, 295, 2031, 11, 291, 576, 764, 2031, 15, 11, 2031, 16, 11, 293, 2031, 17, 13, 51189, 51189, 5126, 9410, 8650, 11, 3009, 15329, 11, 722, 13251, 490, 4018, 2831, 813, 472, 13, 51470, 51470, 823, 11, 718, 311, 574, 412, 364, 11420, 1553, 8062, 2144, 337, 15866, 264, 2316, 311, 17630, 13, 51822, 51822], "temperature": 0.0, "avg_logprob": -0.11978583986108954, "compression_ratio": 1.5244444444444445, "no_speech_prob": 9.276296850657673e-07}, {"id": 25, "seek": 14192, "start": 141.92, "end": 144.35999999999999, "text": " In code, it would look like this.", "tokens": [50364, 682, 3089, 11, 309, 576, 574, 411, 341, 13, 50486, 50486, 509, 747, 1184, 13075, 261, 293, 12972, 309, 538, 1080, 6615, 4111, 13, 50786, 50786, 823, 11, 291, 727, 2464, 428, 3089, 411, 341, 11, 457, 437, 498, 297, 307, 294, 1045, 11, 457, 2602, 297, 307, 51098, 51098, 257, 3262, 420, 257, 3262, 4714, 30, 51210, 51210, 467, 311, 1293, 43495, 337, 291, 281, 3089, 293, 43495, 337, 428, 3820, 281, 14722, 13, 51474, 51474, 407, 510, 311, 1071, 636, 11, 920, 1553, 1228, 8062, 2144, 11, 457, 1228, 257, 337, 6367, 13, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.14275694375086312, "compression_ratio": 1.6666666666666667, "no_speech_prob": 1.0615977771522012e-05}, {"id": 26, "seek": 14192, "start": 144.35999999999999, "end": 150.35999999999999, "text": " You take each parameter w and multiply it by its associated feature.", "tokens": [50364, 682, 3089, 11, 309, 576, 574, 411, 341, 13, 50486, 50486, 509, 747, 1184, 13075, 261, 293, 12972, 309, 538, 1080, 6615, 4111, 13, 50786, 50786, 823, 11, 291, 727, 2464, 428, 3089, 411, 341, 11, 457, 437, 498, 297, 307, 294, 1045, 11, 457, 2602, 297, 307, 51098, 51098, 257, 3262, 420, 257, 3262, 4714, 30, 51210, 51210, 467, 311, 1293, 43495, 337, 291, 281, 3089, 293, 43495, 337, 428, 3820, 281, 14722, 13, 51474, 51474, 407, 510, 311, 1071, 636, 11, 920, 1553, 1228, 8062, 2144, 11, 457, 1228, 257, 337, 6367, 13, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.14275694375086312, "compression_ratio": 1.6666666666666667, "no_speech_prob": 1.0615977771522012e-05}, {"id": 27, "seek": 14192, "start": 150.35999999999999, "end": 156.6, "text": " Now, you could write your code like this, but what if n is in three, but instead n is", "tokens": [50364, 682, 3089, 11, 309, 576, 574, 411, 341, 13, 50486, 50486, 509, 747, 1184, 13075, 261, 293, 12972, 309, 538, 1080, 6615, 4111, 13, 50786, 50786, 823, 11, 291, 727, 2464, 428, 3089, 411, 341, 11, 457, 437, 498, 297, 307, 294, 1045, 11, 457, 2602, 297, 307, 51098, 51098, 257, 3262, 420, 257, 3262, 4714, 30, 51210, 51210, 467, 311, 1293, 43495, 337, 291, 281, 3089, 293, 43495, 337, 428, 3820, 281, 14722, 13, 51474, 51474, 407, 510, 311, 1071, 636, 11, 920, 1553, 1228, 8062, 2144, 11, 457, 1228, 257, 337, 6367, 13, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.14275694375086312, "compression_ratio": 1.6666666666666667, "no_speech_prob": 1.0615977771522012e-05}, {"id": 28, "seek": 14192, "start": 156.6, "end": 158.83999999999997, "text": " a hundred or a hundred thousand?", "tokens": [50364, 682, 3089, 11, 309, 576, 574, 411, 341, 13, 50486, 50486, 509, 747, 1184, 13075, 261, 293, 12972, 309, 538, 1080, 6615, 4111, 13, 50786, 50786, 823, 11, 291, 727, 2464, 428, 3089, 411, 341, 11, 457, 437, 498, 297, 307, 294, 1045, 11, 457, 2602, 297, 307, 51098, 51098, 257, 3262, 420, 257, 3262, 4714, 30, 51210, 51210, 467, 311, 1293, 43495, 337, 291, 281, 3089, 293, 43495, 337, 428, 3820, 281, 14722, 13, 51474, 51474, 407, 510, 311, 1071, 636, 11, 920, 1553, 1228, 8062, 2144, 11, 457, 1228, 257, 337, 6367, 13, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.14275694375086312, "compression_ratio": 1.6666666666666667, "no_speech_prob": 1.0615977771522012e-05}, {"id": 29, "seek": 14192, "start": 158.83999999999997, "end": 164.11999999999998, "text": " It's both inefficient for you to code and inefficient for your computer to compute.", "tokens": [50364, 682, 3089, 11, 309, 576, 574, 411, 341, 13, 50486, 50486, 509, 747, 1184, 13075, 261, 293, 12972, 309, 538, 1080, 6615, 4111, 13, 50786, 50786, 823, 11, 291, 727, 2464, 428, 3089, 411, 341, 11, 457, 437, 498, 297, 307, 294, 1045, 11, 457, 2602, 297, 307, 51098, 51098, 257, 3262, 420, 257, 3262, 4714, 30, 51210, 51210, 467, 311, 1293, 43495, 337, 291, 281, 3089, 293, 43495, 337, 428, 3820, 281, 14722, 13, 51474, 51474, 407, 510, 311, 1071, 636, 11, 920, 1553, 1228, 8062, 2144, 11, 457, 1228, 257, 337, 6367, 13, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.14275694375086312, "compression_ratio": 1.6666666666666667, "no_speech_prob": 1.0615977771522012e-05}, {"id": 30, "seek": 14192, "start": 164.11999999999998, "end": 170.07999999999998, "text": " So here's another way, still without using vectorization, but using a for loop.", "tokens": [50364, 682, 3089, 11, 309, 576, 574, 411, 341, 13, 50486, 50486, 509, 747, 1184, 13075, 261, 293, 12972, 309, 538, 1080, 6615, 4111, 13, 50786, 50786, 823, 11, 291, 727, 2464, 428, 3089, 411, 341, 11, 457, 437, 498, 297, 307, 294, 1045, 11, 457, 2602, 297, 307, 51098, 51098, 257, 3262, 420, 257, 3262, 4714, 30, 51210, 51210, 467, 311, 1293, 43495, 337, 291, 281, 3089, 293, 43495, 337, 428, 3820, 281, 14722, 13, 51474, 51474, 407, 510, 311, 1071, 636, 11, 920, 1553, 1228, 8062, 2144, 11, 457, 1228, 257, 337, 6367, 13, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.14275694375086312, "compression_ratio": 1.6666666666666667, "no_speech_prob": 1.0615977771522012e-05}, {"id": 31, "seek": 17008, "start": 170.08, "end": 178.10000000000002, "text": " In math, you can use a summation operator to add all the products of wj and xj for j", "tokens": [50364, 682, 5221, 11, 291, 393, 764, 257, 28811, 12973, 281, 909, 439, 264, 3383, 295, 261, 73, 293, 2031, 73, 337, 361, 50765, 50765, 6915, 472, 807, 297, 13, 50878, 50878, 1396, 2380, 264, 28811, 11, 291, 909, 272, 412, 264, 917, 13, 51127, 51127, 407, 264, 28811, 1709, 490, 361, 6915, 472, 493, 281, 293, 3009, 297, 337, 297, 6915, 1045, 13, 51495, 51495, 508, 4412, 1709, 490, 472, 11, 732, 11, 281, 1045, 13, 51677, 51677], "temperature": 0.0, "avg_logprob": -0.13118098974227904, "compression_ratio": 1.6867469879518073, "no_speech_prob": 5.9550775404204614e-06}, {"id": 32, "seek": 17008, "start": 178.10000000000002, "end": 180.36, "text": " equals one through n.", "tokens": [50364, 682, 5221, 11, 291, 393, 764, 257, 28811, 12973, 281, 909, 439, 264, 3383, 295, 261, 73, 293, 2031, 73, 337, 361, 50765, 50765, 6915, 472, 807, 297, 13, 50878, 50878, 1396, 2380, 264, 28811, 11, 291, 909, 272, 412, 264, 917, 13, 51127, 51127, 407, 264, 28811, 1709, 490, 361, 6915, 472, 493, 281, 293, 3009, 297, 337, 297, 6915, 1045, 13, 51495, 51495, 508, 4412, 1709, 490, 472, 11, 732, 11, 281, 1045, 13, 51677, 51677], "temperature": 0.0, "avg_logprob": -0.13118098974227904, "compression_ratio": 1.6867469879518073, "no_speech_prob": 5.9550775404204614e-06}, {"id": 33, "seek": 17008, "start": 180.36, "end": 185.34, "text": " Then outside the summation, you add b at the end.", "tokens": [50364, 682, 5221, 11, 291, 393, 764, 257, 28811, 12973, 281, 909, 439, 264, 3383, 295, 261, 73, 293, 2031, 73, 337, 361, 50765, 50765, 6915, 472, 807, 297, 13, 50878, 50878, 1396, 2380, 264, 28811, 11, 291, 909, 272, 412, 264, 917, 13, 51127, 51127, 407, 264, 28811, 1709, 490, 361, 6915, 472, 493, 281, 293, 3009, 297, 337, 297, 6915, 1045, 13, 51495, 51495, 508, 4412, 1709, 490, 472, 11, 732, 11, 281, 1045, 13, 51677, 51677], "temperature": 0.0, "avg_logprob": -0.13118098974227904, "compression_ratio": 1.6867469879518073, "no_speech_prob": 5.9550775404204614e-06}, {"id": 34, "seek": 17008, "start": 185.34, "end": 192.70000000000002, "text": " So the summation goes from j equals one up to and including n for n equals three.", "tokens": [50364, 682, 5221, 11, 291, 393, 764, 257, 28811, 12973, 281, 909, 439, 264, 3383, 295, 261, 73, 293, 2031, 73, 337, 361, 50765, 50765, 6915, 472, 807, 297, 13, 50878, 50878, 1396, 2380, 264, 28811, 11, 291, 909, 272, 412, 264, 917, 13, 51127, 51127, 407, 264, 28811, 1709, 490, 361, 6915, 472, 493, 281, 293, 3009, 297, 337, 297, 6915, 1045, 13, 51495, 51495, 508, 4412, 1709, 490, 472, 11, 732, 11, 281, 1045, 13, 51677, 51677], "temperature": 0.0, "avg_logprob": -0.13118098974227904, "compression_ratio": 1.6867469879518073, "no_speech_prob": 5.9550775404204614e-06}, {"id": 35, "seek": 17008, "start": 192.70000000000002, "end": 196.34, "text": " J therefore goes from one, two, to three.", "tokens": [50364, 682, 5221, 11, 291, 393, 764, 257, 28811, 12973, 281, 909, 439, 264, 3383, 295, 261, 73, 293, 2031, 73, 337, 361, 50765, 50765, 6915, 472, 807, 297, 13, 50878, 50878, 1396, 2380, 264, 28811, 11, 291, 909, 272, 412, 264, 917, 13, 51127, 51127, 407, 264, 28811, 1709, 490, 361, 6915, 472, 493, 281, 293, 3009, 297, 337, 297, 6915, 1045, 13, 51495, 51495, 508, 4412, 1709, 490, 472, 11, 732, 11, 281, 1045, 13, 51677, 51677], "temperature": 0.0, "avg_logprob": -0.13118098974227904, "compression_ratio": 1.6867469879518073, "no_speech_prob": 5.9550775404204614e-06}, {"id": 36, "seek": 19634, "start": 196.34, "end": 204.4, "text": " In code, you can initialize f to zero, then for j in range from zero to n, this actually", "tokens": [50364, 682, 3089, 11, 291, 393, 5883, 1125, 283, 281, 4018, 11, 550, 337, 361, 294, 3613, 490, 4018, 281, 297, 11, 341, 767, 50767, 50767, 1669, 361, 352, 490, 4018, 281, 297, 3175, 472, 13, 50961, 50961, 407, 490, 4018, 11, 472, 281, 732, 11, 291, 393, 550, 909, 281, 283, 264, 1674, 295, 261, 73, 1413, 2031, 73, 13, 51363, 51363, 6288, 11, 2380, 264, 337, 6367, 11, 291, 909, 272, 13, 51563, 51563, 13428, 300, 294, 15329, 11, 264, 3613, 4018, 281, 297, 1355, 300, 361, 1709, 490, 4018, 439, 264, 636, 281, 51843, 51843], "temperature": 0.0, "avg_logprob": -0.12211314114657315, "compression_ratio": 1.7225130890052356, "no_speech_prob": 1.9333472209837055e-06}, {"id": 37, "seek": 19634, "start": 204.4, "end": 208.28, "text": " makes j go from zero to n minus one.", "tokens": [50364, 682, 3089, 11, 291, 393, 5883, 1125, 283, 281, 4018, 11, 550, 337, 361, 294, 3613, 490, 4018, 281, 297, 11, 341, 767, 50767, 50767, 1669, 361, 352, 490, 4018, 281, 297, 3175, 472, 13, 50961, 50961, 407, 490, 4018, 11, 472, 281, 732, 11, 291, 393, 550, 909, 281, 283, 264, 1674, 295, 261, 73, 1413, 2031, 73, 13, 51363, 51363, 6288, 11, 2380, 264, 337, 6367, 11, 291, 909, 272, 13, 51563, 51563, 13428, 300, 294, 15329, 11, 264, 3613, 4018, 281, 297, 1355, 300, 361, 1709, 490, 4018, 439, 264, 636, 281, 51843, 51843], "temperature": 0.0, "avg_logprob": -0.12211314114657315, "compression_ratio": 1.7225130890052356, "no_speech_prob": 1.9333472209837055e-06}, {"id": 38, "seek": 19634, "start": 208.28, "end": 216.32, "text": " So from zero, one to two, you can then add to f the product of wj times xj.", "tokens": [50364, 682, 3089, 11, 291, 393, 5883, 1125, 283, 281, 4018, 11, 550, 337, 361, 294, 3613, 490, 4018, 281, 297, 11, 341, 767, 50767, 50767, 1669, 361, 352, 490, 4018, 281, 297, 3175, 472, 13, 50961, 50961, 407, 490, 4018, 11, 472, 281, 732, 11, 291, 393, 550, 909, 281, 283, 264, 1674, 295, 261, 73, 1413, 2031, 73, 13, 51363, 51363, 6288, 11, 2380, 264, 337, 6367, 11, 291, 909, 272, 13, 51563, 51563, 13428, 300, 294, 15329, 11, 264, 3613, 4018, 281, 297, 1355, 300, 361, 1709, 490, 4018, 439, 264, 636, 281, 51843, 51843], "temperature": 0.0, "avg_logprob": -0.12211314114657315, "compression_ratio": 1.7225130890052356, "no_speech_prob": 1.9333472209837055e-06}, {"id": 39, "seek": 19634, "start": 216.32, "end": 220.32, "text": " Finally, outside the for loop, you add b.", "tokens": [50364, 682, 3089, 11, 291, 393, 5883, 1125, 283, 281, 4018, 11, 550, 337, 361, 294, 3613, 490, 4018, 281, 297, 11, 341, 767, 50767, 50767, 1669, 361, 352, 490, 4018, 281, 297, 3175, 472, 13, 50961, 50961, 407, 490, 4018, 11, 472, 281, 732, 11, 291, 393, 550, 909, 281, 283, 264, 1674, 295, 261, 73, 1413, 2031, 73, 13, 51363, 51363, 6288, 11, 2380, 264, 337, 6367, 11, 291, 909, 272, 13, 51563, 51563, 13428, 300, 294, 15329, 11, 264, 3613, 4018, 281, 297, 1355, 300, 361, 1709, 490, 4018, 439, 264, 636, 281, 51843, 51843], "temperature": 0.0, "avg_logprob": -0.12211314114657315, "compression_ratio": 1.7225130890052356, "no_speech_prob": 1.9333472209837055e-06}, {"id": 40, "seek": 19634, "start": 220.32, "end": 225.92000000000002, "text": " Notice that in Python, the range zero to n means that j goes from zero all the way to", "tokens": [50364, 682, 3089, 11, 291, 393, 5883, 1125, 283, 281, 4018, 11, 550, 337, 361, 294, 3613, 490, 4018, 281, 297, 11, 341, 767, 50767, 50767, 1669, 361, 352, 490, 4018, 281, 297, 3175, 472, 13, 50961, 50961, 407, 490, 4018, 11, 472, 281, 732, 11, 291, 393, 550, 909, 281, 283, 264, 1674, 295, 261, 73, 1413, 2031, 73, 13, 51363, 51363, 6288, 11, 2380, 264, 337, 6367, 11, 291, 909, 272, 13, 51563, 51563, 13428, 300, 294, 15329, 11, 264, 3613, 4018, 281, 297, 1355, 300, 361, 1709, 490, 4018, 439, 264, 636, 281, 51843, 51843], "temperature": 0.0, "avg_logprob": -0.12211314114657315, "compression_ratio": 1.7225130890052356, "no_speech_prob": 1.9333472209837055e-06}, {"id": 41, "seek": 22592, "start": 225.92, "end": 229.88, "text": " n minus one and does not include n itself.", "tokens": [50364, 297, 3175, 472, 293, 775, 406, 4090, 297, 2564, 13, 50562, 50562, 400, 544, 12719, 11, 341, 307, 3720, 3613, 297, 294, 15329, 13, 50806, 50806, 583, 294, 341, 960, 11, 286, 3869, 257, 4018, 510, 445, 281, 16078, 300, 309, 3719, 490, 4018, 13, 51100, 51100, 3987, 341, 11420, 307, 257, 857, 1101, 813, 264, 700, 472, 11, 309, 920, 1177, 380, 764, 8062, 2144, 51396, 51396, 293, 1943, 380, 300, 7148, 13, 51526, 51526, 823, 718, 311, 574, 412, 577, 291, 393, 360, 341, 1228, 8062, 2144, 13, 51838, 51838], "temperature": 0.0, "avg_logprob": -0.12636690951408225, "compression_ratio": 1.5764192139737991, "no_speech_prob": 6.339096671581501e-06}, {"id": 42, "seek": 22592, "start": 229.88, "end": 234.76, "text": " And more commonly, this is written range n in Python.", "tokens": [50364, 297, 3175, 472, 293, 775, 406, 4090, 297, 2564, 13, 50562, 50562, 400, 544, 12719, 11, 341, 307, 3720, 3613, 297, 294, 15329, 13, 50806, 50806, 583, 294, 341, 960, 11, 286, 3869, 257, 4018, 510, 445, 281, 16078, 300, 309, 3719, 490, 4018, 13, 51100, 51100, 3987, 341, 11420, 307, 257, 857, 1101, 813, 264, 700, 472, 11, 309, 920, 1177, 380, 764, 8062, 2144, 51396, 51396, 293, 1943, 380, 300, 7148, 13, 51526, 51526, 823, 718, 311, 574, 412, 577, 291, 393, 360, 341, 1228, 8062, 2144, 13, 51838, 51838], "temperature": 0.0, "avg_logprob": -0.12636690951408225, "compression_ratio": 1.5764192139737991, "no_speech_prob": 6.339096671581501e-06}, {"id": 43, "seek": 22592, "start": 234.76, "end": 240.64, "text": " But in this video, I added a zero here just to emphasize that it starts from zero.", "tokens": [50364, 297, 3175, 472, 293, 775, 406, 4090, 297, 2564, 13, 50562, 50562, 400, 544, 12719, 11, 341, 307, 3720, 3613, 297, 294, 15329, 13, 50806, 50806, 583, 294, 341, 960, 11, 286, 3869, 257, 4018, 510, 445, 281, 16078, 300, 309, 3719, 490, 4018, 13, 51100, 51100, 3987, 341, 11420, 307, 257, 857, 1101, 813, 264, 700, 472, 11, 309, 920, 1177, 380, 764, 8062, 2144, 51396, 51396, 293, 1943, 380, 300, 7148, 13, 51526, 51526, 823, 718, 311, 574, 412, 577, 291, 393, 360, 341, 1228, 8062, 2144, 13, 51838, 51838], "temperature": 0.0, "avg_logprob": -0.12636690951408225, "compression_ratio": 1.5764192139737991, "no_speech_prob": 6.339096671581501e-06}, {"id": 44, "seek": 22592, "start": 240.64, "end": 246.56, "text": " While this implementation is a bit better than the first one, it still doesn't use vectorization", "tokens": [50364, 297, 3175, 472, 293, 775, 406, 4090, 297, 2564, 13, 50562, 50562, 400, 544, 12719, 11, 341, 307, 3720, 3613, 297, 294, 15329, 13, 50806, 50806, 583, 294, 341, 960, 11, 286, 3869, 257, 4018, 510, 445, 281, 16078, 300, 309, 3719, 490, 4018, 13, 51100, 51100, 3987, 341, 11420, 307, 257, 857, 1101, 813, 264, 700, 472, 11, 309, 920, 1177, 380, 764, 8062, 2144, 51396, 51396, 293, 1943, 380, 300, 7148, 13, 51526, 51526, 823, 718, 311, 574, 412, 577, 291, 393, 360, 341, 1228, 8062, 2144, 13, 51838, 51838], "temperature": 0.0, "avg_logprob": -0.12636690951408225, "compression_ratio": 1.5764192139737991, "no_speech_prob": 6.339096671581501e-06}, {"id": 45, "seek": 22592, "start": 246.56, "end": 249.16, "text": " and isn't that efficient.", "tokens": [50364, 297, 3175, 472, 293, 775, 406, 4090, 297, 2564, 13, 50562, 50562, 400, 544, 12719, 11, 341, 307, 3720, 3613, 297, 294, 15329, 13, 50806, 50806, 583, 294, 341, 960, 11, 286, 3869, 257, 4018, 510, 445, 281, 16078, 300, 309, 3719, 490, 4018, 13, 51100, 51100, 3987, 341, 11420, 307, 257, 857, 1101, 813, 264, 700, 472, 11, 309, 920, 1177, 380, 764, 8062, 2144, 51396, 51396, 293, 1943, 380, 300, 7148, 13, 51526, 51526, 823, 718, 311, 574, 412, 577, 291, 393, 360, 341, 1228, 8062, 2144, 13, 51838, 51838], "temperature": 0.0, "avg_logprob": -0.12636690951408225, "compression_ratio": 1.5764192139737991, "no_speech_prob": 6.339096671581501e-06}, {"id": 46, "seek": 22592, "start": 249.16, "end": 255.39999999999998, "text": " Now let's look at how you can do this using vectorization.", "tokens": [50364, 297, 3175, 472, 293, 775, 406, 4090, 297, 2564, 13, 50562, 50562, 400, 544, 12719, 11, 341, 307, 3720, 3613, 297, 294, 15329, 13, 50806, 50806, 583, 294, 341, 960, 11, 286, 3869, 257, 4018, 510, 445, 281, 16078, 300, 309, 3719, 490, 4018, 13, 51100, 51100, 3987, 341, 11420, 307, 257, 857, 1101, 813, 264, 700, 472, 11, 309, 920, 1177, 380, 764, 8062, 2144, 51396, 51396, 293, 1943, 380, 300, 7148, 13, 51526, 51526, 823, 718, 311, 574, 412, 577, 291, 393, 360, 341, 1228, 8062, 2144, 13, 51838, 51838], "temperature": 0.0, "avg_logprob": -0.12636690951408225, "compression_ratio": 1.5764192139737991, "no_speech_prob": 6.339096671581501e-06}, {"id": 47, "seek": 25540, "start": 255.4, "end": 261.38, "text": " This is the math expression of the function f, which is the dot product of w and x plus", "tokens": [50364, 639, 307, 264, 5221, 6114, 295, 264, 2445, 283, 11, 597, 307, 264, 5893, 1674, 295, 261, 293, 2031, 1804, 50663, 50663, 272, 13, 50730, 50730, 400, 586, 291, 393, 4445, 341, 365, 257, 2167, 1622, 295, 3089, 13, 50911, 50911, 3146, 15866, 283, 79, 6915, 33808, 5893, 5893, 11, 286, 848, 5893, 5893, 570, 264, 700, 5893, 307, 264, 2896, 51272, 51272, 293, 264, 1150, 5893, 307, 264, 2445, 420, 264, 3170, 1219, 5893, 13, 51535, 51535, 583, 309, 311, 283, 79, 6915, 33808, 5893, 5893, 261, 22117, 2031, 13, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.17288175884046053, "compression_ratio": 1.6683168316831682, "no_speech_prob": 8.93947890290292e-06}, {"id": 48, "seek": 25540, "start": 261.38, "end": 262.72, "text": " b.", "tokens": [50364, 639, 307, 264, 5221, 6114, 295, 264, 2445, 283, 11, 597, 307, 264, 5893, 1674, 295, 261, 293, 2031, 1804, 50663, 50663, 272, 13, 50730, 50730, 400, 586, 291, 393, 4445, 341, 365, 257, 2167, 1622, 295, 3089, 13, 50911, 50911, 3146, 15866, 283, 79, 6915, 33808, 5893, 5893, 11, 286, 848, 5893, 5893, 570, 264, 700, 5893, 307, 264, 2896, 51272, 51272, 293, 264, 1150, 5893, 307, 264, 2445, 420, 264, 3170, 1219, 5893, 13, 51535, 51535, 583, 309, 311, 283, 79, 6915, 33808, 5893, 5893, 261, 22117, 2031, 13, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.17288175884046053, "compression_ratio": 1.6683168316831682, "no_speech_prob": 8.93947890290292e-06}, {"id": 49, "seek": 25540, "start": 262.72, "end": 266.34000000000003, "text": " And now you can implement this with a single line of code.", "tokens": [50364, 639, 307, 264, 5221, 6114, 295, 264, 2445, 283, 11, 597, 307, 264, 5893, 1674, 295, 261, 293, 2031, 1804, 50663, 50663, 272, 13, 50730, 50730, 400, 586, 291, 393, 4445, 341, 365, 257, 2167, 1622, 295, 3089, 13, 50911, 50911, 3146, 15866, 283, 79, 6915, 33808, 5893, 5893, 11, 286, 848, 5893, 5893, 570, 264, 700, 5893, 307, 264, 2896, 51272, 51272, 293, 264, 1150, 5893, 307, 264, 2445, 420, 264, 3170, 1219, 5893, 13, 51535, 51535, 583, 309, 311, 283, 79, 6915, 33808, 5893, 5893, 261, 22117, 2031, 13, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.17288175884046053, "compression_ratio": 1.6683168316831682, "no_speech_prob": 8.93947890290292e-06}, {"id": 50, "seek": 25540, "start": 266.34000000000003, "end": 273.56, "text": " By computing fp equals np dot dot, I said dot dot because the first dot is the period", "tokens": [50364, 639, 307, 264, 5221, 6114, 295, 264, 2445, 283, 11, 597, 307, 264, 5893, 1674, 295, 261, 293, 2031, 1804, 50663, 50663, 272, 13, 50730, 50730, 400, 586, 291, 393, 4445, 341, 365, 257, 2167, 1622, 295, 3089, 13, 50911, 50911, 3146, 15866, 283, 79, 6915, 33808, 5893, 5893, 11, 286, 848, 5893, 5893, 570, 264, 700, 5893, 307, 264, 2896, 51272, 51272, 293, 264, 1150, 5893, 307, 264, 2445, 420, 264, 3170, 1219, 5893, 13, 51535, 51535, 583, 309, 311, 283, 79, 6915, 33808, 5893, 5893, 261, 22117, 2031, 13, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.17288175884046053, "compression_ratio": 1.6683168316831682, "no_speech_prob": 8.93947890290292e-06}, {"id": 51, "seek": 25540, "start": 273.56, "end": 278.82, "text": " and the second dot is the function or the method called dot.", "tokens": [50364, 639, 307, 264, 5221, 6114, 295, 264, 2445, 283, 11, 597, 307, 264, 5893, 1674, 295, 261, 293, 2031, 1804, 50663, 50663, 272, 13, 50730, 50730, 400, 586, 291, 393, 4445, 341, 365, 257, 2167, 1622, 295, 3089, 13, 50911, 50911, 3146, 15866, 283, 79, 6915, 33808, 5893, 5893, 11, 286, 848, 5893, 5893, 570, 264, 700, 5893, 307, 264, 2896, 51272, 51272, 293, 264, 1150, 5893, 307, 264, 2445, 420, 264, 3170, 1219, 5893, 13, 51535, 51535, 583, 309, 311, 283, 79, 6915, 33808, 5893, 5893, 261, 22117, 2031, 13, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.17288175884046053, "compression_ratio": 1.6683168316831682, "no_speech_prob": 8.93947890290292e-06}, {"id": 52, "seek": 25540, "start": 278.82, "end": 284.08, "text": " But it's fp equals np dot dot w comma x.", "tokens": [50364, 639, 307, 264, 5221, 6114, 295, 264, 2445, 283, 11, 597, 307, 264, 5893, 1674, 295, 261, 293, 2031, 1804, 50663, 50663, 272, 13, 50730, 50730, 400, 586, 291, 393, 4445, 341, 365, 257, 2167, 1622, 295, 3089, 13, 50911, 50911, 3146, 15866, 283, 79, 6915, 33808, 5893, 5893, 11, 286, 848, 5893, 5893, 570, 264, 700, 5893, 307, 264, 2896, 51272, 51272, 293, 264, 1150, 5893, 307, 264, 2445, 420, 264, 3170, 1219, 5893, 13, 51535, 51535, 583, 309, 311, 283, 79, 6915, 33808, 5893, 5893, 261, 22117, 2031, 13, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.17288175884046053, "compression_ratio": 1.6683168316831682, "no_speech_prob": 8.93947890290292e-06}, {"id": 53, "seek": 28408, "start": 284.08, "end": 291.59999999999997, "text": " And this implements the mathematical dot products between the vectors w and x.", "tokens": [50364, 400, 341, 704, 17988, 264, 18894, 5893, 3383, 1296, 264, 18875, 261, 293, 2031, 13, 50740, 50740, 400, 550, 2721, 11, 291, 393, 909, 272, 281, 309, 412, 264, 917, 13, 50948, 50948, 639, 22592, 47, 88, 5893, 2445, 307, 257, 8062, 1602, 11420, 295, 264, 5893, 1674, 6916, 1296, 732, 18875, 13, 51290, 51290, 400, 2318, 562, 297, 307, 2416, 11, 341, 486, 1190, 709, 4663, 813, 264, 732, 3894, 3089, 51550, 51550, 5110, 13, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.10723825693130493, "compression_ratio": 1.64, "no_speech_prob": 1.0348351224820362e-06}, {"id": 54, "seek": 28408, "start": 291.59999999999997, "end": 295.76, "text": " And then finally, you can add b to it at the end.", "tokens": [50364, 400, 341, 704, 17988, 264, 18894, 5893, 3383, 1296, 264, 18875, 261, 293, 2031, 13, 50740, 50740, 400, 550, 2721, 11, 291, 393, 909, 272, 281, 309, 412, 264, 917, 13, 50948, 50948, 639, 22592, 47, 88, 5893, 2445, 307, 257, 8062, 1602, 11420, 295, 264, 5893, 1674, 6916, 1296, 732, 18875, 13, 51290, 51290, 400, 2318, 562, 297, 307, 2416, 11, 341, 486, 1190, 709, 4663, 813, 264, 732, 3894, 3089, 51550, 51550, 5110, 13, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.10723825693130493, "compression_ratio": 1.64, "no_speech_prob": 1.0348351224820362e-06}, {"id": 55, "seek": 28408, "start": 295.76, "end": 302.59999999999997, "text": " This NumPy dot function is a vectorized implementation of the dot product operation between two vectors.", "tokens": [50364, 400, 341, 704, 17988, 264, 18894, 5893, 3383, 1296, 264, 18875, 261, 293, 2031, 13, 50740, 50740, 400, 550, 2721, 11, 291, 393, 909, 272, 281, 309, 412, 264, 917, 13, 50948, 50948, 639, 22592, 47, 88, 5893, 2445, 307, 257, 8062, 1602, 11420, 295, 264, 5893, 1674, 6916, 1296, 732, 18875, 13, 51290, 51290, 400, 2318, 562, 297, 307, 2416, 11, 341, 486, 1190, 709, 4663, 813, 264, 732, 3894, 3089, 51550, 51550, 5110, 13, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.10723825693130493, "compression_ratio": 1.64, "no_speech_prob": 1.0348351224820362e-06}, {"id": 56, "seek": 28408, "start": 302.59999999999997, "end": 307.79999999999995, "text": " And especially when n is large, this will run much faster than the two previous code", "tokens": [50364, 400, 341, 704, 17988, 264, 18894, 5893, 3383, 1296, 264, 18875, 261, 293, 2031, 13, 50740, 50740, 400, 550, 2721, 11, 291, 393, 909, 272, 281, 309, 412, 264, 917, 13, 50948, 50948, 639, 22592, 47, 88, 5893, 2445, 307, 257, 8062, 1602, 11420, 295, 264, 5893, 1674, 6916, 1296, 732, 18875, 13, 51290, 51290, 400, 2318, 562, 297, 307, 2416, 11, 341, 486, 1190, 709, 4663, 813, 264, 732, 3894, 3089, 51550, 51550, 5110, 13, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.10723825693130493, "compression_ratio": 1.64, "no_speech_prob": 1.0348351224820362e-06}, {"id": 57, "seek": 28408, "start": 307.79999999999995, "end": 309.28, "text": " examples.", "tokens": [50364, 400, 341, 704, 17988, 264, 18894, 5893, 3383, 1296, 264, 18875, 261, 293, 2031, 13, 50740, 50740, 400, 550, 2721, 11, 291, 393, 909, 272, 281, 309, 412, 264, 917, 13, 50948, 50948, 639, 22592, 47, 88, 5893, 2445, 307, 257, 8062, 1602, 11420, 295, 264, 5893, 1674, 6916, 1296, 732, 18875, 13, 51290, 51290, 400, 2318, 562, 297, 307, 2416, 11, 341, 486, 1190, 709, 4663, 813, 264, 732, 3894, 3089, 51550, 51550, 5110, 13, 51624, 51624], "temperature": 0.0, "avg_logprob": -0.10723825693130493, "compression_ratio": 1.64, "no_speech_prob": 1.0348351224820362e-06}, {"id": 58, "seek": 30928, "start": 309.28, "end": 314.47999999999996, "text": " I want to emphasize that vectorization actually has two distinct benefits.", "tokens": [50364, 286, 528, 281, 16078, 300, 8062, 2144, 767, 575, 732, 10644, 5311, 13, 50624, 50624, 2386, 309, 1669, 264, 3089, 11639, 13, 50708, 50708, 467, 311, 586, 445, 472, 1622, 295, 3089, 13, 50806, 50806, 6998, 380, 300, 1627, 30, 50867, 50867, 400, 1150, 11, 309, 611, 3542, 294, 428, 3089, 2614, 709, 4663, 813, 2139, 295, 264, 732, 3894, 51144, 51144, 4445, 763, 300, 630, 406, 764, 8062, 2144, 13, 51358, 51358, 400, 264, 1778, 300, 264, 8062, 1602, 11420, 307, 709, 4663, 307, 2261, 264, 8026, 11, 264, 22592, 47, 88, 51710, 51710], "temperature": 0.0, "avg_logprob": -0.14591522806698515, "compression_ratio": 1.6624472573839661, "no_speech_prob": 1.7603230162421823e-06}, {"id": 59, "seek": 30928, "start": 314.47999999999996, "end": 316.15999999999997, "text": " First it makes the code shorter.", "tokens": [50364, 286, 528, 281, 16078, 300, 8062, 2144, 767, 575, 732, 10644, 5311, 13, 50624, 50624, 2386, 309, 1669, 264, 3089, 11639, 13, 50708, 50708, 467, 311, 586, 445, 472, 1622, 295, 3089, 13, 50806, 50806, 6998, 380, 300, 1627, 30, 50867, 50867, 400, 1150, 11, 309, 611, 3542, 294, 428, 3089, 2614, 709, 4663, 813, 2139, 295, 264, 732, 3894, 51144, 51144, 4445, 763, 300, 630, 406, 764, 8062, 2144, 13, 51358, 51358, 400, 264, 1778, 300, 264, 8062, 1602, 11420, 307, 709, 4663, 307, 2261, 264, 8026, 11, 264, 22592, 47, 88, 51710, 51710], "temperature": 0.0, "avg_logprob": -0.14591522806698515, "compression_ratio": 1.6624472573839661, "no_speech_prob": 1.7603230162421823e-06}, {"id": 60, "seek": 30928, "start": 316.15999999999997, "end": 318.11999999999995, "text": " It's now just one line of code.", "tokens": [50364, 286, 528, 281, 16078, 300, 8062, 2144, 767, 575, 732, 10644, 5311, 13, 50624, 50624, 2386, 309, 1669, 264, 3089, 11639, 13, 50708, 50708, 467, 311, 586, 445, 472, 1622, 295, 3089, 13, 50806, 50806, 6998, 380, 300, 1627, 30, 50867, 50867, 400, 1150, 11, 309, 611, 3542, 294, 428, 3089, 2614, 709, 4663, 813, 2139, 295, 264, 732, 3894, 51144, 51144, 4445, 763, 300, 630, 406, 764, 8062, 2144, 13, 51358, 51358, 400, 264, 1778, 300, 264, 8062, 1602, 11420, 307, 709, 4663, 307, 2261, 264, 8026, 11, 264, 22592, 47, 88, 51710, 51710], "temperature": 0.0, "avg_logprob": -0.14591522806698515, "compression_ratio": 1.6624472573839661, "no_speech_prob": 1.7603230162421823e-06}, {"id": 61, "seek": 30928, "start": 318.11999999999995, "end": 319.34, "text": " Isn't that cool?", "tokens": [50364, 286, 528, 281, 16078, 300, 8062, 2144, 767, 575, 732, 10644, 5311, 13, 50624, 50624, 2386, 309, 1669, 264, 3089, 11639, 13, 50708, 50708, 467, 311, 586, 445, 472, 1622, 295, 3089, 13, 50806, 50806, 6998, 380, 300, 1627, 30, 50867, 50867, 400, 1150, 11, 309, 611, 3542, 294, 428, 3089, 2614, 709, 4663, 813, 2139, 295, 264, 732, 3894, 51144, 51144, 4445, 763, 300, 630, 406, 764, 8062, 2144, 13, 51358, 51358, 400, 264, 1778, 300, 264, 8062, 1602, 11420, 307, 709, 4663, 307, 2261, 264, 8026, 11, 264, 22592, 47, 88, 51710, 51710], "temperature": 0.0, "avg_logprob": -0.14591522806698515, "compression_ratio": 1.6624472573839661, "no_speech_prob": 1.7603230162421823e-06}, {"id": 62, "seek": 30928, "start": 319.34, "end": 324.88, "text": " And second, it also results in your code running much faster than either of the two previous", "tokens": [50364, 286, 528, 281, 16078, 300, 8062, 2144, 767, 575, 732, 10644, 5311, 13, 50624, 50624, 2386, 309, 1669, 264, 3089, 11639, 13, 50708, 50708, 467, 311, 586, 445, 472, 1622, 295, 3089, 13, 50806, 50806, 6998, 380, 300, 1627, 30, 50867, 50867, 400, 1150, 11, 309, 611, 3542, 294, 428, 3089, 2614, 709, 4663, 813, 2139, 295, 264, 732, 3894, 51144, 51144, 4445, 763, 300, 630, 406, 764, 8062, 2144, 13, 51358, 51358, 400, 264, 1778, 300, 264, 8062, 1602, 11420, 307, 709, 4663, 307, 2261, 264, 8026, 11, 264, 22592, 47, 88, 51710, 51710], "temperature": 0.0, "avg_logprob": -0.14591522806698515, "compression_ratio": 1.6624472573839661, "no_speech_prob": 1.7603230162421823e-06}, {"id": 63, "seek": 30928, "start": 324.88, "end": 329.15999999999997, "text": " implementations that did not use vectorization.", "tokens": [50364, 286, 528, 281, 16078, 300, 8062, 2144, 767, 575, 732, 10644, 5311, 13, 50624, 50624, 2386, 309, 1669, 264, 3089, 11639, 13, 50708, 50708, 467, 311, 586, 445, 472, 1622, 295, 3089, 13, 50806, 50806, 6998, 380, 300, 1627, 30, 50867, 50867, 400, 1150, 11, 309, 611, 3542, 294, 428, 3089, 2614, 709, 4663, 813, 2139, 295, 264, 732, 3894, 51144, 51144, 4445, 763, 300, 630, 406, 764, 8062, 2144, 13, 51358, 51358, 400, 264, 1778, 300, 264, 8062, 1602, 11420, 307, 709, 4663, 307, 2261, 264, 8026, 11, 264, 22592, 47, 88, 51710, 51710], "temperature": 0.0, "avg_logprob": -0.14591522806698515, "compression_ratio": 1.6624472573839661, "no_speech_prob": 1.7603230162421823e-06}, {"id": 64, "seek": 30928, "start": 329.15999999999997, "end": 336.2, "text": " And the reason that the vectorized implementation is much faster is behind the scenes, the NumPy", "tokens": [50364, 286, 528, 281, 16078, 300, 8062, 2144, 767, 575, 732, 10644, 5311, 13, 50624, 50624, 2386, 309, 1669, 264, 3089, 11639, 13, 50708, 50708, 467, 311, 586, 445, 472, 1622, 295, 3089, 13, 50806, 50806, 6998, 380, 300, 1627, 30, 50867, 50867, 400, 1150, 11, 309, 611, 3542, 294, 428, 3089, 2614, 709, 4663, 813, 2139, 295, 264, 732, 3894, 51144, 51144, 4445, 763, 300, 630, 406, 764, 8062, 2144, 13, 51358, 51358, 400, 264, 1778, 300, 264, 8062, 1602, 11420, 307, 709, 4663, 307, 2261, 264, 8026, 11, 264, 22592, 47, 88, 51710, 51710], "temperature": 0.0, "avg_logprob": -0.14591522806698515, "compression_ratio": 1.6624472573839661, "no_speech_prob": 1.7603230162421823e-06}, {"id": 65, "seek": 33620, "start": 336.2, "end": 340.92, "text": " dot function is able to use parallel hardware in your computer.", "tokens": [50364, 5893, 2445, 307, 1075, 281, 764, 8952, 8837, 294, 428, 3820, 13, 50600, 50600, 400, 341, 307, 2074, 1968, 291, 434, 2614, 341, 322, 257, 2710, 3820, 11, 300, 307, 322, 257, 2710, 50814, 50814, 3820, 13199, 11, 420, 498, 291, 366, 1228, 257, 18407, 11, 257, 11837, 15321, 4985, 300, 311, 2049, 1143, 51132, 51132, 281, 21341, 3479, 2539, 4782, 13, 51276, 51276, 400, 264, 3485, 295, 264, 22592, 47, 88, 5893, 2445, 281, 764, 8952, 8837, 1669, 309, 709, 544, 51530, 51530], "temperature": 0.0, "avg_logprob": -0.08595156115154888, "compression_ratio": 1.7047619047619047, "no_speech_prob": 1.0188041414949112e-06}, {"id": 66, "seek": 33620, "start": 340.92, "end": 345.2, "text": " And this is true whether you're running this on a normal computer, that is on a normal", "tokens": [50364, 5893, 2445, 307, 1075, 281, 764, 8952, 8837, 294, 428, 3820, 13, 50600, 50600, 400, 341, 307, 2074, 1968, 291, 434, 2614, 341, 322, 257, 2710, 3820, 11, 300, 307, 322, 257, 2710, 50814, 50814, 3820, 13199, 11, 420, 498, 291, 366, 1228, 257, 18407, 11, 257, 11837, 15321, 4985, 300, 311, 2049, 1143, 51132, 51132, 281, 21341, 3479, 2539, 4782, 13, 51276, 51276, 400, 264, 3485, 295, 264, 22592, 47, 88, 5893, 2445, 281, 764, 8952, 8837, 1669, 309, 709, 544, 51530, 51530], "temperature": 0.0, "avg_logprob": -0.08595156115154888, "compression_ratio": 1.7047619047619047, "no_speech_prob": 1.0188041414949112e-06}, {"id": 67, "seek": 33620, "start": 345.2, "end": 351.56, "text": " computer CPU, or if you are using a GPU, a graphics processor unit that's often used", "tokens": [50364, 5893, 2445, 307, 1075, 281, 764, 8952, 8837, 294, 428, 3820, 13, 50600, 50600, 400, 341, 307, 2074, 1968, 291, 434, 2614, 341, 322, 257, 2710, 3820, 11, 300, 307, 322, 257, 2710, 50814, 50814, 3820, 13199, 11, 420, 498, 291, 366, 1228, 257, 18407, 11, 257, 11837, 15321, 4985, 300, 311, 2049, 1143, 51132, 51132, 281, 21341, 3479, 2539, 4782, 13, 51276, 51276, 400, 264, 3485, 295, 264, 22592, 47, 88, 5893, 2445, 281, 764, 8952, 8837, 1669, 309, 709, 544, 51530, 51530], "temperature": 0.0, "avg_logprob": -0.08595156115154888, "compression_ratio": 1.7047619047619047, "no_speech_prob": 1.0188041414949112e-06}, {"id": 68, "seek": 33620, "start": 351.56, "end": 354.44, "text": " to accelerate machine learning jobs.", "tokens": [50364, 5893, 2445, 307, 1075, 281, 764, 8952, 8837, 294, 428, 3820, 13, 50600, 50600, 400, 341, 307, 2074, 1968, 291, 434, 2614, 341, 322, 257, 2710, 3820, 11, 300, 307, 322, 257, 2710, 50814, 50814, 3820, 13199, 11, 420, 498, 291, 366, 1228, 257, 18407, 11, 257, 11837, 15321, 4985, 300, 311, 2049, 1143, 51132, 51132, 281, 21341, 3479, 2539, 4782, 13, 51276, 51276, 400, 264, 3485, 295, 264, 22592, 47, 88, 5893, 2445, 281, 764, 8952, 8837, 1669, 309, 709, 544, 51530, 51530], "temperature": 0.0, "avg_logprob": -0.08595156115154888, "compression_ratio": 1.7047619047619047, "no_speech_prob": 1.0188041414949112e-06}, {"id": 69, "seek": 33620, "start": 354.44, "end": 359.52, "text": " And the ability of the NumPy dot function to use parallel hardware makes it much more", "tokens": [50364, 5893, 2445, 307, 1075, 281, 764, 8952, 8837, 294, 428, 3820, 13, 50600, 50600, 400, 341, 307, 2074, 1968, 291, 434, 2614, 341, 322, 257, 2710, 3820, 11, 300, 307, 322, 257, 2710, 50814, 50814, 3820, 13199, 11, 420, 498, 291, 366, 1228, 257, 18407, 11, 257, 11837, 15321, 4985, 300, 311, 2049, 1143, 51132, 51132, 281, 21341, 3479, 2539, 4782, 13, 51276, 51276, 400, 264, 3485, 295, 264, 22592, 47, 88, 5893, 2445, 281, 764, 8952, 8837, 1669, 309, 709, 544, 51530, 51530], "temperature": 0.0, "avg_logprob": -0.08595156115154888, "compression_ratio": 1.7047619047619047, "no_speech_prob": 1.0188041414949112e-06}, {"id": 70, "seek": 35952, "start": 359.52, "end": 367.52, "text": " efficient than the for loop or the sequential calculation that we saw previously.", "tokens": [50364, 7148, 813, 264, 337, 6367, 420, 264, 42881, 17108, 300, 321, 1866, 8046, 13, 50764, 50764, 823, 341, 3037, 307, 709, 544, 8496, 562, 297, 307, 2416, 570, 291, 366, 406, 18444, 261, 15, 1413, 51134, 51134, 2031, 15, 1804, 261, 16, 1413, 2031, 16, 1804, 3195, 295, 4497, 2115, 411, 291, 576, 362, 632, 337, 264, 3894, 51464, 51464, 3037, 13, 51514, 51514, 583, 1339, 341, 19155, 257, 688, 322, 264, 18444, 11, 309, 311, 920, 406, 300, 24903, 379, 7148, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.11019114560859147, "compression_ratio": 1.6409090909090909, "no_speech_prob": 6.5403587541368324e-06}, {"id": 71, "seek": 35952, "start": 367.52, "end": 374.91999999999996, "text": " Now this version is much more practical when n is large because you are not typing w0 times", "tokens": [50364, 7148, 813, 264, 337, 6367, 420, 264, 42881, 17108, 300, 321, 1866, 8046, 13, 50764, 50764, 823, 341, 3037, 307, 709, 544, 8496, 562, 297, 307, 2416, 570, 291, 366, 406, 18444, 261, 15, 1413, 51134, 51134, 2031, 15, 1804, 261, 16, 1413, 2031, 16, 1804, 3195, 295, 4497, 2115, 411, 291, 576, 362, 632, 337, 264, 3894, 51464, 51464, 3037, 13, 51514, 51514, 583, 1339, 341, 19155, 257, 688, 322, 264, 18444, 11, 309, 311, 920, 406, 300, 24903, 379, 7148, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.11019114560859147, "compression_ratio": 1.6409090909090909, "no_speech_prob": 6.5403587541368324e-06}, {"id": 72, "seek": 35952, "start": 374.91999999999996, "end": 381.52, "text": " x0 plus w1 times x1 plus lots of additional terms like you would have had for the previous", "tokens": [50364, 7148, 813, 264, 337, 6367, 420, 264, 42881, 17108, 300, 321, 1866, 8046, 13, 50764, 50764, 823, 341, 3037, 307, 709, 544, 8496, 562, 297, 307, 2416, 570, 291, 366, 406, 18444, 261, 15, 1413, 51134, 51134, 2031, 15, 1804, 261, 16, 1413, 2031, 16, 1804, 3195, 295, 4497, 2115, 411, 291, 576, 362, 632, 337, 264, 3894, 51464, 51464, 3037, 13, 51514, 51514, 583, 1339, 341, 19155, 257, 688, 322, 264, 18444, 11, 309, 311, 920, 406, 300, 24903, 379, 7148, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.11019114560859147, "compression_ratio": 1.6409090909090909, "no_speech_prob": 6.5403587541368324e-06}, {"id": 73, "seek": 35952, "start": 381.52, "end": 382.52, "text": " version.", "tokens": [50364, 7148, 813, 264, 337, 6367, 420, 264, 42881, 17108, 300, 321, 1866, 8046, 13, 50764, 50764, 823, 341, 3037, 307, 709, 544, 8496, 562, 297, 307, 2416, 570, 291, 366, 406, 18444, 261, 15, 1413, 51134, 51134, 2031, 15, 1804, 261, 16, 1413, 2031, 16, 1804, 3195, 295, 4497, 2115, 411, 291, 576, 362, 632, 337, 264, 3894, 51464, 51464, 3037, 13, 51514, 51514, 583, 1339, 341, 19155, 257, 688, 322, 264, 18444, 11, 309, 311, 920, 406, 300, 24903, 379, 7148, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.11019114560859147, "compression_ratio": 1.6409090909090909, "no_speech_prob": 6.5403587541368324e-06}, {"id": 74, "seek": 35952, "start": 382.52, "end": 388.2, "text": " But while this saves a lot on the typing, it's still not that computationally efficient", "tokens": [50364, 7148, 813, 264, 337, 6367, 420, 264, 42881, 17108, 300, 321, 1866, 8046, 13, 50764, 50764, 823, 341, 3037, 307, 709, 544, 8496, 562, 297, 307, 2416, 570, 291, 366, 406, 18444, 261, 15, 1413, 51134, 51134, 2031, 15, 1804, 261, 16, 1413, 2031, 16, 1804, 3195, 295, 4497, 2115, 411, 291, 576, 362, 632, 337, 264, 3894, 51464, 51464, 3037, 13, 51514, 51514, 583, 1339, 341, 19155, 257, 688, 322, 264, 18444, 11, 309, 311, 920, 406, 300, 24903, 379, 7148, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.11019114560859147, "compression_ratio": 1.6409090909090909, "no_speech_prob": 6.5403587541368324e-06}, {"id": 75, "seek": 38820, "start": 388.2, "end": 392.08, "text": " because it still doesn't use vectorization.", "tokens": [50364, 570, 309, 920, 1177, 380, 764, 8062, 2144, 13, 50558, 50558, 407, 281, 20928, 11, 8062, 2144, 1669, 428, 3089, 11639, 11, 370, 4696, 3571, 281, 2464, 293, 50830, 50830, 3571, 337, 291, 420, 2357, 281, 1401, 13, 50958, 50958, 400, 309, 611, 1669, 309, 1190, 709, 4663, 13, 51074, 51074, 583, 437, 307, 341, 5585, 2261, 8062, 2144, 300, 1669, 341, 1190, 370, 709, 4663, 30, 51364, 51364, 961, 311, 747, 257, 574, 412, 437, 428, 3820, 307, 767, 884, 2261, 264, 8026, 281, 652, 8062, 1602, 51566, 51566], "temperature": 0.0, "avg_logprob": -0.1280641037484874, "compression_ratio": 1.7201834862385321, "no_speech_prob": 7.88814122643089e-06}, {"id": 76, "seek": 38820, "start": 392.08, "end": 397.52, "text": " So to recap, vectorization makes your code shorter, so hopefully easier to write and", "tokens": [50364, 570, 309, 920, 1177, 380, 764, 8062, 2144, 13, 50558, 50558, 407, 281, 20928, 11, 8062, 2144, 1669, 428, 3089, 11639, 11, 370, 4696, 3571, 281, 2464, 293, 50830, 50830, 3571, 337, 291, 420, 2357, 281, 1401, 13, 50958, 50958, 400, 309, 611, 1669, 309, 1190, 709, 4663, 13, 51074, 51074, 583, 437, 307, 341, 5585, 2261, 8062, 2144, 300, 1669, 341, 1190, 370, 709, 4663, 30, 51364, 51364, 961, 311, 747, 257, 574, 412, 437, 428, 3820, 307, 767, 884, 2261, 264, 8026, 281, 652, 8062, 1602, 51566, 51566], "temperature": 0.0, "avg_logprob": -0.1280641037484874, "compression_ratio": 1.7201834862385321, "no_speech_prob": 7.88814122643089e-06}, {"id": 77, "seek": 38820, "start": 397.52, "end": 400.08, "text": " easier for you or others to read.", "tokens": [50364, 570, 309, 920, 1177, 380, 764, 8062, 2144, 13, 50558, 50558, 407, 281, 20928, 11, 8062, 2144, 1669, 428, 3089, 11639, 11, 370, 4696, 3571, 281, 2464, 293, 50830, 50830, 3571, 337, 291, 420, 2357, 281, 1401, 13, 50958, 50958, 400, 309, 611, 1669, 309, 1190, 709, 4663, 13, 51074, 51074, 583, 437, 307, 341, 5585, 2261, 8062, 2144, 300, 1669, 341, 1190, 370, 709, 4663, 30, 51364, 51364, 961, 311, 747, 257, 574, 412, 437, 428, 3820, 307, 767, 884, 2261, 264, 8026, 281, 652, 8062, 1602, 51566, 51566], "temperature": 0.0, "avg_logprob": -0.1280641037484874, "compression_ratio": 1.7201834862385321, "no_speech_prob": 7.88814122643089e-06}, {"id": 78, "seek": 38820, "start": 400.08, "end": 402.4, "text": " And it also makes it run much faster.", "tokens": [50364, 570, 309, 920, 1177, 380, 764, 8062, 2144, 13, 50558, 50558, 407, 281, 20928, 11, 8062, 2144, 1669, 428, 3089, 11639, 11, 370, 4696, 3571, 281, 2464, 293, 50830, 50830, 3571, 337, 291, 420, 2357, 281, 1401, 13, 50958, 50958, 400, 309, 611, 1669, 309, 1190, 709, 4663, 13, 51074, 51074, 583, 437, 307, 341, 5585, 2261, 8062, 2144, 300, 1669, 341, 1190, 370, 709, 4663, 30, 51364, 51364, 961, 311, 747, 257, 574, 412, 437, 428, 3820, 307, 767, 884, 2261, 264, 8026, 281, 652, 8062, 1602, 51566, 51566], "temperature": 0.0, "avg_logprob": -0.1280641037484874, "compression_ratio": 1.7201834862385321, "no_speech_prob": 7.88814122643089e-06}, {"id": 79, "seek": 38820, "start": 402.4, "end": 408.2, "text": " But what is this magic behind vectorization that makes this run so much faster?", "tokens": [50364, 570, 309, 920, 1177, 380, 764, 8062, 2144, 13, 50558, 50558, 407, 281, 20928, 11, 8062, 2144, 1669, 428, 3089, 11639, 11, 370, 4696, 3571, 281, 2464, 293, 50830, 50830, 3571, 337, 291, 420, 2357, 281, 1401, 13, 50958, 50958, 400, 309, 611, 1669, 309, 1190, 709, 4663, 13, 51074, 51074, 583, 437, 307, 341, 5585, 2261, 8062, 2144, 300, 1669, 341, 1190, 370, 709, 4663, 30, 51364, 51364, 961, 311, 747, 257, 574, 412, 437, 428, 3820, 307, 767, 884, 2261, 264, 8026, 281, 652, 8062, 1602, 51566, 51566], "temperature": 0.0, "avg_logprob": -0.1280641037484874, "compression_ratio": 1.7201834862385321, "no_speech_prob": 7.88814122643089e-06}, {"id": 80, "seek": 38820, "start": 408.2, "end": 412.24, "text": " Let's take a look at what your computer is actually doing behind the scenes to make vectorized", "tokens": [50364, 570, 309, 920, 1177, 380, 764, 8062, 2144, 13, 50558, 50558, 407, 281, 20928, 11, 8062, 2144, 1669, 428, 3089, 11639, 11, 370, 4696, 3571, 281, 2464, 293, 50830, 50830, 3571, 337, 291, 420, 2357, 281, 1401, 13, 50958, 50958, 400, 309, 611, 1669, 309, 1190, 709, 4663, 13, 51074, 51074, 583, 437, 307, 341, 5585, 2261, 8062, 2144, 300, 1669, 341, 1190, 370, 709, 4663, 30, 51364, 51364, 961, 311, 747, 257, 574, 412, 437, 428, 3820, 307, 767, 884, 2261, 264, 8026, 281, 652, 8062, 1602, 51566, 51566], "temperature": 0.0, "avg_logprob": -0.1280641037484874, "compression_ratio": 1.7201834862385321, "no_speech_prob": 7.88814122643089e-06}, {"id": 81, "seek": 41224, "start": 412.24, "end": 419.24, "text": " code run so much faster.", "tokens": [50364, 3089, 1190, 370, 709, 4663, 13, 50714], "temperature": 0.0, "avg_logprob": -0.5753697819179959, "compression_ratio": 0.75, "no_speech_prob": 0.00017902484978549182}], "language": "en", "video_id": "G8yfD_Xu7Ko", "entity": "ML Specialization, Andrew Ng (2022)"}}
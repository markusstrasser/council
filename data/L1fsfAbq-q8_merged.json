{"video_id": "L1fsfAbq-q8", "title": "4.7 Neural Networks Model |Inference : making predictions (forward propagation)- [ML- Andrew Ng]", "description": "Second Course:\nAdvanced Learning Algorithms.\n\n\nIf you liked the content please subscribe and put a little blue thumb.\nTake heart!", "author": "Machine Learning", "keywords": [], "channel_url": "https://www.youtube.com/channel/UClG5HEAJJFOavT_UolqYROQ", "length": 324, "views": 126, "publish_date": "11/04/2022", "timestamp": 1661385600, "entity": "ML Specialization, Andrew Ng (2022)", "transcript": {"text": " Let's take what we've learned and put it together into an algorithm to let your neural network make inferences or make predictions. This will be an algorithm called forward propagation. Let's take a look. I'm going to use as a multi-fingered example, handwritten digit recognition. And for simplicity, we're just going to distinguish between the handwritten digits 0 and 1. So it's just a binary classification problem where we're going to input an image and classify is this the digit 0 or the digit 1. And you get to play with this yourself later this week in the practice lab as well. For the example on this slide, I'm going to use an 8 by 8 image. And so this image of a 1 is this grid or matrix of 8 by 8 or 64 pixel intensity values where 255 denotes a bright white pixel and 0 would denote a black pixel and different numbers are different shades of gray in between the shades of black and white. Given these 64 input features, we're going to use a neural network with two hidden layers where the first hidden layer has 25 neurons or 25 units. Second hidden layer has 15 neurons or 15 units, and then finally the output layer outputs. What's the chance of this being 1 versus 0? So let's step through the sequence of computations that the neural network would need to make to go from the input x, this 8 by 8 or 64 numbers to the predicted probability a 3. The first computation is to go from x to a 1. And that's what the first layer or the first hidden layer does. It carries out a computation of a superscript square bracket 1 equals this formula on the right. Notice that a 1 has 25 numbers because this hidden layer has 25 units, which is why the parameters go from w 1 through w 25 as well as b 1 through b 25. And I've written x here, but I could also have written a 0 here because by convention, deactivation of layer 0, that is a 0 is equal to the input feature value x. So that lets us compute a 1. The next step is to compute a 2. Looking at the second hidden layer, it then carries out this computation where a 2 is a function of a 1 and is computed as the sigmoid activation function applied to w dot product a 1 plus the corresponding value of b. Notice that layer 2 has 15 neurons, 15 units, which is why the parameters here run from w 1 through w 15 and b 1 through b 15. Now we've computed a 2. The final step is then to compute a 3. And we do so using a very similar computation. Only now this third layer, the output layer has just one unit, which is why there's just one output here. So a 3 is just a scalar. And finally, you can optionally take a 3 subscript 1 and threshold it at 0.5 to come up with a binary classification label. Is this the digit 1? Yes or no? So the sequence of computations first takes x and then computes a 1 and then computes a 2 and then computes a 3, which is also the output of the neural network. You can also write that as f of x. So remember when we learned about linear regression and logistic regression, we use f of x to denote the outputs of linear regression or logistic regression. So we can also use f of x to denote the function computed by the neural network as a function of x. Because this computation goes from left to right, you start from x then compute a 1 then a 2 then a 3, this algorithm is also called forward propagation because you're propagating the activations of the neurons. So you're making these computations in the forward direction from left to right. And this is in contrast to a different algorithm called backward propagation or back propagation, which is used for learning and that's something you learn about next week. And by the way, this type of neural network architecture where you have more hidden units initially and then the number of hidden units decreases as you get closer to the output layer, that's also a pretty typical choice when choosing neural network architectures. And you see more examples of this in the practice lab as well. So that's neural network inference using the forward propagation algorithm. And with this, you'd be able to download the parameters of a neural network that someone else had trained and posted on the internet. And you'd be able to carry out inference on your new data using their neural network. Now that you've seen the math and the algorithm, let's take a look at how you can actually implement this in TensorFlow. Specifically, let's take a look at this in the next video.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 6.48, "text": " Let's take what we've learned and put it together into an algorithm to let your neural network", "tokens": [50364, 961, 311, 747, 437, 321, 600, 3264, 293, 829, 309, 1214, 666, 364, 9284, 281, 718, 428, 18161, 3209, 50688, 50688, 652, 13596, 2667, 420, 652, 21264, 13, 50838, 50838, 639, 486, 312, 364, 9284, 1219, 2128, 38377, 13, 50958, 50958, 961, 311, 747, 257, 574, 13, 51078, 51078, 286, 478, 516, 281, 764, 382, 257, 4825, 12, 69, 278, 4073, 1365, 11, 1011, 26859, 14293, 11150, 13, 51340, 51340, 400, 337, 25632, 11, 321, 434, 445, 516, 281, 20206, 1296, 264, 1011, 26859, 27011, 1958, 293, 502, 13, 51686, 51686], "temperature": 0.0, "avg_logprob": -0.2462240239625336, "compression_ratio": 1.5940170940170941, "no_speech_prob": 0.01223630178719759}, {"id": 1, "seek": 0, "start": 6.48, "end": 9.48, "text": " make inferences or make predictions.", "tokens": [50364, 961, 311, 747, 437, 321, 600, 3264, 293, 829, 309, 1214, 666, 364, 9284, 281, 718, 428, 18161, 3209, 50688, 50688, 652, 13596, 2667, 420, 652, 21264, 13, 50838, 50838, 639, 486, 312, 364, 9284, 1219, 2128, 38377, 13, 50958, 50958, 961, 311, 747, 257, 574, 13, 51078, 51078, 286, 478, 516, 281, 764, 382, 257, 4825, 12, 69, 278, 4073, 1365, 11, 1011, 26859, 14293, 11150, 13, 51340, 51340, 400, 337, 25632, 11, 321, 434, 445, 516, 281, 20206, 1296, 264, 1011, 26859, 27011, 1958, 293, 502, 13, 51686, 51686], "temperature": 0.0, "avg_logprob": -0.2462240239625336, "compression_ratio": 1.5940170940170941, "no_speech_prob": 0.01223630178719759}, {"id": 2, "seek": 0, "start": 9.48, "end": 11.88, "text": " This will be an algorithm called forward propagation.", "tokens": [50364, 961, 311, 747, 437, 321, 600, 3264, 293, 829, 309, 1214, 666, 364, 9284, 281, 718, 428, 18161, 3209, 50688, 50688, 652, 13596, 2667, 420, 652, 21264, 13, 50838, 50838, 639, 486, 312, 364, 9284, 1219, 2128, 38377, 13, 50958, 50958, 961, 311, 747, 257, 574, 13, 51078, 51078, 286, 478, 516, 281, 764, 382, 257, 4825, 12, 69, 278, 4073, 1365, 11, 1011, 26859, 14293, 11150, 13, 51340, 51340, 400, 337, 25632, 11, 321, 434, 445, 516, 281, 20206, 1296, 264, 1011, 26859, 27011, 1958, 293, 502, 13, 51686, 51686], "temperature": 0.0, "avg_logprob": -0.2462240239625336, "compression_ratio": 1.5940170940170941, "no_speech_prob": 0.01223630178719759}, {"id": 3, "seek": 0, "start": 11.88, "end": 14.280000000000001, "text": " Let's take a look.", "tokens": [50364, 961, 311, 747, 437, 321, 600, 3264, 293, 829, 309, 1214, 666, 364, 9284, 281, 718, 428, 18161, 3209, 50688, 50688, 652, 13596, 2667, 420, 652, 21264, 13, 50838, 50838, 639, 486, 312, 364, 9284, 1219, 2128, 38377, 13, 50958, 50958, 961, 311, 747, 257, 574, 13, 51078, 51078, 286, 478, 516, 281, 764, 382, 257, 4825, 12, 69, 278, 4073, 1365, 11, 1011, 26859, 14293, 11150, 13, 51340, 51340, 400, 337, 25632, 11, 321, 434, 445, 516, 281, 20206, 1296, 264, 1011, 26859, 27011, 1958, 293, 502, 13, 51686, 51686], "temperature": 0.0, "avg_logprob": -0.2462240239625336, "compression_ratio": 1.5940170940170941, "no_speech_prob": 0.01223630178719759}, {"id": 4, "seek": 0, "start": 14.280000000000001, "end": 19.52, "text": " I'm going to use as a multi-fingered example, handwritten digit recognition.", "tokens": [50364, 961, 311, 747, 437, 321, 600, 3264, 293, 829, 309, 1214, 666, 364, 9284, 281, 718, 428, 18161, 3209, 50688, 50688, 652, 13596, 2667, 420, 652, 21264, 13, 50838, 50838, 639, 486, 312, 364, 9284, 1219, 2128, 38377, 13, 50958, 50958, 961, 311, 747, 257, 574, 13, 51078, 51078, 286, 478, 516, 281, 764, 382, 257, 4825, 12, 69, 278, 4073, 1365, 11, 1011, 26859, 14293, 11150, 13, 51340, 51340, 400, 337, 25632, 11, 321, 434, 445, 516, 281, 20206, 1296, 264, 1011, 26859, 27011, 1958, 293, 502, 13, 51686, 51686], "temperature": 0.0, "avg_logprob": -0.2462240239625336, "compression_ratio": 1.5940170940170941, "no_speech_prob": 0.01223630178719759}, {"id": 5, "seek": 0, "start": 19.52, "end": 26.44, "text": " And for simplicity, we're just going to distinguish between the handwritten digits 0 and 1.", "tokens": [50364, 961, 311, 747, 437, 321, 600, 3264, 293, 829, 309, 1214, 666, 364, 9284, 281, 718, 428, 18161, 3209, 50688, 50688, 652, 13596, 2667, 420, 652, 21264, 13, 50838, 50838, 639, 486, 312, 364, 9284, 1219, 2128, 38377, 13, 50958, 50958, 961, 311, 747, 257, 574, 13, 51078, 51078, 286, 478, 516, 281, 764, 382, 257, 4825, 12, 69, 278, 4073, 1365, 11, 1011, 26859, 14293, 11150, 13, 51340, 51340, 400, 337, 25632, 11, 321, 434, 445, 516, 281, 20206, 1296, 264, 1011, 26859, 27011, 1958, 293, 502, 13, 51686, 51686], "temperature": 0.0, "avg_logprob": -0.2462240239625336, "compression_ratio": 1.5940170940170941, "no_speech_prob": 0.01223630178719759}, {"id": 6, "seek": 2644, "start": 26.44, "end": 31.0, "text": " So it's just a binary classification problem where we're going to input an image and classify", "tokens": [50364, 407, 309, 311, 445, 257, 17434, 21538, 1154, 689, 321, 434, 516, 281, 4846, 364, 3256, 293, 33872, 50592, 50592, 307, 341, 264, 14293, 1958, 420, 264, 14293, 502, 13, 50766, 50766, 400, 291, 483, 281, 862, 365, 341, 1803, 1780, 341, 1243, 294, 264, 3124, 2715, 382, 731, 13, 50998, 50998, 1171, 264, 1365, 322, 341, 4137, 11, 286, 478, 516, 281, 764, 364, 1649, 538, 1649, 3256, 13, 51244, 51244, 400, 370, 341, 3256, 295, 257, 502, 307, 341, 10748, 420, 8141, 295, 1649, 538, 1649, 420, 12145, 19261, 13749, 4190, 689, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.12445754421000578, "compression_ratio": 1.6200873362445414, "no_speech_prob": 1.0615468454489019e-05}, {"id": 7, "seek": 2644, "start": 31.0, "end": 34.480000000000004, "text": " is this the digit 0 or the digit 1.", "tokens": [50364, 407, 309, 311, 445, 257, 17434, 21538, 1154, 689, 321, 434, 516, 281, 4846, 364, 3256, 293, 33872, 50592, 50592, 307, 341, 264, 14293, 1958, 420, 264, 14293, 502, 13, 50766, 50766, 400, 291, 483, 281, 862, 365, 341, 1803, 1780, 341, 1243, 294, 264, 3124, 2715, 382, 731, 13, 50998, 50998, 1171, 264, 1365, 322, 341, 4137, 11, 286, 478, 516, 281, 764, 364, 1649, 538, 1649, 3256, 13, 51244, 51244, 400, 370, 341, 3256, 295, 257, 502, 307, 341, 10748, 420, 8141, 295, 1649, 538, 1649, 420, 12145, 19261, 13749, 4190, 689, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.12445754421000578, "compression_ratio": 1.6200873362445414, "no_speech_prob": 1.0615468454489019e-05}, {"id": 8, "seek": 2644, "start": 34.480000000000004, "end": 39.120000000000005, "text": " And you get to play with this yourself later this week in the practice lab as well.", "tokens": [50364, 407, 309, 311, 445, 257, 17434, 21538, 1154, 689, 321, 434, 516, 281, 4846, 364, 3256, 293, 33872, 50592, 50592, 307, 341, 264, 14293, 1958, 420, 264, 14293, 502, 13, 50766, 50766, 400, 291, 483, 281, 862, 365, 341, 1803, 1780, 341, 1243, 294, 264, 3124, 2715, 382, 731, 13, 50998, 50998, 1171, 264, 1365, 322, 341, 4137, 11, 286, 478, 516, 281, 764, 364, 1649, 538, 1649, 3256, 13, 51244, 51244, 400, 370, 341, 3256, 295, 257, 502, 307, 341, 10748, 420, 8141, 295, 1649, 538, 1649, 420, 12145, 19261, 13749, 4190, 689, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.12445754421000578, "compression_ratio": 1.6200873362445414, "no_speech_prob": 1.0615468454489019e-05}, {"id": 9, "seek": 2644, "start": 39.120000000000005, "end": 44.040000000000006, "text": " For the example on this slide, I'm going to use an 8 by 8 image.", "tokens": [50364, 407, 309, 311, 445, 257, 17434, 21538, 1154, 689, 321, 434, 516, 281, 4846, 364, 3256, 293, 33872, 50592, 50592, 307, 341, 264, 14293, 1958, 420, 264, 14293, 502, 13, 50766, 50766, 400, 291, 483, 281, 862, 365, 341, 1803, 1780, 341, 1243, 294, 264, 3124, 2715, 382, 731, 13, 50998, 50998, 1171, 264, 1365, 322, 341, 4137, 11, 286, 478, 516, 281, 764, 364, 1649, 538, 1649, 3256, 13, 51244, 51244, 400, 370, 341, 3256, 295, 257, 502, 307, 341, 10748, 420, 8141, 295, 1649, 538, 1649, 420, 12145, 19261, 13749, 4190, 689, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.12445754421000578, "compression_ratio": 1.6200873362445414, "no_speech_prob": 1.0615468454489019e-05}, {"id": 10, "seek": 2644, "start": 44.040000000000006, "end": 52.52, "text": " And so this image of a 1 is this grid or matrix of 8 by 8 or 64 pixel intensity values where", "tokens": [50364, 407, 309, 311, 445, 257, 17434, 21538, 1154, 689, 321, 434, 516, 281, 4846, 364, 3256, 293, 33872, 50592, 50592, 307, 341, 264, 14293, 1958, 420, 264, 14293, 502, 13, 50766, 50766, 400, 291, 483, 281, 862, 365, 341, 1803, 1780, 341, 1243, 294, 264, 3124, 2715, 382, 731, 13, 50998, 50998, 1171, 264, 1365, 322, 341, 4137, 11, 286, 478, 516, 281, 764, 364, 1649, 538, 1649, 3256, 13, 51244, 51244, 400, 370, 341, 3256, 295, 257, 502, 307, 341, 10748, 420, 8141, 295, 1649, 538, 1649, 420, 12145, 19261, 13749, 4190, 689, 51668, 51668], "temperature": 0.0, "avg_logprob": -0.12445754421000578, "compression_ratio": 1.6200873362445414, "no_speech_prob": 1.0615468454489019e-05}, {"id": 11, "seek": 5252, "start": 52.52, "end": 59.760000000000005, "text": " 255 denotes a bright white pixel and 0 would denote a black pixel and different numbers", "tokens": [50364, 3552, 20, 1441, 17251, 257, 4730, 2418, 19261, 293, 1958, 576, 45708, 257, 2211, 19261, 293, 819, 3547, 50726, 50726, 366, 819, 20639, 295, 10855, 294, 1296, 264, 20639, 295, 2211, 293, 2418, 13, 51020, 51020, 18600, 613, 12145, 4846, 4122, 11, 321, 434, 516, 281, 764, 257, 18161, 3209, 365, 732, 7633, 7914, 51388, 51388, 689, 264, 700, 7633, 4583, 575, 3552, 22027, 420, 3552, 6815, 13, 51621, 51621], "temperature": 0.0, "avg_logprob": -0.16538967026604545, "compression_ratio": 1.605263157894737, "no_speech_prob": 1.3845376088283956e-05}, {"id": 12, "seek": 5252, "start": 59.760000000000005, "end": 65.64, "text": " are different shades of gray in between the shades of black and white.", "tokens": [50364, 3552, 20, 1441, 17251, 257, 4730, 2418, 19261, 293, 1958, 576, 45708, 257, 2211, 19261, 293, 819, 3547, 50726, 50726, 366, 819, 20639, 295, 10855, 294, 1296, 264, 20639, 295, 2211, 293, 2418, 13, 51020, 51020, 18600, 613, 12145, 4846, 4122, 11, 321, 434, 516, 281, 764, 257, 18161, 3209, 365, 732, 7633, 7914, 51388, 51388, 689, 264, 700, 7633, 4583, 575, 3552, 22027, 420, 3552, 6815, 13, 51621, 51621], "temperature": 0.0, "avg_logprob": -0.16538967026604545, "compression_ratio": 1.605263157894737, "no_speech_prob": 1.3845376088283956e-05}, {"id": 13, "seek": 5252, "start": 65.64, "end": 73.0, "text": " Given these 64 input features, we're going to use a neural network with two hidden layers", "tokens": [50364, 3552, 20, 1441, 17251, 257, 4730, 2418, 19261, 293, 1958, 576, 45708, 257, 2211, 19261, 293, 819, 3547, 50726, 50726, 366, 819, 20639, 295, 10855, 294, 1296, 264, 20639, 295, 2211, 293, 2418, 13, 51020, 51020, 18600, 613, 12145, 4846, 4122, 11, 321, 434, 516, 281, 764, 257, 18161, 3209, 365, 732, 7633, 7914, 51388, 51388, 689, 264, 700, 7633, 4583, 575, 3552, 22027, 420, 3552, 6815, 13, 51621, 51621], "temperature": 0.0, "avg_logprob": -0.16538967026604545, "compression_ratio": 1.605263157894737, "no_speech_prob": 1.3845376088283956e-05}, {"id": 14, "seek": 5252, "start": 73.0, "end": 77.66, "text": " where the first hidden layer has 25 neurons or 25 units.", "tokens": [50364, 3552, 20, 1441, 17251, 257, 4730, 2418, 19261, 293, 1958, 576, 45708, 257, 2211, 19261, 293, 819, 3547, 50726, 50726, 366, 819, 20639, 295, 10855, 294, 1296, 264, 20639, 295, 2211, 293, 2418, 13, 51020, 51020, 18600, 613, 12145, 4846, 4122, 11, 321, 434, 516, 281, 764, 257, 18161, 3209, 365, 732, 7633, 7914, 51388, 51388, 689, 264, 700, 7633, 4583, 575, 3552, 22027, 420, 3552, 6815, 13, 51621, 51621], "temperature": 0.0, "avg_logprob": -0.16538967026604545, "compression_ratio": 1.605263157894737, "no_speech_prob": 1.3845376088283956e-05}, {"id": 15, "seek": 7766, "start": 77.66, "end": 84.24, "text": " Second hidden layer has 15 neurons or 15 units, and then finally the output layer outputs.", "tokens": [50364, 5736, 7633, 4583, 575, 2119, 22027, 420, 2119, 6815, 11, 293, 550, 2721, 264, 5598, 4583, 23930, 13, 50693, 50693, 708, 311, 264, 2931, 295, 341, 885, 502, 5717, 1958, 30, 50859, 50859, 407, 718, 311, 1823, 807, 264, 8310, 295, 2807, 763, 300, 264, 18161, 3209, 576, 643, 281, 652, 51088, 51088, 281, 352, 490, 264, 4846, 2031, 11, 341, 1649, 538, 1649, 420, 12145, 3547, 281, 264, 19147, 8482, 257, 805, 13, 51541, 51541, 440, 700, 24903, 307, 281, 352, 490, 2031, 281, 257, 502, 13, 51767, 51767], "temperature": 0.0, "avg_logprob": -0.16718999199245288, "compression_ratio": 1.577092511013216, "no_speech_prob": 3.237697683289298e-06}, {"id": 16, "seek": 7766, "start": 84.24, "end": 87.56, "text": " What's the chance of this being 1 versus 0?", "tokens": [50364, 5736, 7633, 4583, 575, 2119, 22027, 420, 2119, 6815, 11, 293, 550, 2721, 264, 5598, 4583, 23930, 13, 50693, 50693, 708, 311, 264, 2931, 295, 341, 885, 502, 5717, 1958, 30, 50859, 50859, 407, 718, 311, 1823, 807, 264, 8310, 295, 2807, 763, 300, 264, 18161, 3209, 576, 643, 281, 652, 51088, 51088, 281, 352, 490, 264, 4846, 2031, 11, 341, 1649, 538, 1649, 420, 12145, 3547, 281, 264, 19147, 8482, 257, 805, 13, 51541, 51541, 440, 700, 24903, 307, 281, 352, 490, 2031, 281, 257, 502, 13, 51767, 51767], "temperature": 0.0, "avg_logprob": -0.16718999199245288, "compression_ratio": 1.577092511013216, "no_speech_prob": 3.237697683289298e-06}, {"id": 17, "seek": 7766, "start": 87.56, "end": 92.14, "text": " So let's step through the sequence of computations that the neural network would need to make", "tokens": [50364, 5736, 7633, 4583, 575, 2119, 22027, 420, 2119, 6815, 11, 293, 550, 2721, 264, 5598, 4583, 23930, 13, 50693, 50693, 708, 311, 264, 2931, 295, 341, 885, 502, 5717, 1958, 30, 50859, 50859, 407, 718, 311, 1823, 807, 264, 8310, 295, 2807, 763, 300, 264, 18161, 3209, 576, 643, 281, 652, 51088, 51088, 281, 352, 490, 264, 4846, 2031, 11, 341, 1649, 538, 1649, 420, 12145, 3547, 281, 264, 19147, 8482, 257, 805, 13, 51541, 51541, 440, 700, 24903, 307, 281, 352, 490, 2031, 281, 257, 502, 13, 51767, 51767], "temperature": 0.0, "avg_logprob": -0.16718999199245288, "compression_ratio": 1.577092511013216, "no_speech_prob": 3.237697683289298e-06}, {"id": 18, "seek": 7766, "start": 92.14, "end": 101.19999999999999, "text": " to go from the input x, this 8 by 8 or 64 numbers to the predicted probability a 3.", "tokens": [50364, 5736, 7633, 4583, 575, 2119, 22027, 420, 2119, 6815, 11, 293, 550, 2721, 264, 5598, 4583, 23930, 13, 50693, 50693, 708, 311, 264, 2931, 295, 341, 885, 502, 5717, 1958, 30, 50859, 50859, 407, 718, 311, 1823, 807, 264, 8310, 295, 2807, 763, 300, 264, 18161, 3209, 576, 643, 281, 652, 51088, 51088, 281, 352, 490, 264, 4846, 2031, 11, 341, 1649, 538, 1649, 420, 12145, 3547, 281, 264, 19147, 8482, 257, 805, 13, 51541, 51541, 440, 700, 24903, 307, 281, 352, 490, 2031, 281, 257, 502, 13, 51767, 51767], "temperature": 0.0, "avg_logprob": -0.16718999199245288, "compression_ratio": 1.577092511013216, "no_speech_prob": 3.237697683289298e-06}, {"id": 19, "seek": 7766, "start": 101.19999999999999, "end": 105.72, "text": " The first computation is to go from x to a 1.", "tokens": [50364, 5736, 7633, 4583, 575, 2119, 22027, 420, 2119, 6815, 11, 293, 550, 2721, 264, 5598, 4583, 23930, 13, 50693, 50693, 708, 311, 264, 2931, 295, 341, 885, 502, 5717, 1958, 30, 50859, 50859, 407, 718, 311, 1823, 807, 264, 8310, 295, 2807, 763, 300, 264, 18161, 3209, 576, 643, 281, 652, 51088, 51088, 281, 352, 490, 264, 4846, 2031, 11, 341, 1649, 538, 1649, 420, 12145, 3547, 281, 264, 19147, 8482, 257, 805, 13, 51541, 51541, 440, 700, 24903, 307, 281, 352, 490, 2031, 281, 257, 502, 13, 51767, 51767], "temperature": 0.0, "avg_logprob": -0.16718999199245288, "compression_ratio": 1.577092511013216, "no_speech_prob": 3.237697683289298e-06}, {"id": 20, "seek": 10572, "start": 105.72, "end": 109.24, "text": " And that's what the first layer or the first hidden layer does.", "tokens": [50364, 400, 300, 311, 437, 264, 700, 4583, 420, 264, 700, 7633, 4583, 775, 13, 50540, 50540, 467, 16402, 484, 257, 24903, 295, 257, 37906, 5944, 3732, 16904, 502, 6915, 341, 8513, 322, 264, 50856, 50856, 558, 13, 50906, 50906, 13428, 300, 257, 502, 575, 3552, 3547, 570, 341, 7633, 4583, 575, 3552, 6815, 11, 597, 307, 983, 264, 51328, 51328, 9834, 352, 490, 261, 502, 807, 261, 3552, 382, 731, 382, 272, 502, 807, 272, 3552, 13, 51660, 51660], "temperature": 0.0, "avg_logprob": -0.12184178387677227, "compression_ratio": 1.565, "no_speech_prob": 5.422159119916614e-06}, {"id": 21, "seek": 10572, "start": 109.24, "end": 115.56, "text": " It carries out a computation of a superscript square bracket 1 equals this formula on the", "tokens": [50364, 400, 300, 311, 437, 264, 700, 4583, 420, 264, 700, 7633, 4583, 775, 13, 50540, 50540, 467, 16402, 484, 257, 24903, 295, 257, 37906, 5944, 3732, 16904, 502, 6915, 341, 8513, 322, 264, 50856, 50856, 558, 13, 50906, 50906, 13428, 300, 257, 502, 575, 3552, 3547, 570, 341, 7633, 4583, 575, 3552, 6815, 11, 597, 307, 983, 264, 51328, 51328, 9834, 352, 490, 261, 502, 807, 261, 3552, 382, 731, 382, 272, 502, 807, 272, 3552, 13, 51660, 51660], "temperature": 0.0, "avg_logprob": -0.12184178387677227, "compression_ratio": 1.565, "no_speech_prob": 5.422159119916614e-06}, {"id": 22, "seek": 10572, "start": 115.56, "end": 116.56, "text": " right.", "tokens": [50364, 400, 300, 311, 437, 264, 700, 4583, 420, 264, 700, 7633, 4583, 775, 13, 50540, 50540, 467, 16402, 484, 257, 24903, 295, 257, 37906, 5944, 3732, 16904, 502, 6915, 341, 8513, 322, 264, 50856, 50856, 558, 13, 50906, 50906, 13428, 300, 257, 502, 575, 3552, 3547, 570, 341, 7633, 4583, 575, 3552, 6815, 11, 597, 307, 983, 264, 51328, 51328, 9834, 352, 490, 261, 502, 807, 261, 3552, 382, 731, 382, 272, 502, 807, 272, 3552, 13, 51660, 51660], "temperature": 0.0, "avg_logprob": -0.12184178387677227, "compression_ratio": 1.565, "no_speech_prob": 5.422159119916614e-06}, {"id": 23, "seek": 10572, "start": 116.56, "end": 125.0, "text": " Notice that a 1 has 25 numbers because this hidden layer has 25 units, which is why the", "tokens": [50364, 400, 300, 311, 437, 264, 700, 4583, 420, 264, 700, 7633, 4583, 775, 13, 50540, 50540, 467, 16402, 484, 257, 24903, 295, 257, 37906, 5944, 3732, 16904, 502, 6915, 341, 8513, 322, 264, 50856, 50856, 558, 13, 50906, 50906, 13428, 300, 257, 502, 575, 3552, 3547, 570, 341, 7633, 4583, 575, 3552, 6815, 11, 597, 307, 983, 264, 51328, 51328, 9834, 352, 490, 261, 502, 807, 261, 3552, 382, 731, 382, 272, 502, 807, 272, 3552, 13, 51660, 51660], "temperature": 0.0, "avg_logprob": -0.12184178387677227, "compression_ratio": 1.565, "no_speech_prob": 5.422159119916614e-06}, {"id": 24, "seek": 10572, "start": 125.0, "end": 131.64, "text": " parameters go from w 1 through w 25 as well as b 1 through b 25.", "tokens": [50364, 400, 300, 311, 437, 264, 700, 4583, 420, 264, 700, 7633, 4583, 775, 13, 50540, 50540, 467, 16402, 484, 257, 24903, 295, 257, 37906, 5944, 3732, 16904, 502, 6915, 341, 8513, 322, 264, 50856, 50856, 558, 13, 50906, 50906, 13428, 300, 257, 502, 575, 3552, 3547, 570, 341, 7633, 4583, 575, 3552, 6815, 11, 597, 307, 983, 264, 51328, 51328, 9834, 352, 490, 261, 502, 807, 261, 3552, 382, 731, 382, 272, 502, 807, 272, 3552, 13, 51660, 51660], "temperature": 0.0, "avg_logprob": -0.12184178387677227, "compression_ratio": 1.565, "no_speech_prob": 5.422159119916614e-06}, {"id": 25, "seek": 13164, "start": 131.64, "end": 137.0, "text": " And I've written x here, but I could also have written a 0 here because by convention,", "tokens": [50364, 400, 286, 600, 3720, 2031, 510, 11, 457, 286, 727, 611, 362, 3720, 257, 1958, 510, 570, 538, 10286, 11, 50632, 50632, 45428, 399, 295, 4583, 1958, 11, 300, 307, 257, 1958, 307, 2681, 281, 264, 4846, 4111, 2158, 2031, 13, 50968, 50968, 407, 300, 6653, 505, 14722, 257, 502, 13, 51106, 51106, 440, 958, 1823, 307, 281, 14722, 257, 568, 13, 51292, 51292, 11053, 412, 264, 1150, 7633, 4583, 11, 309, 550, 16402, 484, 341, 24903, 689, 257, 568, 307, 51606, 51606], "temperature": 0.0, "avg_logprob": -0.1297271167530733, "compression_ratio": 1.5346534653465347, "no_speech_prob": 3.844912953354651e-06}, {"id": 26, "seek": 13164, "start": 137.0, "end": 143.72, "text": " deactivation of layer 0, that is a 0 is equal to the input feature value x.", "tokens": [50364, 400, 286, 600, 3720, 2031, 510, 11, 457, 286, 727, 611, 362, 3720, 257, 1958, 510, 570, 538, 10286, 11, 50632, 50632, 45428, 399, 295, 4583, 1958, 11, 300, 307, 257, 1958, 307, 2681, 281, 264, 4846, 4111, 2158, 2031, 13, 50968, 50968, 407, 300, 6653, 505, 14722, 257, 502, 13, 51106, 51106, 440, 958, 1823, 307, 281, 14722, 257, 568, 13, 51292, 51292, 11053, 412, 264, 1150, 7633, 4583, 11, 309, 550, 16402, 484, 341, 24903, 689, 257, 568, 307, 51606, 51606], "temperature": 0.0, "avg_logprob": -0.1297271167530733, "compression_ratio": 1.5346534653465347, "no_speech_prob": 3.844912953354651e-06}, {"id": 27, "seek": 13164, "start": 143.72, "end": 146.48, "text": " So that lets us compute a 1.", "tokens": [50364, 400, 286, 600, 3720, 2031, 510, 11, 457, 286, 727, 611, 362, 3720, 257, 1958, 510, 570, 538, 10286, 11, 50632, 50632, 45428, 399, 295, 4583, 1958, 11, 300, 307, 257, 1958, 307, 2681, 281, 264, 4846, 4111, 2158, 2031, 13, 50968, 50968, 407, 300, 6653, 505, 14722, 257, 502, 13, 51106, 51106, 440, 958, 1823, 307, 281, 14722, 257, 568, 13, 51292, 51292, 11053, 412, 264, 1150, 7633, 4583, 11, 309, 550, 16402, 484, 341, 24903, 689, 257, 568, 307, 51606, 51606], "temperature": 0.0, "avg_logprob": -0.1297271167530733, "compression_ratio": 1.5346534653465347, "no_speech_prob": 3.844912953354651e-06}, {"id": 28, "seek": 13164, "start": 146.48, "end": 150.2, "text": " The next step is to compute a 2.", "tokens": [50364, 400, 286, 600, 3720, 2031, 510, 11, 457, 286, 727, 611, 362, 3720, 257, 1958, 510, 570, 538, 10286, 11, 50632, 50632, 45428, 399, 295, 4583, 1958, 11, 300, 307, 257, 1958, 307, 2681, 281, 264, 4846, 4111, 2158, 2031, 13, 50968, 50968, 407, 300, 6653, 505, 14722, 257, 502, 13, 51106, 51106, 440, 958, 1823, 307, 281, 14722, 257, 568, 13, 51292, 51292, 11053, 412, 264, 1150, 7633, 4583, 11, 309, 550, 16402, 484, 341, 24903, 689, 257, 568, 307, 51606, 51606], "temperature": 0.0, "avg_logprob": -0.1297271167530733, "compression_ratio": 1.5346534653465347, "no_speech_prob": 3.844912953354651e-06}, {"id": 29, "seek": 13164, "start": 150.2, "end": 156.48, "text": " Looking at the second hidden layer, it then carries out this computation where a 2 is", "tokens": [50364, 400, 286, 600, 3720, 2031, 510, 11, 457, 286, 727, 611, 362, 3720, 257, 1958, 510, 570, 538, 10286, 11, 50632, 50632, 45428, 399, 295, 4583, 1958, 11, 300, 307, 257, 1958, 307, 2681, 281, 264, 4846, 4111, 2158, 2031, 13, 50968, 50968, 407, 300, 6653, 505, 14722, 257, 502, 13, 51106, 51106, 440, 958, 1823, 307, 281, 14722, 257, 568, 13, 51292, 51292, 11053, 412, 264, 1150, 7633, 4583, 11, 309, 550, 16402, 484, 341, 24903, 689, 257, 568, 307, 51606, 51606], "temperature": 0.0, "avg_logprob": -0.1297271167530733, "compression_ratio": 1.5346534653465347, "no_speech_prob": 3.844912953354651e-06}, {"id": 30, "seek": 15648, "start": 156.48, "end": 165.28, "text": " a function of a 1 and is computed as the sigmoid activation function applied to w dot product", "tokens": [50364, 257, 2445, 295, 257, 502, 293, 307, 40610, 382, 264, 4556, 3280, 327, 24433, 2445, 6456, 281, 261, 5893, 1674, 50804, 50804, 257, 502, 1804, 264, 11760, 2158, 295, 272, 13, 50996, 50996, 13428, 300, 4583, 568, 575, 2119, 22027, 11, 2119, 6815, 11, 597, 307, 983, 264, 9834, 510, 1190, 490, 51308, 51308, 261, 502, 807, 261, 2119, 293, 272, 502, 807, 272, 2119, 13, 51604, 51604, 823, 321, 600, 40610, 257, 568, 13, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.13565094863312155, "compression_ratio": 1.554945054945055, "no_speech_prob": 2.0580196178343613e-06}, {"id": 31, "seek": 15648, "start": 165.28, "end": 169.12, "text": " a 1 plus the corresponding value of b.", "tokens": [50364, 257, 2445, 295, 257, 502, 293, 307, 40610, 382, 264, 4556, 3280, 327, 24433, 2445, 6456, 281, 261, 5893, 1674, 50804, 50804, 257, 502, 1804, 264, 11760, 2158, 295, 272, 13, 50996, 50996, 13428, 300, 4583, 568, 575, 2119, 22027, 11, 2119, 6815, 11, 597, 307, 983, 264, 9834, 510, 1190, 490, 51308, 51308, 261, 502, 807, 261, 2119, 293, 272, 502, 807, 272, 2119, 13, 51604, 51604, 823, 321, 600, 40610, 257, 568, 13, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.13565094863312155, "compression_ratio": 1.554945054945055, "no_speech_prob": 2.0580196178343613e-06}, {"id": 32, "seek": 15648, "start": 169.12, "end": 175.35999999999999, "text": " Notice that layer 2 has 15 neurons, 15 units, which is why the parameters here run from", "tokens": [50364, 257, 2445, 295, 257, 502, 293, 307, 40610, 382, 264, 4556, 3280, 327, 24433, 2445, 6456, 281, 261, 5893, 1674, 50804, 50804, 257, 502, 1804, 264, 11760, 2158, 295, 272, 13, 50996, 50996, 13428, 300, 4583, 568, 575, 2119, 22027, 11, 2119, 6815, 11, 597, 307, 983, 264, 9834, 510, 1190, 490, 51308, 51308, 261, 502, 807, 261, 2119, 293, 272, 502, 807, 272, 2119, 13, 51604, 51604, 823, 321, 600, 40610, 257, 568, 13, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.13565094863312155, "compression_ratio": 1.554945054945055, "no_speech_prob": 2.0580196178343613e-06}, {"id": 33, "seek": 15648, "start": 175.35999999999999, "end": 181.28, "text": " w 1 through w 15 and b 1 through b 15.", "tokens": [50364, 257, 2445, 295, 257, 502, 293, 307, 40610, 382, 264, 4556, 3280, 327, 24433, 2445, 6456, 281, 261, 5893, 1674, 50804, 50804, 257, 502, 1804, 264, 11760, 2158, 295, 272, 13, 50996, 50996, 13428, 300, 4583, 568, 575, 2119, 22027, 11, 2119, 6815, 11, 597, 307, 983, 264, 9834, 510, 1190, 490, 51308, 51308, 261, 502, 807, 261, 2119, 293, 272, 502, 807, 272, 2119, 13, 51604, 51604, 823, 321, 600, 40610, 257, 568, 13, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.13565094863312155, "compression_ratio": 1.554945054945055, "no_speech_prob": 2.0580196178343613e-06}, {"id": 34, "seek": 15648, "start": 181.28, "end": 183.6, "text": " Now we've computed a 2.", "tokens": [50364, 257, 2445, 295, 257, 502, 293, 307, 40610, 382, 264, 4556, 3280, 327, 24433, 2445, 6456, 281, 261, 5893, 1674, 50804, 50804, 257, 502, 1804, 264, 11760, 2158, 295, 272, 13, 50996, 50996, 13428, 300, 4583, 568, 575, 2119, 22027, 11, 2119, 6815, 11, 597, 307, 983, 264, 9834, 510, 1190, 490, 51308, 51308, 261, 502, 807, 261, 2119, 293, 272, 502, 807, 272, 2119, 13, 51604, 51604, 823, 321, 600, 40610, 257, 568, 13, 51720, 51720], "temperature": 0.0, "avg_logprob": -0.13565094863312155, "compression_ratio": 1.554945054945055, "no_speech_prob": 2.0580196178343613e-06}, {"id": 35, "seek": 18360, "start": 183.6, "end": 188.04, "text": " The final step is then to compute a 3.", "tokens": [50364, 440, 2572, 1823, 307, 550, 281, 14722, 257, 805, 13, 50586, 50586, 400, 321, 360, 370, 1228, 257, 588, 2531, 24903, 13, 50784, 50784, 5686, 586, 341, 2636, 4583, 11, 264, 5598, 4583, 575, 445, 472, 4985, 11, 597, 307, 983, 456, 311, 445, 51066, 51066, 472, 5598, 510, 13, 51166, 51166, 407, 257, 805, 307, 445, 257, 39684, 13, 51324, 51324, 400, 2721, 11, 291, 393, 3614, 379, 747, 257, 805, 2325, 662, 502, 293, 14678, 309, 412, 1958, 13, 20, 281, 808, 493, 365, 51676, 51676, 257, 17434, 21538, 7645, 13, 51798, 51798, 1119, 341, 264, 14293, 502, 30, 51860, 51860], "temperature": 0.0, "avg_logprob": -0.1642323993501209, "compression_ratio": 1.5695652173913044, "no_speech_prob": 1.963789372894098e-06}, {"id": 36, "seek": 18360, "start": 188.04, "end": 192.0, "text": " And we do so using a very similar computation.", "tokens": [50364, 440, 2572, 1823, 307, 550, 281, 14722, 257, 805, 13, 50586, 50586, 400, 321, 360, 370, 1228, 257, 588, 2531, 24903, 13, 50784, 50784, 5686, 586, 341, 2636, 4583, 11, 264, 5598, 4583, 575, 445, 472, 4985, 11, 597, 307, 983, 456, 311, 445, 51066, 51066, 472, 5598, 510, 13, 51166, 51166, 407, 257, 805, 307, 445, 257, 39684, 13, 51324, 51324, 400, 2721, 11, 291, 393, 3614, 379, 747, 257, 805, 2325, 662, 502, 293, 14678, 309, 412, 1958, 13, 20, 281, 808, 493, 365, 51676, 51676, 257, 17434, 21538, 7645, 13, 51798, 51798, 1119, 341, 264, 14293, 502, 30, 51860, 51860], "temperature": 0.0, "avg_logprob": -0.1642323993501209, "compression_ratio": 1.5695652173913044, "no_speech_prob": 1.963789372894098e-06}, {"id": 37, "seek": 18360, "start": 192.0, "end": 197.64, "text": " Only now this third layer, the output layer has just one unit, which is why there's just", "tokens": [50364, 440, 2572, 1823, 307, 550, 281, 14722, 257, 805, 13, 50586, 50586, 400, 321, 360, 370, 1228, 257, 588, 2531, 24903, 13, 50784, 50784, 5686, 586, 341, 2636, 4583, 11, 264, 5598, 4583, 575, 445, 472, 4985, 11, 597, 307, 983, 456, 311, 445, 51066, 51066, 472, 5598, 510, 13, 51166, 51166, 407, 257, 805, 307, 445, 257, 39684, 13, 51324, 51324, 400, 2721, 11, 291, 393, 3614, 379, 747, 257, 805, 2325, 662, 502, 293, 14678, 309, 412, 1958, 13, 20, 281, 808, 493, 365, 51676, 51676, 257, 17434, 21538, 7645, 13, 51798, 51798, 1119, 341, 264, 14293, 502, 30, 51860, 51860], "temperature": 0.0, "avg_logprob": -0.1642323993501209, "compression_ratio": 1.5695652173913044, "no_speech_prob": 1.963789372894098e-06}, {"id": 38, "seek": 18360, "start": 197.64, "end": 199.64, "text": " one output here.", "tokens": [50364, 440, 2572, 1823, 307, 550, 281, 14722, 257, 805, 13, 50586, 50586, 400, 321, 360, 370, 1228, 257, 588, 2531, 24903, 13, 50784, 50784, 5686, 586, 341, 2636, 4583, 11, 264, 5598, 4583, 575, 445, 472, 4985, 11, 597, 307, 983, 456, 311, 445, 51066, 51066, 472, 5598, 510, 13, 51166, 51166, 407, 257, 805, 307, 445, 257, 39684, 13, 51324, 51324, 400, 2721, 11, 291, 393, 3614, 379, 747, 257, 805, 2325, 662, 502, 293, 14678, 309, 412, 1958, 13, 20, 281, 808, 493, 365, 51676, 51676, 257, 17434, 21538, 7645, 13, 51798, 51798, 1119, 341, 264, 14293, 502, 30, 51860, 51860], "temperature": 0.0, "avg_logprob": -0.1642323993501209, "compression_ratio": 1.5695652173913044, "no_speech_prob": 1.963789372894098e-06}, {"id": 39, "seek": 18360, "start": 199.64, "end": 202.79999999999998, "text": " So a 3 is just a scalar.", "tokens": [50364, 440, 2572, 1823, 307, 550, 281, 14722, 257, 805, 13, 50586, 50586, 400, 321, 360, 370, 1228, 257, 588, 2531, 24903, 13, 50784, 50784, 5686, 586, 341, 2636, 4583, 11, 264, 5598, 4583, 575, 445, 472, 4985, 11, 597, 307, 983, 456, 311, 445, 51066, 51066, 472, 5598, 510, 13, 51166, 51166, 407, 257, 805, 307, 445, 257, 39684, 13, 51324, 51324, 400, 2721, 11, 291, 393, 3614, 379, 747, 257, 805, 2325, 662, 502, 293, 14678, 309, 412, 1958, 13, 20, 281, 808, 493, 365, 51676, 51676, 257, 17434, 21538, 7645, 13, 51798, 51798, 1119, 341, 264, 14293, 502, 30, 51860, 51860], "temperature": 0.0, "avg_logprob": -0.1642323993501209, "compression_ratio": 1.5695652173913044, "no_speech_prob": 1.963789372894098e-06}, {"id": 40, "seek": 18360, "start": 202.79999999999998, "end": 209.84, "text": " And finally, you can optionally take a 3 subscript 1 and threshold it at 0.5 to come up with", "tokens": [50364, 440, 2572, 1823, 307, 550, 281, 14722, 257, 805, 13, 50586, 50586, 400, 321, 360, 370, 1228, 257, 588, 2531, 24903, 13, 50784, 50784, 5686, 586, 341, 2636, 4583, 11, 264, 5598, 4583, 575, 445, 472, 4985, 11, 597, 307, 983, 456, 311, 445, 51066, 51066, 472, 5598, 510, 13, 51166, 51166, 407, 257, 805, 307, 445, 257, 39684, 13, 51324, 51324, 400, 2721, 11, 291, 393, 3614, 379, 747, 257, 805, 2325, 662, 502, 293, 14678, 309, 412, 1958, 13, 20, 281, 808, 493, 365, 51676, 51676, 257, 17434, 21538, 7645, 13, 51798, 51798, 1119, 341, 264, 14293, 502, 30, 51860, 51860], "temperature": 0.0, "avg_logprob": -0.1642323993501209, "compression_ratio": 1.5695652173913044, "no_speech_prob": 1.963789372894098e-06}, {"id": 41, "seek": 18360, "start": 209.84, "end": 212.28, "text": " a binary classification label.", "tokens": [50364, 440, 2572, 1823, 307, 550, 281, 14722, 257, 805, 13, 50586, 50586, 400, 321, 360, 370, 1228, 257, 588, 2531, 24903, 13, 50784, 50784, 5686, 586, 341, 2636, 4583, 11, 264, 5598, 4583, 575, 445, 472, 4985, 11, 597, 307, 983, 456, 311, 445, 51066, 51066, 472, 5598, 510, 13, 51166, 51166, 407, 257, 805, 307, 445, 257, 39684, 13, 51324, 51324, 400, 2721, 11, 291, 393, 3614, 379, 747, 257, 805, 2325, 662, 502, 293, 14678, 309, 412, 1958, 13, 20, 281, 808, 493, 365, 51676, 51676, 257, 17434, 21538, 7645, 13, 51798, 51798, 1119, 341, 264, 14293, 502, 30, 51860, 51860], "temperature": 0.0, "avg_logprob": -0.1642323993501209, "compression_ratio": 1.5695652173913044, "no_speech_prob": 1.963789372894098e-06}, {"id": 42, "seek": 18360, "start": 212.28, "end": 213.51999999999998, "text": " Is this the digit 1?", "tokens": [50364, 440, 2572, 1823, 307, 550, 281, 14722, 257, 805, 13, 50586, 50586, 400, 321, 360, 370, 1228, 257, 588, 2531, 24903, 13, 50784, 50784, 5686, 586, 341, 2636, 4583, 11, 264, 5598, 4583, 575, 445, 472, 4985, 11, 597, 307, 983, 456, 311, 445, 51066, 51066, 472, 5598, 510, 13, 51166, 51166, 407, 257, 805, 307, 445, 257, 39684, 13, 51324, 51324, 400, 2721, 11, 291, 393, 3614, 379, 747, 257, 805, 2325, 662, 502, 293, 14678, 309, 412, 1958, 13, 20, 281, 808, 493, 365, 51676, 51676, 257, 17434, 21538, 7645, 13, 51798, 51798, 1119, 341, 264, 14293, 502, 30, 51860, 51860], "temperature": 0.0, "avg_logprob": -0.1642323993501209, "compression_ratio": 1.5695652173913044, "no_speech_prob": 1.963789372894098e-06}, {"id": 43, "seek": 21352, "start": 213.52, "end": 215.12, "text": " Yes or no?", "tokens": [50364, 1079, 420, 572, 30, 50444, 50444, 407, 264, 8310, 295, 2807, 763, 700, 2516, 2031, 293, 550, 715, 1819, 257, 502, 293, 550, 715, 1819, 50704, 50704, 257, 568, 293, 550, 715, 1819, 257, 805, 11, 597, 307, 611, 264, 5598, 295, 264, 18161, 3209, 13, 50956, 50956, 509, 393, 611, 2464, 300, 382, 283, 295, 2031, 13, 51128, 51128, 407, 1604, 562, 321, 3264, 466, 8213, 24590, 293, 3565, 3142, 24590, 11, 321, 764, 283, 295, 2031, 281, 45708, 51476, 51476, 264, 23930, 295, 8213, 24590, 420, 3565, 3142, 24590, 13, 51645, 51645], "temperature": 0.0, "avg_logprob": -0.14113719264666238, "compression_ratio": 1.8666666666666667, "no_speech_prob": 1.9637786863313522e-06}, {"id": 44, "seek": 21352, "start": 215.12, "end": 220.32000000000002, "text": " So the sequence of computations first takes x and then computes a 1 and then computes", "tokens": [50364, 1079, 420, 572, 30, 50444, 50444, 407, 264, 8310, 295, 2807, 763, 700, 2516, 2031, 293, 550, 715, 1819, 257, 502, 293, 550, 715, 1819, 50704, 50704, 257, 568, 293, 550, 715, 1819, 257, 805, 11, 597, 307, 611, 264, 5598, 295, 264, 18161, 3209, 13, 50956, 50956, 509, 393, 611, 2464, 300, 382, 283, 295, 2031, 13, 51128, 51128, 407, 1604, 562, 321, 3264, 466, 8213, 24590, 293, 3565, 3142, 24590, 11, 321, 764, 283, 295, 2031, 281, 45708, 51476, 51476, 264, 23930, 295, 8213, 24590, 420, 3565, 3142, 24590, 13, 51645, 51645], "temperature": 0.0, "avg_logprob": -0.14113719264666238, "compression_ratio": 1.8666666666666667, "no_speech_prob": 1.9637786863313522e-06}, {"id": 45, "seek": 21352, "start": 220.32000000000002, "end": 225.36, "text": " a 2 and then computes a 3, which is also the output of the neural network.", "tokens": [50364, 1079, 420, 572, 30, 50444, 50444, 407, 264, 8310, 295, 2807, 763, 700, 2516, 2031, 293, 550, 715, 1819, 257, 502, 293, 550, 715, 1819, 50704, 50704, 257, 568, 293, 550, 715, 1819, 257, 805, 11, 597, 307, 611, 264, 5598, 295, 264, 18161, 3209, 13, 50956, 50956, 509, 393, 611, 2464, 300, 382, 283, 295, 2031, 13, 51128, 51128, 407, 1604, 562, 321, 3264, 466, 8213, 24590, 293, 3565, 3142, 24590, 11, 321, 764, 283, 295, 2031, 281, 45708, 51476, 51476, 264, 23930, 295, 8213, 24590, 420, 3565, 3142, 24590, 13, 51645, 51645], "temperature": 0.0, "avg_logprob": -0.14113719264666238, "compression_ratio": 1.8666666666666667, "no_speech_prob": 1.9637786863313522e-06}, {"id": 46, "seek": 21352, "start": 225.36, "end": 228.8, "text": " You can also write that as f of x.", "tokens": [50364, 1079, 420, 572, 30, 50444, 50444, 407, 264, 8310, 295, 2807, 763, 700, 2516, 2031, 293, 550, 715, 1819, 257, 502, 293, 550, 715, 1819, 50704, 50704, 257, 568, 293, 550, 715, 1819, 257, 805, 11, 597, 307, 611, 264, 5598, 295, 264, 18161, 3209, 13, 50956, 50956, 509, 393, 611, 2464, 300, 382, 283, 295, 2031, 13, 51128, 51128, 407, 1604, 562, 321, 3264, 466, 8213, 24590, 293, 3565, 3142, 24590, 11, 321, 764, 283, 295, 2031, 281, 45708, 51476, 51476, 264, 23930, 295, 8213, 24590, 420, 3565, 3142, 24590, 13, 51645, 51645], "temperature": 0.0, "avg_logprob": -0.14113719264666238, "compression_ratio": 1.8666666666666667, "no_speech_prob": 1.9637786863313522e-06}, {"id": 47, "seek": 21352, "start": 228.8, "end": 235.76000000000002, "text": " So remember when we learned about linear regression and logistic regression, we use f of x to denote", "tokens": [50364, 1079, 420, 572, 30, 50444, 50444, 407, 264, 8310, 295, 2807, 763, 700, 2516, 2031, 293, 550, 715, 1819, 257, 502, 293, 550, 715, 1819, 50704, 50704, 257, 568, 293, 550, 715, 1819, 257, 805, 11, 597, 307, 611, 264, 5598, 295, 264, 18161, 3209, 13, 50956, 50956, 509, 393, 611, 2464, 300, 382, 283, 295, 2031, 13, 51128, 51128, 407, 1604, 562, 321, 3264, 466, 8213, 24590, 293, 3565, 3142, 24590, 11, 321, 764, 283, 295, 2031, 281, 45708, 51476, 51476, 264, 23930, 295, 8213, 24590, 420, 3565, 3142, 24590, 13, 51645, 51645], "temperature": 0.0, "avg_logprob": -0.14113719264666238, "compression_ratio": 1.8666666666666667, "no_speech_prob": 1.9637786863313522e-06}, {"id": 48, "seek": 21352, "start": 235.76000000000002, "end": 239.14000000000001, "text": " the outputs of linear regression or logistic regression.", "tokens": [50364, 1079, 420, 572, 30, 50444, 50444, 407, 264, 8310, 295, 2807, 763, 700, 2516, 2031, 293, 550, 715, 1819, 257, 502, 293, 550, 715, 1819, 50704, 50704, 257, 568, 293, 550, 715, 1819, 257, 805, 11, 597, 307, 611, 264, 5598, 295, 264, 18161, 3209, 13, 50956, 50956, 509, 393, 611, 2464, 300, 382, 283, 295, 2031, 13, 51128, 51128, 407, 1604, 562, 321, 3264, 466, 8213, 24590, 293, 3565, 3142, 24590, 11, 321, 764, 283, 295, 2031, 281, 45708, 51476, 51476, 264, 23930, 295, 8213, 24590, 420, 3565, 3142, 24590, 13, 51645, 51645], "temperature": 0.0, "avg_logprob": -0.14113719264666238, "compression_ratio": 1.8666666666666667, "no_speech_prob": 1.9637786863313522e-06}, {"id": 49, "seek": 23914, "start": 239.14, "end": 244.76, "text": " So we can also use f of x to denote the function computed by the neural network as a function", "tokens": [50364, 407, 321, 393, 611, 764, 283, 295, 2031, 281, 45708, 264, 2445, 40610, 538, 264, 18161, 3209, 382, 257, 2445, 50645, 50645, 295, 2031, 13, 50759, 50759, 1436, 341, 24903, 1709, 490, 1411, 281, 558, 11, 291, 722, 490, 2031, 550, 14722, 257, 502, 550, 50979, 50979, 257, 568, 550, 257, 805, 11, 341, 9284, 307, 611, 1219, 2128, 38377, 570, 291, 434, 12425, 990, 51307, 51307, 264, 2430, 763, 295, 264, 22027, 13, 51417, 51417, 407, 291, 434, 1455, 613, 2807, 763, 294, 264, 2128, 3513, 490, 1411, 281, 558, 13, 51725, 51725], "temperature": 0.0, "avg_logprob": -0.1486488382021586, "compression_ratio": 1.8317757009345794, "no_speech_prob": 3.288709422122338e-06}, {"id": 50, "seek": 23914, "start": 244.76, "end": 247.04, "text": " of x.", "tokens": [50364, 407, 321, 393, 611, 764, 283, 295, 2031, 281, 45708, 264, 2445, 40610, 538, 264, 18161, 3209, 382, 257, 2445, 50645, 50645, 295, 2031, 13, 50759, 50759, 1436, 341, 24903, 1709, 490, 1411, 281, 558, 11, 291, 722, 490, 2031, 550, 14722, 257, 502, 550, 50979, 50979, 257, 568, 550, 257, 805, 11, 341, 9284, 307, 611, 1219, 2128, 38377, 570, 291, 434, 12425, 990, 51307, 51307, 264, 2430, 763, 295, 264, 22027, 13, 51417, 51417, 407, 291, 434, 1455, 613, 2807, 763, 294, 264, 2128, 3513, 490, 1411, 281, 558, 13, 51725, 51725], "temperature": 0.0, "avg_logprob": -0.1486488382021586, "compression_ratio": 1.8317757009345794, "no_speech_prob": 3.288709422122338e-06}, {"id": 51, "seek": 23914, "start": 247.04, "end": 251.44, "text": " Because this computation goes from left to right, you start from x then compute a 1 then", "tokens": [50364, 407, 321, 393, 611, 764, 283, 295, 2031, 281, 45708, 264, 2445, 40610, 538, 264, 18161, 3209, 382, 257, 2445, 50645, 50645, 295, 2031, 13, 50759, 50759, 1436, 341, 24903, 1709, 490, 1411, 281, 558, 11, 291, 722, 490, 2031, 550, 14722, 257, 502, 550, 50979, 50979, 257, 568, 550, 257, 805, 11, 341, 9284, 307, 611, 1219, 2128, 38377, 570, 291, 434, 12425, 990, 51307, 51307, 264, 2430, 763, 295, 264, 22027, 13, 51417, 51417, 407, 291, 434, 1455, 613, 2807, 763, 294, 264, 2128, 3513, 490, 1411, 281, 558, 13, 51725, 51725], "temperature": 0.0, "avg_logprob": -0.1486488382021586, "compression_ratio": 1.8317757009345794, "no_speech_prob": 3.288709422122338e-06}, {"id": 52, "seek": 23914, "start": 251.44, "end": 258.0, "text": " a 2 then a 3, this algorithm is also called forward propagation because you're propagating", "tokens": [50364, 407, 321, 393, 611, 764, 283, 295, 2031, 281, 45708, 264, 2445, 40610, 538, 264, 18161, 3209, 382, 257, 2445, 50645, 50645, 295, 2031, 13, 50759, 50759, 1436, 341, 24903, 1709, 490, 1411, 281, 558, 11, 291, 722, 490, 2031, 550, 14722, 257, 502, 550, 50979, 50979, 257, 568, 550, 257, 805, 11, 341, 9284, 307, 611, 1219, 2128, 38377, 570, 291, 434, 12425, 990, 51307, 51307, 264, 2430, 763, 295, 264, 22027, 13, 51417, 51417, 407, 291, 434, 1455, 613, 2807, 763, 294, 264, 2128, 3513, 490, 1411, 281, 558, 13, 51725, 51725], "temperature": 0.0, "avg_logprob": -0.1486488382021586, "compression_ratio": 1.8317757009345794, "no_speech_prob": 3.288709422122338e-06}, {"id": 53, "seek": 23914, "start": 258.0, "end": 260.2, "text": " the activations of the neurons.", "tokens": [50364, 407, 321, 393, 611, 764, 283, 295, 2031, 281, 45708, 264, 2445, 40610, 538, 264, 18161, 3209, 382, 257, 2445, 50645, 50645, 295, 2031, 13, 50759, 50759, 1436, 341, 24903, 1709, 490, 1411, 281, 558, 11, 291, 722, 490, 2031, 550, 14722, 257, 502, 550, 50979, 50979, 257, 568, 550, 257, 805, 11, 341, 9284, 307, 611, 1219, 2128, 38377, 570, 291, 434, 12425, 990, 51307, 51307, 264, 2430, 763, 295, 264, 22027, 13, 51417, 51417, 407, 291, 434, 1455, 613, 2807, 763, 294, 264, 2128, 3513, 490, 1411, 281, 558, 13, 51725, 51725], "temperature": 0.0, "avg_logprob": -0.1486488382021586, "compression_ratio": 1.8317757009345794, "no_speech_prob": 3.288709422122338e-06}, {"id": 54, "seek": 23914, "start": 260.2, "end": 266.36, "text": " So you're making these computations in the forward direction from left to right.", "tokens": [50364, 407, 321, 393, 611, 764, 283, 295, 2031, 281, 45708, 264, 2445, 40610, 538, 264, 18161, 3209, 382, 257, 2445, 50645, 50645, 295, 2031, 13, 50759, 50759, 1436, 341, 24903, 1709, 490, 1411, 281, 558, 11, 291, 722, 490, 2031, 550, 14722, 257, 502, 550, 50979, 50979, 257, 568, 550, 257, 805, 11, 341, 9284, 307, 611, 1219, 2128, 38377, 570, 291, 434, 12425, 990, 51307, 51307, 264, 2430, 763, 295, 264, 22027, 13, 51417, 51417, 407, 291, 434, 1455, 613, 2807, 763, 294, 264, 2128, 3513, 490, 1411, 281, 558, 13, 51725, 51725], "temperature": 0.0, "avg_logprob": -0.1486488382021586, "compression_ratio": 1.8317757009345794, "no_speech_prob": 3.288709422122338e-06}, {"id": 55, "seek": 26636, "start": 266.36, "end": 272.0, "text": " And this is in contrast to a different algorithm called backward propagation or back propagation,", "tokens": [50364, 400, 341, 307, 294, 8712, 281, 257, 819, 9284, 1219, 23897, 38377, 420, 646, 38377, 11, 50646, 50646, 597, 307, 1143, 337, 2539, 293, 300, 311, 746, 291, 1466, 466, 958, 1243, 13, 50848, 50848, 400, 538, 264, 636, 11, 341, 2010, 295, 18161, 3209, 9482, 689, 291, 362, 544, 7633, 6815, 51092, 51092, 9105, 293, 550, 264, 1230, 295, 7633, 6815, 24108, 382, 291, 483, 4966, 281, 264, 5598, 51334, 51334, 4583, 11, 300, 311, 611, 257, 1238, 7476, 3922, 562, 10875, 18161, 3209, 6331, 1303, 13, 51586, 51586, 400, 291, 536, 544, 5110, 295, 341, 294, 264, 3124, 2715, 382, 731, 13, 51748, 51748], "temperature": 0.0, "avg_logprob": -0.12458349157262731, "compression_ratio": 1.7793594306049823, "no_speech_prob": 3.6118397019890836e-06}, {"id": 56, "seek": 26636, "start": 272.0, "end": 276.04, "text": " which is used for learning and that's something you learn about next week.", "tokens": [50364, 400, 341, 307, 294, 8712, 281, 257, 819, 9284, 1219, 23897, 38377, 420, 646, 38377, 11, 50646, 50646, 597, 307, 1143, 337, 2539, 293, 300, 311, 746, 291, 1466, 466, 958, 1243, 13, 50848, 50848, 400, 538, 264, 636, 11, 341, 2010, 295, 18161, 3209, 9482, 689, 291, 362, 544, 7633, 6815, 51092, 51092, 9105, 293, 550, 264, 1230, 295, 7633, 6815, 24108, 382, 291, 483, 4966, 281, 264, 5598, 51334, 51334, 4583, 11, 300, 311, 611, 257, 1238, 7476, 3922, 562, 10875, 18161, 3209, 6331, 1303, 13, 51586, 51586, 400, 291, 536, 544, 5110, 295, 341, 294, 264, 3124, 2715, 382, 731, 13, 51748, 51748], "temperature": 0.0, "avg_logprob": -0.12458349157262731, "compression_ratio": 1.7793594306049823, "no_speech_prob": 3.6118397019890836e-06}, {"id": 57, "seek": 26636, "start": 276.04, "end": 280.92, "text": " And by the way, this type of neural network architecture where you have more hidden units", "tokens": [50364, 400, 341, 307, 294, 8712, 281, 257, 819, 9284, 1219, 23897, 38377, 420, 646, 38377, 11, 50646, 50646, 597, 307, 1143, 337, 2539, 293, 300, 311, 746, 291, 1466, 466, 958, 1243, 13, 50848, 50848, 400, 538, 264, 636, 11, 341, 2010, 295, 18161, 3209, 9482, 689, 291, 362, 544, 7633, 6815, 51092, 51092, 9105, 293, 550, 264, 1230, 295, 7633, 6815, 24108, 382, 291, 483, 4966, 281, 264, 5598, 51334, 51334, 4583, 11, 300, 311, 611, 257, 1238, 7476, 3922, 562, 10875, 18161, 3209, 6331, 1303, 13, 51586, 51586, 400, 291, 536, 544, 5110, 295, 341, 294, 264, 3124, 2715, 382, 731, 13, 51748, 51748], "temperature": 0.0, "avg_logprob": -0.12458349157262731, "compression_ratio": 1.7793594306049823, "no_speech_prob": 3.6118397019890836e-06}, {"id": 58, "seek": 26636, "start": 280.92, "end": 285.76, "text": " initially and then the number of hidden units decreases as you get closer to the output", "tokens": [50364, 400, 341, 307, 294, 8712, 281, 257, 819, 9284, 1219, 23897, 38377, 420, 646, 38377, 11, 50646, 50646, 597, 307, 1143, 337, 2539, 293, 300, 311, 746, 291, 1466, 466, 958, 1243, 13, 50848, 50848, 400, 538, 264, 636, 11, 341, 2010, 295, 18161, 3209, 9482, 689, 291, 362, 544, 7633, 6815, 51092, 51092, 9105, 293, 550, 264, 1230, 295, 7633, 6815, 24108, 382, 291, 483, 4966, 281, 264, 5598, 51334, 51334, 4583, 11, 300, 311, 611, 257, 1238, 7476, 3922, 562, 10875, 18161, 3209, 6331, 1303, 13, 51586, 51586, 400, 291, 536, 544, 5110, 295, 341, 294, 264, 3124, 2715, 382, 731, 13, 51748, 51748], "temperature": 0.0, "avg_logprob": -0.12458349157262731, "compression_ratio": 1.7793594306049823, "no_speech_prob": 3.6118397019890836e-06}, {"id": 59, "seek": 26636, "start": 285.76, "end": 290.8, "text": " layer, that's also a pretty typical choice when choosing neural network architectures.", "tokens": [50364, 400, 341, 307, 294, 8712, 281, 257, 819, 9284, 1219, 23897, 38377, 420, 646, 38377, 11, 50646, 50646, 597, 307, 1143, 337, 2539, 293, 300, 311, 746, 291, 1466, 466, 958, 1243, 13, 50848, 50848, 400, 538, 264, 636, 11, 341, 2010, 295, 18161, 3209, 9482, 689, 291, 362, 544, 7633, 6815, 51092, 51092, 9105, 293, 550, 264, 1230, 295, 7633, 6815, 24108, 382, 291, 483, 4966, 281, 264, 5598, 51334, 51334, 4583, 11, 300, 311, 611, 257, 1238, 7476, 3922, 562, 10875, 18161, 3209, 6331, 1303, 13, 51586, 51586, 400, 291, 536, 544, 5110, 295, 341, 294, 264, 3124, 2715, 382, 731, 13, 51748, 51748], "temperature": 0.0, "avg_logprob": -0.12458349157262731, "compression_ratio": 1.7793594306049823, "no_speech_prob": 3.6118397019890836e-06}, {"id": 60, "seek": 26636, "start": 290.8, "end": 294.04, "text": " And you see more examples of this in the practice lab as well.", "tokens": [50364, 400, 341, 307, 294, 8712, 281, 257, 819, 9284, 1219, 23897, 38377, 420, 646, 38377, 11, 50646, 50646, 597, 307, 1143, 337, 2539, 293, 300, 311, 746, 291, 1466, 466, 958, 1243, 13, 50848, 50848, 400, 538, 264, 636, 11, 341, 2010, 295, 18161, 3209, 9482, 689, 291, 362, 544, 7633, 6815, 51092, 51092, 9105, 293, 550, 264, 1230, 295, 7633, 6815, 24108, 382, 291, 483, 4966, 281, 264, 5598, 51334, 51334, 4583, 11, 300, 311, 611, 257, 1238, 7476, 3922, 562, 10875, 18161, 3209, 6331, 1303, 13, 51586, 51586, 400, 291, 536, 544, 5110, 295, 341, 294, 264, 3124, 2715, 382, 731, 13, 51748, 51748], "temperature": 0.0, "avg_logprob": -0.12458349157262731, "compression_ratio": 1.7793594306049823, "no_speech_prob": 3.6118397019890836e-06}, {"id": 61, "seek": 29404, "start": 294.04, "end": 299.88, "text": " So that's neural network inference using the forward propagation algorithm.", "tokens": [50364, 407, 300, 311, 18161, 3209, 38253, 1228, 264, 2128, 38377, 9284, 13, 50656, 50656, 400, 365, 341, 11, 291, 1116, 312, 1075, 281, 5484, 264, 9834, 295, 257, 18161, 3209, 300, 1580, 50898, 50898, 1646, 632, 8895, 293, 9437, 322, 264, 4705, 13, 51051, 51051, 400, 291, 1116, 312, 1075, 281, 3985, 484, 38253, 322, 428, 777, 1412, 1228, 641, 18161, 3209, 13, 51357, 51357, 823, 300, 291, 600, 1612, 264, 5221, 293, 264, 9284, 11, 718, 311, 747, 257, 574, 412, 577, 291, 393, 767, 51586, 51586, 4445, 341, 294, 37624, 13, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.10387916171673647, "compression_ratio": 1.7333333333333334, "no_speech_prob": 2.111085268552415e-05}, {"id": 62, "seek": 29404, "start": 299.88, "end": 304.72, "text": " And with this, you'd be able to download the parameters of a neural network that someone", "tokens": [50364, 407, 300, 311, 18161, 3209, 38253, 1228, 264, 2128, 38377, 9284, 13, 50656, 50656, 400, 365, 341, 11, 291, 1116, 312, 1075, 281, 5484, 264, 9834, 295, 257, 18161, 3209, 300, 1580, 50898, 50898, 1646, 632, 8895, 293, 9437, 322, 264, 4705, 13, 51051, 51051, 400, 291, 1116, 312, 1075, 281, 3985, 484, 38253, 322, 428, 777, 1412, 1228, 641, 18161, 3209, 13, 51357, 51357, 823, 300, 291, 600, 1612, 264, 5221, 293, 264, 9284, 11, 718, 311, 747, 257, 574, 412, 577, 291, 393, 767, 51586, 51586, 4445, 341, 294, 37624, 13, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.10387916171673647, "compression_ratio": 1.7333333333333334, "no_speech_prob": 2.111085268552415e-05}, {"id": 63, "seek": 29404, "start": 304.72, "end": 307.78000000000003, "text": " else had trained and posted on the internet.", "tokens": [50364, 407, 300, 311, 18161, 3209, 38253, 1228, 264, 2128, 38377, 9284, 13, 50656, 50656, 400, 365, 341, 11, 291, 1116, 312, 1075, 281, 5484, 264, 9834, 295, 257, 18161, 3209, 300, 1580, 50898, 50898, 1646, 632, 8895, 293, 9437, 322, 264, 4705, 13, 51051, 51051, 400, 291, 1116, 312, 1075, 281, 3985, 484, 38253, 322, 428, 777, 1412, 1228, 641, 18161, 3209, 13, 51357, 51357, 823, 300, 291, 600, 1612, 264, 5221, 293, 264, 9284, 11, 718, 311, 747, 257, 574, 412, 577, 291, 393, 767, 51586, 51586, 4445, 341, 294, 37624, 13, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.10387916171673647, "compression_ratio": 1.7333333333333334, "no_speech_prob": 2.111085268552415e-05}, {"id": 64, "seek": 29404, "start": 307.78000000000003, "end": 313.90000000000003, "text": " And you'd be able to carry out inference on your new data using their neural network.", "tokens": [50364, 407, 300, 311, 18161, 3209, 38253, 1228, 264, 2128, 38377, 9284, 13, 50656, 50656, 400, 365, 341, 11, 291, 1116, 312, 1075, 281, 5484, 264, 9834, 295, 257, 18161, 3209, 300, 1580, 50898, 50898, 1646, 632, 8895, 293, 9437, 322, 264, 4705, 13, 51051, 51051, 400, 291, 1116, 312, 1075, 281, 3985, 484, 38253, 322, 428, 777, 1412, 1228, 641, 18161, 3209, 13, 51357, 51357, 823, 300, 291, 600, 1612, 264, 5221, 293, 264, 9284, 11, 718, 311, 747, 257, 574, 412, 577, 291, 393, 767, 51586, 51586, 4445, 341, 294, 37624, 13, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.10387916171673647, "compression_ratio": 1.7333333333333334, "no_speech_prob": 2.111085268552415e-05}, {"id": 65, "seek": 29404, "start": 313.90000000000003, "end": 318.48, "text": " Now that you've seen the math and the algorithm, let's take a look at how you can actually", "tokens": [50364, 407, 300, 311, 18161, 3209, 38253, 1228, 264, 2128, 38377, 9284, 13, 50656, 50656, 400, 365, 341, 11, 291, 1116, 312, 1075, 281, 5484, 264, 9834, 295, 257, 18161, 3209, 300, 1580, 50898, 50898, 1646, 632, 8895, 293, 9437, 322, 264, 4705, 13, 51051, 51051, 400, 291, 1116, 312, 1075, 281, 3985, 484, 38253, 322, 428, 777, 1412, 1228, 641, 18161, 3209, 13, 51357, 51357, 823, 300, 291, 600, 1612, 264, 5221, 293, 264, 9284, 11, 718, 311, 747, 257, 574, 412, 577, 291, 393, 767, 51586, 51586, 4445, 341, 294, 37624, 13, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.10387916171673647, "compression_ratio": 1.7333333333333334, "no_speech_prob": 2.111085268552415e-05}, {"id": 66, "seek": 29404, "start": 318.48, "end": 320.44, "text": " implement this in TensorFlow.", "tokens": [50364, 407, 300, 311, 18161, 3209, 38253, 1228, 264, 2128, 38377, 9284, 13, 50656, 50656, 400, 365, 341, 11, 291, 1116, 312, 1075, 281, 5484, 264, 9834, 295, 257, 18161, 3209, 300, 1580, 50898, 50898, 1646, 632, 8895, 293, 9437, 322, 264, 4705, 13, 51051, 51051, 400, 291, 1116, 312, 1075, 281, 3985, 484, 38253, 322, 428, 777, 1412, 1228, 641, 18161, 3209, 13, 51357, 51357, 823, 300, 291, 600, 1612, 264, 5221, 293, 264, 9284, 11, 718, 311, 747, 257, 574, 412, 577, 291, 393, 767, 51586, 51586, 4445, 341, 294, 37624, 13, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.10387916171673647, "compression_ratio": 1.7333333333333334, "no_speech_prob": 2.111085268552415e-05}, {"id": 67, "seek": 32044, "start": 320.44, "end": 324.16, "text": " Specifically, let's take a look at this in the next video.", "tokens": [50364, 26058, 11, 718, 311, 747, 257, 574, 412, 341, 294, 264, 958, 960, 13, 50550], "temperature": 0.0, "avg_logprob": -0.21526314230526195, "compression_ratio": 0.90625, "no_speech_prob": 0.00013935205060988665}], "language": "en", "video_id": "L1fsfAbq-q8", "entity": "ML Specialization, Andrew Ng (2022)"}}
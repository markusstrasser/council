{"video_id": "Dz4JZzgn-hg", "title": "1.16 Machine Learning Overview | Implementing gradient descent --[Machine Learning | Andrew Ng]", "description": "First Course:\nSupervised Machine Learning : Regression and Classification.\n\nIf you liked the content please subscribe and put a little blue thumb.\nTake heart!", "author": "Machine Learning", "keywords": [], "channel_url": "https://www.youtube.com/channel/UClG5HEAJJFOavT_UolqYROQ", "length": 600, "views": 406, "publish_date": "11/04/2022", "timestamp": 1660953600, "entity": "ML Specialization, Andrew Ng (2022)", "transcript": {"text": " Let's take a look at how you can actually implement the gradient descent algorithm. Let me write down the gradient descent algorithm. Here it is. On each step, w, the parameter, is updated to the old value of w minus alpha times this term d over dw of the cost function j of wb. So what this expression is saying is update your parameter w by taking the current value of w and adjusting it a small amount, which is this expression on the right, minus alpha times this term over here. So if you feel like there's a lot going on in this equation, it's okay. Don't worry about it. We'll unpack it together. First, this equal notation here. Notice I said we're assigning w a value using this equal sign. So in this context, this equal sign is the assignment operator. Specifically, in this context, if you write code that says a equals c, it means take the value of c and store it in your computer in the variable a. If you write a equals a plus one, it means set the value of a to be equal to a plus one or increment the value of a by one. So the assignment operator in coding is different than truth assertions in mathematics, where if I write a equals c, I'm asserting, that is, I am claiming that the values of a and c are equal to each other. And hopefully I will never write a truth assertion a equals a plus one because, you know, that just can't possibly be true. So in Python and in other programming languages, truth assertions are sometimes written as equals equals. So you may see code that says a equals equals c if you're testing whether a is equal to c. But in math notation, as we conventionally use it, like in these videos, the equal sign can be used for either assignments or for truth assertion. And so I try to make sure it's clear when I write an equal sign, whether we're assigning a value to a variable or whether we're asserting the truth of the equality of two values. Now let's dive more deeply into what the symbols in this equation means. The symbol here is the Greek alphabet alpha, and in this equation, alpha is also called the learning rate. The learning rate is usually a small positive number between zero and one, and it might be say 0.01. What alpha does is it basically controls how big of a step you take downhill. So if alpha is very large, then that corresponds to a very aggressive gradient descent procedure where you're trying to take huge steps downhill. And if alpha is very small, then you'd be taking small baby steps downhill. We'll come back later to delve more deeply into how to choose a good learning rate alpha. And finally, this term here, that's the derivative term of the cost function J. Let's not worry about the details of this derivative right now, but later on you get to see more about the derivative term. But for now, you can think of this derivative term that I drew a magenta box around as telling you in which direction you want to take your baby step. And in combination with the learning rate alpha, it also determines the size of the steps you want to take downhill. Now I do want to mention that derivatives come from calculus, and even if you aren't familiar with calculus, don't worry about it. Even without knowing any calculus, you'll be able to figure out all you need to know about this derivative term in this video and the next. One more thing. Remember your model has two parameters, not just W, but also B. So you also have an assignment operation to update the parameter B that looks very similar. B is assigned the O value of B minus the learning rate alpha times this slightly different derivative term D over dB of J of WB. So remember in the graph of the surface plot where you're taking baby steps until you get to the bottom of the valley? Well, for the gradient descent algorithm, you're going to repeat these two update steps until the algorithm converges. And by converges, I mean that you reach the point at a local minimum where the parameters W and B no longer change much with each additional step that you take. Now there's one more subtle detail about how to correctly implement gradient descent. You're going to update two parameters W and B, right? So this update takes place for both parameters W and B. One important detail is that for gradient descent, you want to simultaneously update W and B, meaning you want to update both parameters at the same time. What I mean by that is that in this expression, you're going to update W from the old W to a new W, and you're also updating B from its old value to a new value B. And the way to implement this is to compute the right side, computing this thing for W and B and simultaneously at the same time, update W and B to the new values. So let's take a look at what this means. Here's the correct way to implement gradient descent, which does a simultaneous update. This sets a variable tempW equal to that expression, which is W minus that term here. Let's also set another variable tempB to that, which is B minus that term. So you compute both right-hand sides, both updates, and store them into variables tempW and tempB. Then you copy the value of tempW into W, and you also copy the value of tempB into B. Now one thing you may notice is that this value of W is from before W gets updated. Here notice that the pre-update W is what goes into the derivative term over here, okay? In contrast, here's an incorrect implementation of gradient descent that does not do a simultaneous update. In this incorrect implementation, we compute tempW same as before, so far that's okay. And now here's where things start to differ. We then update W with the value in tempW before calculating the new value for the other parameter B. Next, we calculate tempB as B minus that term here. And finally, we update B with the value in tempB. The difference between the right-hand side and the left-hand side implementations is that if you look over here, this W has already been updated to this new value, and it's this updated W that actually goes into the cost function J of WB. It means that this term here on the right is not the same as this term over here that you see on the left. And that also means this tempB term on the right is not quite the same as the tempB term on the left, and thus this updated value for B on the right is not the same as this updated value for variable B on the left. The way that gradient descent is implemented in code, it actually turns out to be more natural to implement it the correct way with simultaneous updates. When you hear someone talk about gradient descent, they always mean the gradient descent where you perform a simultaneous update of the parameters. If however, you were to implement non-simultaneous updates, it turns out it will probably work more or less anyway, but doing it this way isn't really the correct way to implement it, it's actually some other algorithm with different properties. So I would advise you to just stick to the correct simultaneous update and not use this incorrect version on the right. So that's gradient descent. In the next video, we'll go into details of the derivative term, which you saw in this video, but that we didn't really talk about in detail. Calculus are part of calculus, and again, if you're not familiar with calculus, don't worry about it. You won't need to know calculus at all in order to complete this course or this specialization, and you'll have all the information you need in order to implement gradient descent. Coming up in the next video, we'll go over derivatives together, and you come away with the intuition and knowledge you need to be able to implement and apply gradient descent yourself. I think that'll be an exciting thing for you to know how to implement. So let's go on to the next video to see how to do that.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 10.040000000000001, "text": " Let's take a look at how you can actually implement the gradient descent algorithm.", "tokens": [50364, 961, 311, 747, 257, 574, 412, 577, 291, 393, 767, 4445, 264, 16235, 23475, 9284, 13, 50866, 50866, 961, 385, 2464, 760, 264, 16235, 23475, 9284, 13, 51078, 51078, 1692, 309, 307, 13, 51134, 51134, 1282, 1184, 1823, 11, 261, 11, 264, 13075, 11, 307, 10588, 281, 264, 1331, 2158, 295, 261, 3175, 8961, 1413, 341, 51626, 51626], "temperature": 0.0, "avg_logprob": -0.15729331970214844, "compression_ratio": 1.5533333333333332, "no_speech_prob": 0.0028887130320072174}, {"id": 1, "seek": 0, "start": 10.040000000000001, "end": 14.280000000000001, "text": " Let me write down the gradient descent algorithm.", "tokens": [50364, 961, 311, 747, 257, 574, 412, 577, 291, 393, 767, 4445, 264, 16235, 23475, 9284, 13, 50866, 50866, 961, 385, 2464, 760, 264, 16235, 23475, 9284, 13, 51078, 51078, 1692, 309, 307, 13, 51134, 51134, 1282, 1184, 1823, 11, 261, 11, 264, 13075, 11, 307, 10588, 281, 264, 1331, 2158, 295, 261, 3175, 8961, 1413, 341, 51626, 51626], "temperature": 0.0, "avg_logprob": -0.15729331970214844, "compression_ratio": 1.5533333333333332, "no_speech_prob": 0.0028887130320072174}, {"id": 2, "seek": 0, "start": 14.280000000000001, "end": 15.4, "text": " Here it is.", "tokens": [50364, 961, 311, 747, 257, 574, 412, 577, 291, 393, 767, 4445, 264, 16235, 23475, 9284, 13, 50866, 50866, 961, 385, 2464, 760, 264, 16235, 23475, 9284, 13, 51078, 51078, 1692, 309, 307, 13, 51134, 51134, 1282, 1184, 1823, 11, 261, 11, 264, 13075, 11, 307, 10588, 281, 264, 1331, 2158, 295, 261, 3175, 8961, 1413, 341, 51626, 51626], "temperature": 0.0, "avg_logprob": -0.15729331970214844, "compression_ratio": 1.5533333333333332, "no_speech_prob": 0.0028887130320072174}, {"id": 3, "seek": 0, "start": 15.4, "end": 25.240000000000002, "text": " On each step, w, the parameter, is updated to the old value of w minus alpha times this", "tokens": [50364, 961, 311, 747, 257, 574, 412, 577, 291, 393, 767, 4445, 264, 16235, 23475, 9284, 13, 50866, 50866, 961, 385, 2464, 760, 264, 16235, 23475, 9284, 13, 51078, 51078, 1692, 309, 307, 13, 51134, 51134, 1282, 1184, 1823, 11, 261, 11, 264, 13075, 11, 307, 10588, 281, 264, 1331, 2158, 295, 261, 3175, 8961, 1413, 341, 51626, 51626], "temperature": 0.0, "avg_logprob": -0.15729331970214844, "compression_ratio": 1.5533333333333332, "no_speech_prob": 0.0028887130320072174}, {"id": 4, "seek": 2524, "start": 25.24, "end": 30.959999999999997, "text": " term d over dw of the cost function j of wb.", "tokens": [50364, 1433, 274, 670, 27379, 295, 264, 2063, 2445, 361, 295, 261, 65, 13, 50650, 50650, 407, 437, 341, 6114, 307, 1566, 307, 5623, 428, 13075, 261, 538, 1940, 264, 2190, 2158, 50940, 50940, 295, 261, 293, 23559, 309, 257, 1359, 2372, 11, 597, 307, 341, 6114, 322, 264, 558, 11, 3175, 8961, 51324, 51324, 1413, 341, 1433, 670, 510, 13, 51568, 51568, 407, 498, 291, 841, 411, 456, 311, 257, 688, 516, 322, 294, 341, 5367, 11, 309, 311, 1392, 13, 51828, 51828], "temperature": 0.0, "avg_logprob": -0.1605256809907801, "compression_ratio": 1.605, "no_speech_prob": 1.6441919797216542e-05}, {"id": 5, "seek": 2524, "start": 30.959999999999997, "end": 36.76, "text": " So what this expression is saying is update your parameter w by taking the current value", "tokens": [50364, 1433, 274, 670, 27379, 295, 264, 2063, 2445, 361, 295, 261, 65, 13, 50650, 50650, 407, 437, 341, 6114, 307, 1566, 307, 5623, 428, 13075, 261, 538, 1940, 264, 2190, 2158, 50940, 50940, 295, 261, 293, 23559, 309, 257, 1359, 2372, 11, 597, 307, 341, 6114, 322, 264, 558, 11, 3175, 8961, 51324, 51324, 1413, 341, 1433, 670, 510, 13, 51568, 51568, 407, 498, 291, 841, 411, 456, 311, 257, 688, 516, 322, 294, 341, 5367, 11, 309, 311, 1392, 13, 51828, 51828], "temperature": 0.0, "avg_logprob": -0.1605256809907801, "compression_ratio": 1.605, "no_speech_prob": 1.6441919797216542e-05}, {"id": 6, "seek": 2524, "start": 36.76, "end": 44.44, "text": " of w and adjusting it a small amount, which is this expression on the right, minus alpha", "tokens": [50364, 1433, 274, 670, 27379, 295, 264, 2063, 2445, 361, 295, 261, 65, 13, 50650, 50650, 407, 437, 341, 6114, 307, 1566, 307, 5623, 428, 13075, 261, 538, 1940, 264, 2190, 2158, 50940, 50940, 295, 261, 293, 23559, 309, 257, 1359, 2372, 11, 597, 307, 341, 6114, 322, 264, 558, 11, 3175, 8961, 51324, 51324, 1413, 341, 1433, 670, 510, 13, 51568, 51568, 407, 498, 291, 841, 411, 456, 311, 257, 688, 516, 322, 294, 341, 5367, 11, 309, 311, 1392, 13, 51828, 51828], "temperature": 0.0, "avg_logprob": -0.1605256809907801, "compression_ratio": 1.605, "no_speech_prob": 1.6441919797216542e-05}, {"id": 7, "seek": 2524, "start": 44.44, "end": 49.32, "text": " times this term over here.", "tokens": [50364, 1433, 274, 670, 27379, 295, 264, 2063, 2445, 361, 295, 261, 65, 13, 50650, 50650, 407, 437, 341, 6114, 307, 1566, 307, 5623, 428, 13075, 261, 538, 1940, 264, 2190, 2158, 50940, 50940, 295, 261, 293, 23559, 309, 257, 1359, 2372, 11, 597, 307, 341, 6114, 322, 264, 558, 11, 3175, 8961, 51324, 51324, 1413, 341, 1433, 670, 510, 13, 51568, 51568, 407, 498, 291, 841, 411, 456, 311, 257, 688, 516, 322, 294, 341, 5367, 11, 309, 311, 1392, 13, 51828, 51828], "temperature": 0.0, "avg_logprob": -0.1605256809907801, "compression_ratio": 1.605, "no_speech_prob": 1.6441919797216542e-05}, {"id": 8, "seek": 2524, "start": 49.32, "end": 54.519999999999996, "text": " So if you feel like there's a lot going on in this equation, it's okay.", "tokens": [50364, 1433, 274, 670, 27379, 295, 264, 2063, 2445, 361, 295, 261, 65, 13, 50650, 50650, 407, 437, 341, 6114, 307, 1566, 307, 5623, 428, 13075, 261, 538, 1940, 264, 2190, 2158, 50940, 50940, 295, 261, 293, 23559, 309, 257, 1359, 2372, 11, 597, 307, 341, 6114, 322, 264, 558, 11, 3175, 8961, 51324, 51324, 1413, 341, 1433, 670, 510, 13, 51568, 51568, 407, 498, 291, 841, 411, 456, 311, 257, 688, 516, 322, 294, 341, 5367, 11, 309, 311, 1392, 13, 51828, 51828], "temperature": 0.0, "avg_logprob": -0.1605256809907801, "compression_ratio": 1.605, "no_speech_prob": 1.6441919797216542e-05}, {"id": 9, "seek": 5452, "start": 54.52, "end": 55.52, "text": " Don't worry about it.", "tokens": [50364, 1468, 380, 3292, 466, 309, 13, 50414, 50414, 492, 603, 26699, 309, 1214, 13, 50544, 50544, 2386, 11, 341, 2681, 24657, 510, 13, 50748, 50748, 13428, 286, 848, 321, 434, 49602, 261, 257, 2158, 1228, 341, 2681, 1465, 13, 50981, 50981, 407, 294, 341, 4319, 11, 341, 2681, 1465, 307, 264, 15187, 12973, 13, 51206, 51206, 26058, 11, 294, 341, 4319, 11, 498, 291, 2464, 3089, 300, 1619, 257, 6915, 269, 11, 309, 1355, 747, 264, 51588, 51588, 2158, 295, 269, 293, 3531, 309, 294, 428, 3820, 294, 264, 7006, 257, 13, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.19515067338943481, "compression_ratio": 1.6330275229357798, "no_speech_prob": 6.540331469295779e-06}, {"id": 10, "seek": 5452, "start": 55.52, "end": 58.120000000000005, "text": " We'll unpack it together.", "tokens": [50364, 1468, 380, 3292, 466, 309, 13, 50414, 50414, 492, 603, 26699, 309, 1214, 13, 50544, 50544, 2386, 11, 341, 2681, 24657, 510, 13, 50748, 50748, 13428, 286, 848, 321, 434, 49602, 261, 257, 2158, 1228, 341, 2681, 1465, 13, 50981, 50981, 407, 294, 341, 4319, 11, 341, 2681, 1465, 307, 264, 15187, 12973, 13, 51206, 51206, 26058, 11, 294, 341, 4319, 11, 498, 291, 2464, 3089, 300, 1619, 257, 6915, 269, 11, 309, 1355, 747, 264, 51588, 51588, 2158, 295, 269, 293, 3531, 309, 294, 428, 3820, 294, 264, 7006, 257, 13, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.19515067338943481, "compression_ratio": 1.6330275229357798, "no_speech_prob": 6.540331469295779e-06}, {"id": 11, "seek": 5452, "start": 58.120000000000005, "end": 62.2, "text": " First, this equal notation here.", "tokens": [50364, 1468, 380, 3292, 466, 309, 13, 50414, 50414, 492, 603, 26699, 309, 1214, 13, 50544, 50544, 2386, 11, 341, 2681, 24657, 510, 13, 50748, 50748, 13428, 286, 848, 321, 434, 49602, 261, 257, 2158, 1228, 341, 2681, 1465, 13, 50981, 50981, 407, 294, 341, 4319, 11, 341, 2681, 1465, 307, 264, 15187, 12973, 13, 51206, 51206, 26058, 11, 294, 341, 4319, 11, 498, 291, 2464, 3089, 300, 1619, 257, 6915, 269, 11, 309, 1355, 747, 264, 51588, 51588, 2158, 295, 269, 293, 3531, 309, 294, 428, 3820, 294, 264, 7006, 257, 13, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.19515067338943481, "compression_ratio": 1.6330275229357798, "no_speech_prob": 6.540331469295779e-06}, {"id": 12, "seek": 5452, "start": 62.2, "end": 66.86, "text": " Notice I said we're assigning w a value using this equal sign.", "tokens": [50364, 1468, 380, 3292, 466, 309, 13, 50414, 50414, 492, 603, 26699, 309, 1214, 13, 50544, 50544, 2386, 11, 341, 2681, 24657, 510, 13, 50748, 50748, 13428, 286, 848, 321, 434, 49602, 261, 257, 2158, 1228, 341, 2681, 1465, 13, 50981, 50981, 407, 294, 341, 4319, 11, 341, 2681, 1465, 307, 264, 15187, 12973, 13, 51206, 51206, 26058, 11, 294, 341, 4319, 11, 498, 291, 2464, 3089, 300, 1619, 257, 6915, 269, 11, 309, 1355, 747, 264, 51588, 51588, 2158, 295, 269, 293, 3531, 309, 294, 428, 3820, 294, 264, 7006, 257, 13, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.19515067338943481, "compression_ratio": 1.6330275229357798, "no_speech_prob": 6.540331469295779e-06}, {"id": 13, "seek": 5452, "start": 66.86, "end": 71.36, "text": " So in this context, this equal sign is the assignment operator.", "tokens": [50364, 1468, 380, 3292, 466, 309, 13, 50414, 50414, 492, 603, 26699, 309, 1214, 13, 50544, 50544, 2386, 11, 341, 2681, 24657, 510, 13, 50748, 50748, 13428, 286, 848, 321, 434, 49602, 261, 257, 2158, 1228, 341, 2681, 1465, 13, 50981, 50981, 407, 294, 341, 4319, 11, 341, 2681, 1465, 307, 264, 15187, 12973, 13, 51206, 51206, 26058, 11, 294, 341, 4319, 11, 498, 291, 2464, 3089, 300, 1619, 257, 6915, 269, 11, 309, 1355, 747, 264, 51588, 51588, 2158, 295, 269, 293, 3531, 309, 294, 428, 3820, 294, 264, 7006, 257, 13, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.19515067338943481, "compression_ratio": 1.6330275229357798, "no_speech_prob": 6.540331469295779e-06}, {"id": 14, "seek": 5452, "start": 71.36, "end": 79.0, "text": " Specifically, in this context, if you write code that says a equals c, it means take the", "tokens": [50364, 1468, 380, 3292, 466, 309, 13, 50414, 50414, 492, 603, 26699, 309, 1214, 13, 50544, 50544, 2386, 11, 341, 2681, 24657, 510, 13, 50748, 50748, 13428, 286, 848, 321, 434, 49602, 261, 257, 2158, 1228, 341, 2681, 1465, 13, 50981, 50981, 407, 294, 341, 4319, 11, 341, 2681, 1465, 307, 264, 15187, 12973, 13, 51206, 51206, 26058, 11, 294, 341, 4319, 11, 498, 291, 2464, 3089, 300, 1619, 257, 6915, 269, 11, 309, 1355, 747, 264, 51588, 51588, 2158, 295, 269, 293, 3531, 309, 294, 428, 3820, 294, 264, 7006, 257, 13, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.19515067338943481, "compression_ratio": 1.6330275229357798, "no_speech_prob": 6.540331469295779e-06}, {"id": 15, "seek": 5452, "start": 79.0, "end": 84.28, "text": " value of c and store it in your computer in the variable a.", "tokens": [50364, 1468, 380, 3292, 466, 309, 13, 50414, 50414, 492, 603, 26699, 309, 1214, 13, 50544, 50544, 2386, 11, 341, 2681, 24657, 510, 13, 50748, 50748, 13428, 286, 848, 321, 434, 49602, 261, 257, 2158, 1228, 341, 2681, 1465, 13, 50981, 50981, 407, 294, 341, 4319, 11, 341, 2681, 1465, 307, 264, 15187, 12973, 13, 51206, 51206, 26058, 11, 294, 341, 4319, 11, 498, 291, 2464, 3089, 300, 1619, 257, 6915, 269, 11, 309, 1355, 747, 264, 51588, 51588, 2158, 295, 269, 293, 3531, 309, 294, 428, 3820, 294, 264, 7006, 257, 13, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.19515067338943481, "compression_ratio": 1.6330275229357798, "no_speech_prob": 6.540331469295779e-06}, {"id": 16, "seek": 8428, "start": 84.28, "end": 89.96000000000001, "text": " If you write a equals a plus one, it means set the value of a to be equal to a plus one", "tokens": [50364, 759, 291, 2464, 257, 6915, 257, 1804, 472, 11, 309, 1355, 992, 264, 2158, 295, 257, 281, 312, 2681, 281, 257, 1804, 472, 50648, 50648, 420, 26200, 264, 2158, 295, 257, 538, 472, 13, 50842, 50842, 407, 264, 15187, 12973, 294, 17720, 307, 819, 813, 3494, 19810, 626, 294, 18666, 11, 689, 51234, 51234, 498, 286, 2464, 257, 6915, 269, 11, 286, 478, 1256, 27187, 11, 300, 307, 11, 286, 669, 19232, 300, 264, 4190, 295, 257, 293, 51538, 51538, 269, 366, 2681, 281, 1184, 661, 13, 51678, 51678], "temperature": 0.0, "avg_logprob": -0.12089056497091775, "compression_ratio": 1.746031746031746, "no_speech_prob": 2.1907696918788133e-06}, {"id": 17, "seek": 8428, "start": 89.96000000000001, "end": 93.84, "text": " or increment the value of a by one.", "tokens": [50364, 759, 291, 2464, 257, 6915, 257, 1804, 472, 11, 309, 1355, 992, 264, 2158, 295, 257, 281, 312, 2681, 281, 257, 1804, 472, 50648, 50648, 420, 26200, 264, 2158, 295, 257, 538, 472, 13, 50842, 50842, 407, 264, 15187, 12973, 294, 17720, 307, 819, 813, 3494, 19810, 626, 294, 18666, 11, 689, 51234, 51234, 498, 286, 2464, 257, 6915, 269, 11, 286, 478, 1256, 27187, 11, 300, 307, 11, 286, 669, 19232, 300, 264, 4190, 295, 257, 293, 51538, 51538, 269, 366, 2681, 281, 1184, 661, 13, 51678, 51678], "temperature": 0.0, "avg_logprob": -0.12089056497091775, "compression_ratio": 1.746031746031746, "no_speech_prob": 2.1907696918788133e-06}, {"id": 18, "seek": 8428, "start": 93.84, "end": 101.68, "text": " So the assignment operator in coding is different than truth assertions in mathematics, where", "tokens": [50364, 759, 291, 2464, 257, 6915, 257, 1804, 472, 11, 309, 1355, 992, 264, 2158, 295, 257, 281, 312, 2681, 281, 257, 1804, 472, 50648, 50648, 420, 26200, 264, 2158, 295, 257, 538, 472, 13, 50842, 50842, 407, 264, 15187, 12973, 294, 17720, 307, 819, 813, 3494, 19810, 626, 294, 18666, 11, 689, 51234, 51234, 498, 286, 2464, 257, 6915, 269, 11, 286, 478, 1256, 27187, 11, 300, 307, 11, 286, 669, 19232, 300, 264, 4190, 295, 257, 293, 51538, 51538, 269, 366, 2681, 281, 1184, 661, 13, 51678, 51678], "temperature": 0.0, "avg_logprob": -0.12089056497091775, "compression_ratio": 1.746031746031746, "no_speech_prob": 2.1907696918788133e-06}, {"id": 19, "seek": 8428, "start": 101.68, "end": 107.76, "text": " if I write a equals c, I'm asserting, that is, I am claiming that the values of a and", "tokens": [50364, 759, 291, 2464, 257, 6915, 257, 1804, 472, 11, 309, 1355, 992, 264, 2158, 295, 257, 281, 312, 2681, 281, 257, 1804, 472, 50648, 50648, 420, 26200, 264, 2158, 295, 257, 538, 472, 13, 50842, 50842, 407, 264, 15187, 12973, 294, 17720, 307, 819, 813, 3494, 19810, 626, 294, 18666, 11, 689, 51234, 51234, 498, 286, 2464, 257, 6915, 269, 11, 286, 478, 1256, 27187, 11, 300, 307, 11, 286, 669, 19232, 300, 264, 4190, 295, 257, 293, 51538, 51538, 269, 366, 2681, 281, 1184, 661, 13, 51678, 51678], "temperature": 0.0, "avg_logprob": -0.12089056497091775, "compression_ratio": 1.746031746031746, "no_speech_prob": 2.1907696918788133e-06}, {"id": 20, "seek": 8428, "start": 107.76, "end": 110.56, "text": " c are equal to each other.", "tokens": [50364, 759, 291, 2464, 257, 6915, 257, 1804, 472, 11, 309, 1355, 992, 264, 2158, 295, 257, 281, 312, 2681, 281, 257, 1804, 472, 50648, 50648, 420, 26200, 264, 2158, 295, 257, 538, 472, 13, 50842, 50842, 407, 264, 15187, 12973, 294, 17720, 307, 819, 813, 3494, 19810, 626, 294, 18666, 11, 689, 51234, 51234, 498, 286, 2464, 257, 6915, 269, 11, 286, 478, 1256, 27187, 11, 300, 307, 11, 286, 669, 19232, 300, 264, 4190, 295, 257, 293, 51538, 51538, 269, 366, 2681, 281, 1184, 661, 13, 51678, 51678], "temperature": 0.0, "avg_logprob": -0.12089056497091775, "compression_ratio": 1.746031746031746, "no_speech_prob": 2.1907696918788133e-06}, {"id": 21, "seek": 11056, "start": 110.56, "end": 115.32000000000001, "text": " And hopefully I will never write a truth assertion a equals a plus one because, you know, that", "tokens": [50364, 400, 4696, 286, 486, 1128, 2464, 257, 3494, 19810, 313, 257, 6915, 257, 1804, 472, 570, 11, 291, 458, 11, 300, 50602, 50602, 445, 393, 380, 6264, 312, 2074, 13, 50752, 50752, 407, 294, 15329, 293, 294, 661, 9410, 8650, 11, 3494, 19810, 626, 366, 2171, 3720, 382, 51046, 51046, 6915, 6915, 13, 51138, 51138, 407, 291, 815, 536, 3089, 300, 1619, 257, 6915, 6915, 269, 498, 291, 434, 4997, 1968, 257, 307, 2681, 281, 51428, 51428, 269, 13, 51478, 51478, 583, 294, 5221, 24657, 11, 382, 321, 10286, 379, 764, 309, 11, 411, 294, 613, 2145, 11, 264, 2681, 1465, 51758, 51758], "temperature": 0.0, "avg_logprob": -0.1198516573224749, "compression_ratio": 1.6518218623481782, "no_speech_prob": 3.844904313154984e-06}, {"id": 22, "seek": 11056, "start": 115.32000000000001, "end": 118.32000000000001, "text": " just can't possibly be true.", "tokens": [50364, 400, 4696, 286, 486, 1128, 2464, 257, 3494, 19810, 313, 257, 6915, 257, 1804, 472, 570, 11, 291, 458, 11, 300, 50602, 50602, 445, 393, 380, 6264, 312, 2074, 13, 50752, 50752, 407, 294, 15329, 293, 294, 661, 9410, 8650, 11, 3494, 19810, 626, 366, 2171, 3720, 382, 51046, 51046, 6915, 6915, 13, 51138, 51138, 407, 291, 815, 536, 3089, 300, 1619, 257, 6915, 6915, 269, 498, 291, 434, 4997, 1968, 257, 307, 2681, 281, 51428, 51428, 269, 13, 51478, 51478, 583, 294, 5221, 24657, 11, 382, 321, 10286, 379, 764, 309, 11, 411, 294, 613, 2145, 11, 264, 2681, 1465, 51758, 51758], "temperature": 0.0, "avg_logprob": -0.1198516573224749, "compression_ratio": 1.6518218623481782, "no_speech_prob": 3.844904313154984e-06}, {"id": 23, "seek": 11056, "start": 118.32000000000001, "end": 124.2, "text": " So in Python and in other programming languages, truth assertions are sometimes written as", "tokens": [50364, 400, 4696, 286, 486, 1128, 2464, 257, 3494, 19810, 313, 257, 6915, 257, 1804, 472, 570, 11, 291, 458, 11, 300, 50602, 50602, 445, 393, 380, 6264, 312, 2074, 13, 50752, 50752, 407, 294, 15329, 293, 294, 661, 9410, 8650, 11, 3494, 19810, 626, 366, 2171, 3720, 382, 51046, 51046, 6915, 6915, 13, 51138, 51138, 407, 291, 815, 536, 3089, 300, 1619, 257, 6915, 6915, 269, 498, 291, 434, 4997, 1968, 257, 307, 2681, 281, 51428, 51428, 269, 13, 51478, 51478, 583, 294, 5221, 24657, 11, 382, 321, 10286, 379, 764, 309, 11, 411, 294, 613, 2145, 11, 264, 2681, 1465, 51758, 51758], "temperature": 0.0, "avg_logprob": -0.1198516573224749, "compression_ratio": 1.6518218623481782, "no_speech_prob": 3.844904313154984e-06}, {"id": 24, "seek": 11056, "start": 124.2, "end": 126.04, "text": " equals equals.", "tokens": [50364, 400, 4696, 286, 486, 1128, 2464, 257, 3494, 19810, 313, 257, 6915, 257, 1804, 472, 570, 11, 291, 458, 11, 300, 50602, 50602, 445, 393, 380, 6264, 312, 2074, 13, 50752, 50752, 407, 294, 15329, 293, 294, 661, 9410, 8650, 11, 3494, 19810, 626, 366, 2171, 3720, 382, 51046, 51046, 6915, 6915, 13, 51138, 51138, 407, 291, 815, 536, 3089, 300, 1619, 257, 6915, 6915, 269, 498, 291, 434, 4997, 1968, 257, 307, 2681, 281, 51428, 51428, 269, 13, 51478, 51478, 583, 294, 5221, 24657, 11, 382, 321, 10286, 379, 764, 309, 11, 411, 294, 613, 2145, 11, 264, 2681, 1465, 51758, 51758], "temperature": 0.0, "avg_logprob": -0.1198516573224749, "compression_ratio": 1.6518218623481782, "no_speech_prob": 3.844904313154984e-06}, {"id": 25, "seek": 11056, "start": 126.04, "end": 131.84, "text": " So you may see code that says a equals equals c if you're testing whether a is equal to", "tokens": [50364, 400, 4696, 286, 486, 1128, 2464, 257, 3494, 19810, 313, 257, 6915, 257, 1804, 472, 570, 11, 291, 458, 11, 300, 50602, 50602, 445, 393, 380, 6264, 312, 2074, 13, 50752, 50752, 407, 294, 15329, 293, 294, 661, 9410, 8650, 11, 3494, 19810, 626, 366, 2171, 3720, 382, 51046, 51046, 6915, 6915, 13, 51138, 51138, 407, 291, 815, 536, 3089, 300, 1619, 257, 6915, 6915, 269, 498, 291, 434, 4997, 1968, 257, 307, 2681, 281, 51428, 51428, 269, 13, 51478, 51478, 583, 294, 5221, 24657, 11, 382, 321, 10286, 379, 764, 309, 11, 411, 294, 613, 2145, 11, 264, 2681, 1465, 51758, 51758], "temperature": 0.0, "avg_logprob": -0.1198516573224749, "compression_ratio": 1.6518218623481782, "no_speech_prob": 3.844904313154984e-06}, {"id": 26, "seek": 11056, "start": 131.84, "end": 132.84, "text": " c.", "tokens": [50364, 400, 4696, 286, 486, 1128, 2464, 257, 3494, 19810, 313, 257, 6915, 257, 1804, 472, 570, 11, 291, 458, 11, 300, 50602, 50602, 445, 393, 380, 6264, 312, 2074, 13, 50752, 50752, 407, 294, 15329, 293, 294, 661, 9410, 8650, 11, 3494, 19810, 626, 366, 2171, 3720, 382, 51046, 51046, 6915, 6915, 13, 51138, 51138, 407, 291, 815, 536, 3089, 300, 1619, 257, 6915, 6915, 269, 498, 291, 434, 4997, 1968, 257, 307, 2681, 281, 51428, 51428, 269, 13, 51478, 51478, 583, 294, 5221, 24657, 11, 382, 321, 10286, 379, 764, 309, 11, 411, 294, 613, 2145, 11, 264, 2681, 1465, 51758, 51758], "temperature": 0.0, "avg_logprob": -0.1198516573224749, "compression_ratio": 1.6518218623481782, "no_speech_prob": 3.844904313154984e-06}, {"id": 27, "seek": 11056, "start": 132.84, "end": 138.44, "text": " But in math notation, as we conventionally use it, like in these videos, the equal sign", "tokens": [50364, 400, 4696, 286, 486, 1128, 2464, 257, 3494, 19810, 313, 257, 6915, 257, 1804, 472, 570, 11, 291, 458, 11, 300, 50602, 50602, 445, 393, 380, 6264, 312, 2074, 13, 50752, 50752, 407, 294, 15329, 293, 294, 661, 9410, 8650, 11, 3494, 19810, 626, 366, 2171, 3720, 382, 51046, 51046, 6915, 6915, 13, 51138, 51138, 407, 291, 815, 536, 3089, 300, 1619, 257, 6915, 6915, 269, 498, 291, 434, 4997, 1968, 257, 307, 2681, 281, 51428, 51428, 269, 13, 51478, 51478, 583, 294, 5221, 24657, 11, 382, 321, 10286, 379, 764, 309, 11, 411, 294, 613, 2145, 11, 264, 2681, 1465, 51758, 51758], "temperature": 0.0, "avg_logprob": -0.1198516573224749, "compression_ratio": 1.6518218623481782, "no_speech_prob": 3.844904313154984e-06}, {"id": 28, "seek": 13844, "start": 138.44, "end": 143.4, "text": " can be used for either assignments or for truth assertion.", "tokens": [50364, 393, 312, 1143, 337, 2139, 22546, 420, 337, 3494, 19810, 313, 13, 50612, 50612, 400, 370, 286, 853, 281, 652, 988, 309, 311, 1850, 562, 286, 2464, 364, 2681, 1465, 11, 1968, 321, 434, 49602, 50842, 50842, 257, 2158, 281, 257, 7006, 420, 1968, 321, 434, 1256, 27187, 264, 3494, 295, 264, 14949, 295, 732, 4190, 13, 51220, 51220, 823, 718, 311, 9192, 544, 8760, 666, 437, 264, 16944, 294, 341, 5367, 1355, 13, 51470, 51470], "temperature": 0.0, "avg_logprob": -0.11456218132605919, "compression_ratio": 1.631578947368421, "no_speech_prob": 3.905412995663937e-06}, {"id": 29, "seek": 13844, "start": 143.4, "end": 148.0, "text": " And so I try to make sure it's clear when I write an equal sign, whether we're assigning", "tokens": [50364, 393, 312, 1143, 337, 2139, 22546, 420, 337, 3494, 19810, 313, 13, 50612, 50612, 400, 370, 286, 853, 281, 652, 988, 309, 311, 1850, 562, 286, 2464, 364, 2681, 1465, 11, 1968, 321, 434, 49602, 50842, 50842, 257, 2158, 281, 257, 7006, 420, 1968, 321, 434, 1256, 27187, 264, 3494, 295, 264, 14949, 295, 732, 4190, 13, 51220, 51220, 823, 718, 311, 9192, 544, 8760, 666, 437, 264, 16944, 294, 341, 5367, 1355, 13, 51470, 51470], "temperature": 0.0, "avg_logprob": -0.11456218132605919, "compression_ratio": 1.631578947368421, "no_speech_prob": 3.905412995663937e-06}, {"id": 30, "seek": 13844, "start": 148.0, "end": 155.56, "text": " a value to a variable or whether we're asserting the truth of the equality of two values.", "tokens": [50364, 393, 312, 1143, 337, 2139, 22546, 420, 337, 3494, 19810, 313, 13, 50612, 50612, 400, 370, 286, 853, 281, 652, 988, 309, 311, 1850, 562, 286, 2464, 364, 2681, 1465, 11, 1968, 321, 434, 49602, 50842, 50842, 257, 2158, 281, 257, 7006, 420, 1968, 321, 434, 1256, 27187, 264, 3494, 295, 264, 14949, 295, 732, 4190, 13, 51220, 51220, 823, 718, 311, 9192, 544, 8760, 666, 437, 264, 16944, 294, 341, 5367, 1355, 13, 51470, 51470], "temperature": 0.0, "avg_logprob": -0.11456218132605919, "compression_ratio": 1.631578947368421, "no_speech_prob": 3.905412995663937e-06}, {"id": 31, "seek": 13844, "start": 155.56, "end": 160.56, "text": " Now let's dive more deeply into what the symbols in this equation means.", "tokens": [50364, 393, 312, 1143, 337, 2139, 22546, 420, 337, 3494, 19810, 313, 13, 50612, 50612, 400, 370, 286, 853, 281, 652, 988, 309, 311, 1850, 562, 286, 2464, 364, 2681, 1465, 11, 1968, 321, 434, 49602, 50842, 50842, 257, 2158, 281, 257, 7006, 420, 1968, 321, 434, 1256, 27187, 264, 3494, 295, 264, 14949, 295, 732, 4190, 13, 51220, 51220, 823, 718, 311, 9192, 544, 8760, 666, 437, 264, 16944, 294, 341, 5367, 1355, 13, 51470, 51470], "temperature": 0.0, "avg_logprob": -0.11456218132605919, "compression_ratio": 1.631578947368421, "no_speech_prob": 3.905412995663937e-06}, {"id": 32, "seek": 16056, "start": 160.56, "end": 169.28, "text": " The symbol here is the Greek alphabet alpha, and in this equation, alpha is also called", "tokens": [50364, 440, 5986, 510, 307, 264, 10281, 23339, 8961, 11, 293, 294, 341, 5367, 11, 8961, 307, 611, 1219, 50800, 50800, 264, 2539, 3314, 13, 50900, 50900, 440, 2539, 3314, 307, 2673, 257, 1359, 3353, 1230, 1296, 4018, 293, 472, 11, 293, 309, 1062, 51147, 51147, 312, 584, 1958, 13, 10607, 13, 51332, 51332, 708, 8961, 775, 307, 309, 1936, 9003, 577, 955, 295, 257, 1823, 291, 747, 29929, 13, 51641, 51641], "temperature": 0.0, "avg_logprob": -0.113873155149695, "compression_ratio": 1.532258064516129, "no_speech_prob": 1.4970527445257176e-05}, {"id": 33, "seek": 16056, "start": 169.28, "end": 171.28, "text": " the learning rate.", "tokens": [50364, 440, 5986, 510, 307, 264, 10281, 23339, 8961, 11, 293, 294, 341, 5367, 11, 8961, 307, 611, 1219, 50800, 50800, 264, 2539, 3314, 13, 50900, 50900, 440, 2539, 3314, 307, 2673, 257, 1359, 3353, 1230, 1296, 4018, 293, 472, 11, 293, 309, 1062, 51147, 51147, 312, 584, 1958, 13, 10607, 13, 51332, 51332, 708, 8961, 775, 307, 309, 1936, 9003, 577, 955, 295, 257, 1823, 291, 747, 29929, 13, 51641, 51641], "temperature": 0.0, "avg_logprob": -0.113873155149695, "compression_ratio": 1.532258064516129, "no_speech_prob": 1.4970527445257176e-05}, {"id": 34, "seek": 16056, "start": 171.28, "end": 176.22, "text": " The learning rate is usually a small positive number between zero and one, and it might", "tokens": [50364, 440, 5986, 510, 307, 264, 10281, 23339, 8961, 11, 293, 294, 341, 5367, 11, 8961, 307, 611, 1219, 50800, 50800, 264, 2539, 3314, 13, 50900, 50900, 440, 2539, 3314, 307, 2673, 257, 1359, 3353, 1230, 1296, 4018, 293, 472, 11, 293, 309, 1062, 51147, 51147, 312, 584, 1958, 13, 10607, 13, 51332, 51332, 708, 8961, 775, 307, 309, 1936, 9003, 577, 955, 295, 257, 1823, 291, 747, 29929, 13, 51641, 51641], "temperature": 0.0, "avg_logprob": -0.113873155149695, "compression_ratio": 1.532258064516129, "no_speech_prob": 1.4970527445257176e-05}, {"id": 35, "seek": 16056, "start": 176.22, "end": 179.92000000000002, "text": " be say 0.01.", "tokens": [50364, 440, 5986, 510, 307, 264, 10281, 23339, 8961, 11, 293, 294, 341, 5367, 11, 8961, 307, 611, 1219, 50800, 50800, 264, 2539, 3314, 13, 50900, 50900, 440, 2539, 3314, 307, 2673, 257, 1359, 3353, 1230, 1296, 4018, 293, 472, 11, 293, 309, 1062, 51147, 51147, 312, 584, 1958, 13, 10607, 13, 51332, 51332, 708, 8961, 775, 307, 309, 1936, 9003, 577, 955, 295, 257, 1823, 291, 747, 29929, 13, 51641, 51641], "temperature": 0.0, "avg_logprob": -0.113873155149695, "compression_ratio": 1.532258064516129, "no_speech_prob": 1.4970527445257176e-05}, {"id": 36, "seek": 16056, "start": 179.92000000000002, "end": 186.1, "text": " What alpha does is it basically controls how big of a step you take downhill.", "tokens": [50364, 440, 5986, 510, 307, 264, 10281, 23339, 8961, 11, 293, 294, 341, 5367, 11, 8961, 307, 611, 1219, 50800, 50800, 264, 2539, 3314, 13, 50900, 50900, 440, 2539, 3314, 307, 2673, 257, 1359, 3353, 1230, 1296, 4018, 293, 472, 11, 293, 309, 1062, 51147, 51147, 312, 584, 1958, 13, 10607, 13, 51332, 51332, 708, 8961, 775, 307, 309, 1936, 9003, 577, 955, 295, 257, 1823, 291, 747, 29929, 13, 51641, 51641], "temperature": 0.0, "avg_logprob": -0.113873155149695, "compression_ratio": 1.532258064516129, "no_speech_prob": 1.4970527445257176e-05}, {"id": 37, "seek": 18610, "start": 186.1, "end": 192.88, "text": " So if alpha is very large, then that corresponds to a very aggressive gradient descent procedure", "tokens": [50364, 407, 498, 8961, 307, 588, 2416, 11, 550, 300, 23249, 281, 257, 588, 10762, 16235, 23475, 10747, 50703, 50703, 689, 291, 434, 1382, 281, 747, 2603, 4439, 29929, 13, 50862, 50862, 400, 498, 8961, 307, 588, 1359, 11, 550, 291, 1116, 312, 1940, 1359, 3186, 4439, 29929, 13, 51123, 51123, 492, 603, 808, 646, 1780, 281, 43098, 544, 8760, 666, 577, 281, 2826, 257, 665, 2539, 3314, 8961, 13, 51413, 51413, 400, 2721, 11, 341, 1433, 510, 11, 300, 311, 264, 13760, 1433, 295, 264, 2063, 2445, 508, 13, 51741, 51741], "temperature": 0.0, "avg_logprob": -0.09828248587987756, "compression_ratio": 1.670940170940171, "no_speech_prob": 2.058017344097607e-06}, {"id": 38, "seek": 18610, "start": 192.88, "end": 196.06, "text": " where you're trying to take huge steps downhill.", "tokens": [50364, 407, 498, 8961, 307, 588, 2416, 11, 550, 300, 23249, 281, 257, 588, 10762, 16235, 23475, 10747, 50703, 50703, 689, 291, 434, 1382, 281, 747, 2603, 4439, 29929, 13, 50862, 50862, 400, 498, 8961, 307, 588, 1359, 11, 550, 291, 1116, 312, 1940, 1359, 3186, 4439, 29929, 13, 51123, 51123, 492, 603, 808, 646, 1780, 281, 43098, 544, 8760, 666, 577, 281, 2826, 257, 665, 2539, 3314, 8961, 13, 51413, 51413, 400, 2721, 11, 341, 1433, 510, 11, 300, 311, 264, 13760, 1433, 295, 264, 2063, 2445, 508, 13, 51741, 51741], "temperature": 0.0, "avg_logprob": -0.09828248587987756, "compression_ratio": 1.670940170940171, "no_speech_prob": 2.058017344097607e-06}, {"id": 39, "seek": 18610, "start": 196.06, "end": 201.28, "text": " And if alpha is very small, then you'd be taking small baby steps downhill.", "tokens": [50364, 407, 498, 8961, 307, 588, 2416, 11, 550, 300, 23249, 281, 257, 588, 10762, 16235, 23475, 10747, 50703, 50703, 689, 291, 434, 1382, 281, 747, 2603, 4439, 29929, 13, 50862, 50862, 400, 498, 8961, 307, 588, 1359, 11, 550, 291, 1116, 312, 1940, 1359, 3186, 4439, 29929, 13, 51123, 51123, 492, 603, 808, 646, 1780, 281, 43098, 544, 8760, 666, 577, 281, 2826, 257, 665, 2539, 3314, 8961, 13, 51413, 51413, 400, 2721, 11, 341, 1433, 510, 11, 300, 311, 264, 13760, 1433, 295, 264, 2063, 2445, 508, 13, 51741, 51741], "temperature": 0.0, "avg_logprob": -0.09828248587987756, "compression_ratio": 1.670940170940171, "no_speech_prob": 2.058017344097607e-06}, {"id": 40, "seek": 18610, "start": 201.28, "end": 207.07999999999998, "text": " We'll come back later to delve more deeply into how to choose a good learning rate alpha.", "tokens": [50364, 407, 498, 8961, 307, 588, 2416, 11, 550, 300, 23249, 281, 257, 588, 10762, 16235, 23475, 10747, 50703, 50703, 689, 291, 434, 1382, 281, 747, 2603, 4439, 29929, 13, 50862, 50862, 400, 498, 8961, 307, 588, 1359, 11, 550, 291, 1116, 312, 1940, 1359, 3186, 4439, 29929, 13, 51123, 51123, 492, 603, 808, 646, 1780, 281, 43098, 544, 8760, 666, 577, 281, 2826, 257, 665, 2539, 3314, 8961, 13, 51413, 51413, 400, 2721, 11, 341, 1433, 510, 11, 300, 311, 264, 13760, 1433, 295, 264, 2063, 2445, 508, 13, 51741, 51741], "temperature": 0.0, "avg_logprob": -0.09828248587987756, "compression_ratio": 1.670940170940171, "no_speech_prob": 2.058017344097607e-06}, {"id": 41, "seek": 18610, "start": 207.07999999999998, "end": 213.64, "text": " And finally, this term here, that's the derivative term of the cost function J.", "tokens": [50364, 407, 498, 8961, 307, 588, 2416, 11, 550, 300, 23249, 281, 257, 588, 10762, 16235, 23475, 10747, 50703, 50703, 689, 291, 434, 1382, 281, 747, 2603, 4439, 29929, 13, 50862, 50862, 400, 498, 8961, 307, 588, 1359, 11, 550, 291, 1116, 312, 1940, 1359, 3186, 4439, 29929, 13, 51123, 51123, 492, 603, 808, 646, 1780, 281, 43098, 544, 8760, 666, 577, 281, 2826, 257, 665, 2539, 3314, 8961, 13, 51413, 51413, 400, 2721, 11, 341, 1433, 510, 11, 300, 311, 264, 13760, 1433, 295, 264, 2063, 2445, 508, 13, 51741, 51741], "temperature": 0.0, "avg_logprob": -0.09828248587987756, "compression_ratio": 1.670940170940171, "no_speech_prob": 2.058017344097607e-06}, {"id": 42, "seek": 21364, "start": 213.64, "end": 218.35999999999999, "text": " Let's not worry about the details of this derivative right now, but later on you get", "tokens": [50364, 961, 311, 406, 3292, 466, 264, 4365, 295, 341, 13760, 558, 586, 11, 457, 1780, 322, 291, 483, 50600, 50600, 281, 536, 544, 466, 264, 13760, 1433, 13, 50744, 50744, 583, 337, 586, 11, 291, 393, 519, 295, 341, 13760, 1433, 300, 286, 12804, 257, 2258, 8938, 2424, 926, 382, 3585, 51004, 51004, 291, 294, 597, 3513, 291, 528, 281, 747, 428, 3186, 1823, 13, 51186, 51186, 400, 294, 6562, 365, 264, 2539, 3314, 8961, 11, 309, 611, 24799, 264, 2744, 295, 264, 51452, 51452, 4439, 291, 528, 281, 747, 29929, 13, 51612, 51612], "temperature": 0.0, "avg_logprob": -0.13037767012914023, "compression_ratio": 1.722466960352423, "no_speech_prob": 3.500750381135731e-06}, {"id": 43, "seek": 21364, "start": 218.35999999999999, "end": 221.23999999999998, "text": " to see more about the derivative term.", "tokens": [50364, 961, 311, 406, 3292, 466, 264, 4365, 295, 341, 13760, 558, 586, 11, 457, 1780, 322, 291, 483, 50600, 50600, 281, 536, 544, 466, 264, 13760, 1433, 13, 50744, 50744, 583, 337, 586, 11, 291, 393, 519, 295, 341, 13760, 1433, 300, 286, 12804, 257, 2258, 8938, 2424, 926, 382, 3585, 51004, 51004, 291, 294, 597, 3513, 291, 528, 281, 747, 428, 3186, 1823, 13, 51186, 51186, 400, 294, 6562, 365, 264, 2539, 3314, 8961, 11, 309, 611, 24799, 264, 2744, 295, 264, 51452, 51452, 4439, 291, 528, 281, 747, 29929, 13, 51612, 51612], "temperature": 0.0, "avg_logprob": -0.13037767012914023, "compression_ratio": 1.722466960352423, "no_speech_prob": 3.500750381135731e-06}, {"id": 44, "seek": 21364, "start": 221.23999999999998, "end": 226.44, "text": " But for now, you can think of this derivative term that I drew a magenta box around as telling", "tokens": [50364, 961, 311, 406, 3292, 466, 264, 4365, 295, 341, 13760, 558, 586, 11, 457, 1780, 322, 291, 483, 50600, 50600, 281, 536, 544, 466, 264, 13760, 1433, 13, 50744, 50744, 583, 337, 586, 11, 291, 393, 519, 295, 341, 13760, 1433, 300, 286, 12804, 257, 2258, 8938, 2424, 926, 382, 3585, 51004, 51004, 291, 294, 597, 3513, 291, 528, 281, 747, 428, 3186, 1823, 13, 51186, 51186, 400, 294, 6562, 365, 264, 2539, 3314, 8961, 11, 309, 611, 24799, 264, 2744, 295, 264, 51452, 51452, 4439, 291, 528, 281, 747, 29929, 13, 51612, 51612], "temperature": 0.0, "avg_logprob": -0.13037767012914023, "compression_ratio": 1.722466960352423, "no_speech_prob": 3.500750381135731e-06}, {"id": 45, "seek": 21364, "start": 226.44, "end": 230.07999999999998, "text": " you in which direction you want to take your baby step.", "tokens": [50364, 961, 311, 406, 3292, 466, 264, 4365, 295, 341, 13760, 558, 586, 11, 457, 1780, 322, 291, 483, 50600, 50600, 281, 536, 544, 466, 264, 13760, 1433, 13, 50744, 50744, 583, 337, 586, 11, 291, 393, 519, 295, 341, 13760, 1433, 300, 286, 12804, 257, 2258, 8938, 2424, 926, 382, 3585, 51004, 51004, 291, 294, 597, 3513, 291, 528, 281, 747, 428, 3186, 1823, 13, 51186, 51186, 400, 294, 6562, 365, 264, 2539, 3314, 8961, 11, 309, 611, 24799, 264, 2744, 295, 264, 51452, 51452, 4439, 291, 528, 281, 747, 29929, 13, 51612, 51612], "temperature": 0.0, "avg_logprob": -0.13037767012914023, "compression_ratio": 1.722466960352423, "no_speech_prob": 3.500750381135731e-06}, {"id": 46, "seek": 21364, "start": 230.07999999999998, "end": 235.39999999999998, "text": " And in combination with the learning rate alpha, it also determines the size of the", "tokens": [50364, 961, 311, 406, 3292, 466, 264, 4365, 295, 341, 13760, 558, 586, 11, 457, 1780, 322, 291, 483, 50600, 50600, 281, 536, 544, 466, 264, 13760, 1433, 13, 50744, 50744, 583, 337, 586, 11, 291, 393, 519, 295, 341, 13760, 1433, 300, 286, 12804, 257, 2258, 8938, 2424, 926, 382, 3585, 51004, 51004, 291, 294, 597, 3513, 291, 528, 281, 747, 428, 3186, 1823, 13, 51186, 51186, 400, 294, 6562, 365, 264, 2539, 3314, 8961, 11, 309, 611, 24799, 264, 2744, 295, 264, 51452, 51452, 4439, 291, 528, 281, 747, 29929, 13, 51612, 51612], "temperature": 0.0, "avg_logprob": -0.13037767012914023, "compression_ratio": 1.722466960352423, "no_speech_prob": 3.500750381135731e-06}, {"id": 47, "seek": 21364, "start": 235.39999999999998, "end": 238.6, "text": " steps you want to take downhill.", "tokens": [50364, 961, 311, 406, 3292, 466, 264, 4365, 295, 341, 13760, 558, 586, 11, 457, 1780, 322, 291, 483, 50600, 50600, 281, 536, 544, 466, 264, 13760, 1433, 13, 50744, 50744, 583, 337, 586, 11, 291, 393, 519, 295, 341, 13760, 1433, 300, 286, 12804, 257, 2258, 8938, 2424, 926, 382, 3585, 51004, 51004, 291, 294, 597, 3513, 291, 528, 281, 747, 428, 3186, 1823, 13, 51186, 51186, 400, 294, 6562, 365, 264, 2539, 3314, 8961, 11, 309, 611, 24799, 264, 2744, 295, 264, 51452, 51452, 4439, 291, 528, 281, 747, 29929, 13, 51612, 51612], "temperature": 0.0, "avg_logprob": -0.13037767012914023, "compression_ratio": 1.722466960352423, "no_speech_prob": 3.500750381135731e-06}, {"id": 48, "seek": 23860, "start": 238.6, "end": 244.12, "text": " Now I do want to mention that derivatives come from calculus, and even if you aren't", "tokens": [50364, 823, 286, 360, 528, 281, 2152, 300, 33733, 808, 490, 33400, 11, 293, 754, 498, 291, 3212, 380, 50640, 50640, 4963, 365, 33400, 11, 500, 380, 3292, 466, 309, 13, 50808, 50808, 2754, 1553, 5276, 604, 33400, 11, 291, 603, 312, 1075, 281, 2573, 484, 439, 291, 643, 281, 458, 50986, 50986, 466, 341, 13760, 1433, 294, 341, 960, 293, 264, 958, 13, 51220, 51220, 1485, 544, 551, 13, 51294, 51294, 5459, 428, 2316, 575, 732, 9834, 11, 406, 445, 343, 11, 457, 611, 363, 13, 407, 291, 611, 362, 364, 15187, 51644, 51644], "temperature": 0.0, "avg_logprob": -0.131152073542277, "compression_ratio": 1.6075949367088607, "no_speech_prob": 4.936918230669107e-06}, {"id": 49, "seek": 23860, "start": 244.12, "end": 247.48, "text": " familiar with calculus, don't worry about it.", "tokens": [50364, 823, 286, 360, 528, 281, 2152, 300, 33733, 808, 490, 33400, 11, 293, 754, 498, 291, 3212, 380, 50640, 50640, 4963, 365, 33400, 11, 500, 380, 3292, 466, 309, 13, 50808, 50808, 2754, 1553, 5276, 604, 33400, 11, 291, 603, 312, 1075, 281, 2573, 484, 439, 291, 643, 281, 458, 50986, 50986, 466, 341, 13760, 1433, 294, 341, 960, 293, 264, 958, 13, 51220, 51220, 1485, 544, 551, 13, 51294, 51294, 5459, 428, 2316, 575, 732, 9834, 11, 406, 445, 343, 11, 457, 611, 363, 13, 407, 291, 611, 362, 364, 15187, 51644, 51644], "temperature": 0.0, "avg_logprob": -0.131152073542277, "compression_ratio": 1.6075949367088607, "no_speech_prob": 4.936918230669107e-06}, {"id": 50, "seek": 23860, "start": 247.48, "end": 251.04, "text": " Even without knowing any calculus, you'll be able to figure out all you need to know", "tokens": [50364, 823, 286, 360, 528, 281, 2152, 300, 33733, 808, 490, 33400, 11, 293, 754, 498, 291, 3212, 380, 50640, 50640, 4963, 365, 33400, 11, 500, 380, 3292, 466, 309, 13, 50808, 50808, 2754, 1553, 5276, 604, 33400, 11, 291, 603, 312, 1075, 281, 2573, 484, 439, 291, 643, 281, 458, 50986, 50986, 466, 341, 13760, 1433, 294, 341, 960, 293, 264, 958, 13, 51220, 51220, 1485, 544, 551, 13, 51294, 51294, 5459, 428, 2316, 575, 732, 9834, 11, 406, 445, 343, 11, 457, 611, 363, 13, 407, 291, 611, 362, 364, 15187, 51644, 51644], "temperature": 0.0, "avg_logprob": -0.131152073542277, "compression_ratio": 1.6075949367088607, "no_speech_prob": 4.936918230669107e-06}, {"id": 51, "seek": 23860, "start": 251.04, "end": 255.72, "text": " about this derivative term in this video and the next.", "tokens": [50364, 823, 286, 360, 528, 281, 2152, 300, 33733, 808, 490, 33400, 11, 293, 754, 498, 291, 3212, 380, 50640, 50640, 4963, 365, 33400, 11, 500, 380, 3292, 466, 309, 13, 50808, 50808, 2754, 1553, 5276, 604, 33400, 11, 291, 603, 312, 1075, 281, 2573, 484, 439, 291, 643, 281, 458, 50986, 50986, 466, 341, 13760, 1433, 294, 341, 960, 293, 264, 958, 13, 51220, 51220, 1485, 544, 551, 13, 51294, 51294, 5459, 428, 2316, 575, 732, 9834, 11, 406, 445, 343, 11, 457, 611, 363, 13, 407, 291, 611, 362, 364, 15187, 51644, 51644], "temperature": 0.0, "avg_logprob": -0.131152073542277, "compression_ratio": 1.6075949367088607, "no_speech_prob": 4.936918230669107e-06}, {"id": 52, "seek": 23860, "start": 255.72, "end": 257.2, "text": " One more thing.", "tokens": [50364, 823, 286, 360, 528, 281, 2152, 300, 33733, 808, 490, 33400, 11, 293, 754, 498, 291, 3212, 380, 50640, 50640, 4963, 365, 33400, 11, 500, 380, 3292, 466, 309, 13, 50808, 50808, 2754, 1553, 5276, 604, 33400, 11, 291, 603, 312, 1075, 281, 2573, 484, 439, 291, 643, 281, 458, 50986, 50986, 466, 341, 13760, 1433, 294, 341, 960, 293, 264, 958, 13, 51220, 51220, 1485, 544, 551, 13, 51294, 51294, 5459, 428, 2316, 575, 732, 9834, 11, 406, 445, 343, 11, 457, 611, 363, 13, 407, 291, 611, 362, 364, 15187, 51644, 51644], "temperature": 0.0, "avg_logprob": -0.131152073542277, "compression_ratio": 1.6075949367088607, "no_speech_prob": 4.936918230669107e-06}, {"id": 53, "seek": 23860, "start": 257.2, "end": 264.2, "text": " Remember your model has two parameters, not just W, but also B. So you also have an assignment", "tokens": [50364, 823, 286, 360, 528, 281, 2152, 300, 33733, 808, 490, 33400, 11, 293, 754, 498, 291, 3212, 380, 50640, 50640, 4963, 365, 33400, 11, 500, 380, 3292, 466, 309, 13, 50808, 50808, 2754, 1553, 5276, 604, 33400, 11, 291, 603, 312, 1075, 281, 2573, 484, 439, 291, 643, 281, 458, 50986, 50986, 466, 341, 13760, 1433, 294, 341, 960, 293, 264, 958, 13, 51220, 51220, 1485, 544, 551, 13, 51294, 51294, 5459, 428, 2316, 575, 732, 9834, 11, 406, 445, 343, 11, 457, 611, 363, 13, 407, 291, 611, 362, 364, 15187, 51644, 51644], "temperature": 0.0, "avg_logprob": -0.131152073542277, "compression_ratio": 1.6075949367088607, "no_speech_prob": 4.936918230669107e-06}, {"id": 54, "seek": 26420, "start": 264.2, "end": 268.76, "text": " operation to update the parameter B that looks very similar.", "tokens": [50364, 6916, 281, 5623, 264, 13075, 363, 300, 1542, 588, 2531, 13, 50592, 50592, 363, 307, 13279, 264, 422, 2158, 295, 363, 3175, 264, 2539, 3314, 8961, 1413, 341, 4748, 819, 13760, 51092, 51092, 1433, 413, 670, 43116, 295, 508, 295, 343, 33, 13, 51318, 51318, 407, 1604, 294, 264, 4295, 295, 264, 3753, 7542, 689, 291, 434, 1940, 3186, 4439, 1826, 291, 483, 51594, 51594, 281, 264, 2767, 295, 264, 17636, 30, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.17741799354553223, "compression_ratio": 1.4736842105263157, "no_speech_prob": 2.0580141608661506e-06}, {"id": 55, "seek": 26420, "start": 268.76, "end": 278.76, "text": " B is assigned the O value of B minus the learning rate alpha times this slightly different derivative", "tokens": [50364, 6916, 281, 5623, 264, 13075, 363, 300, 1542, 588, 2531, 13, 50592, 50592, 363, 307, 13279, 264, 422, 2158, 295, 363, 3175, 264, 2539, 3314, 8961, 1413, 341, 4748, 819, 13760, 51092, 51092, 1433, 413, 670, 43116, 295, 508, 295, 343, 33, 13, 51318, 51318, 407, 1604, 294, 264, 4295, 295, 264, 3753, 7542, 689, 291, 434, 1940, 3186, 4439, 1826, 291, 483, 51594, 51594, 281, 264, 2767, 295, 264, 17636, 30, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.17741799354553223, "compression_ratio": 1.4736842105263157, "no_speech_prob": 2.0580141608661506e-06}, {"id": 56, "seek": 26420, "start": 278.76, "end": 283.28, "text": " term D over dB of J of WB.", "tokens": [50364, 6916, 281, 5623, 264, 13075, 363, 300, 1542, 588, 2531, 13, 50592, 50592, 363, 307, 13279, 264, 422, 2158, 295, 363, 3175, 264, 2539, 3314, 8961, 1413, 341, 4748, 819, 13760, 51092, 51092, 1433, 413, 670, 43116, 295, 508, 295, 343, 33, 13, 51318, 51318, 407, 1604, 294, 264, 4295, 295, 264, 3753, 7542, 689, 291, 434, 1940, 3186, 4439, 1826, 291, 483, 51594, 51594, 281, 264, 2767, 295, 264, 17636, 30, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.17741799354553223, "compression_ratio": 1.4736842105263157, "no_speech_prob": 2.0580141608661506e-06}, {"id": 57, "seek": 26420, "start": 283.28, "end": 288.8, "text": " So remember in the graph of the surface plot where you're taking baby steps until you get", "tokens": [50364, 6916, 281, 5623, 264, 13075, 363, 300, 1542, 588, 2531, 13, 50592, 50592, 363, 307, 13279, 264, 422, 2158, 295, 363, 3175, 264, 2539, 3314, 8961, 1413, 341, 4748, 819, 13760, 51092, 51092, 1433, 413, 670, 43116, 295, 508, 295, 343, 33, 13, 51318, 51318, 407, 1604, 294, 264, 4295, 295, 264, 3753, 7542, 689, 291, 434, 1940, 3186, 4439, 1826, 291, 483, 51594, 51594, 281, 264, 2767, 295, 264, 17636, 30, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.17741799354553223, "compression_ratio": 1.4736842105263157, "no_speech_prob": 2.0580141608661506e-06}, {"id": 58, "seek": 26420, "start": 288.8, "end": 290.59999999999997, "text": " to the bottom of the valley?", "tokens": [50364, 6916, 281, 5623, 264, 13075, 363, 300, 1542, 588, 2531, 13, 50592, 50592, 363, 307, 13279, 264, 422, 2158, 295, 363, 3175, 264, 2539, 3314, 8961, 1413, 341, 4748, 819, 13760, 51092, 51092, 1433, 413, 670, 43116, 295, 508, 295, 343, 33, 13, 51318, 51318, 407, 1604, 294, 264, 4295, 295, 264, 3753, 7542, 689, 291, 434, 1940, 3186, 4439, 1826, 291, 483, 51594, 51594, 281, 264, 2767, 295, 264, 17636, 30, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.17741799354553223, "compression_ratio": 1.4736842105263157, "no_speech_prob": 2.0580141608661506e-06}, {"id": 59, "seek": 29060, "start": 290.6, "end": 296.08000000000004, "text": " Well, for the gradient descent algorithm, you're going to repeat these two update steps", "tokens": [50364, 1042, 11, 337, 264, 16235, 23475, 9284, 11, 291, 434, 516, 281, 7149, 613, 732, 5623, 4439, 50638, 50638, 1826, 264, 9284, 9652, 2880, 13, 50760, 50760, 400, 538, 9652, 2880, 11, 286, 914, 300, 291, 2524, 264, 935, 412, 257, 2654, 7285, 689, 264, 9834, 51046, 51046, 343, 293, 363, 572, 2854, 1319, 709, 365, 1184, 4497, 1823, 300, 291, 747, 13, 51364, 51364, 823, 456, 311, 472, 544, 13743, 2607, 466, 577, 281, 8944, 4445, 16235, 23475, 13, 51678, 51678], "temperature": 0.0, "avg_logprob": -0.11189406258719307, "compression_ratio": 1.6079295154185023, "no_speech_prob": 3.7851816614420386e-06}, {"id": 60, "seek": 29060, "start": 296.08000000000004, "end": 298.52000000000004, "text": " until the algorithm converges.", "tokens": [50364, 1042, 11, 337, 264, 16235, 23475, 9284, 11, 291, 434, 516, 281, 7149, 613, 732, 5623, 4439, 50638, 50638, 1826, 264, 9284, 9652, 2880, 13, 50760, 50760, 400, 538, 9652, 2880, 11, 286, 914, 300, 291, 2524, 264, 935, 412, 257, 2654, 7285, 689, 264, 9834, 51046, 51046, 343, 293, 363, 572, 2854, 1319, 709, 365, 1184, 4497, 1823, 300, 291, 747, 13, 51364, 51364, 823, 456, 311, 472, 544, 13743, 2607, 466, 577, 281, 8944, 4445, 16235, 23475, 13, 51678, 51678], "temperature": 0.0, "avg_logprob": -0.11189406258719307, "compression_ratio": 1.6079295154185023, "no_speech_prob": 3.7851816614420386e-06}, {"id": 61, "seek": 29060, "start": 298.52000000000004, "end": 304.24, "text": " And by converges, I mean that you reach the point at a local minimum where the parameters", "tokens": [50364, 1042, 11, 337, 264, 16235, 23475, 9284, 11, 291, 434, 516, 281, 7149, 613, 732, 5623, 4439, 50638, 50638, 1826, 264, 9284, 9652, 2880, 13, 50760, 50760, 400, 538, 9652, 2880, 11, 286, 914, 300, 291, 2524, 264, 935, 412, 257, 2654, 7285, 689, 264, 9834, 51046, 51046, 343, 293, 363, 572, 2854, 1319, 709, 365, 1184, 4497, 1823, 300, 291, 747, 13, 51364, 51364, 823, 456, 311, 472, 544, 13743, 2607, 466, 577, 281, 8944, 4445, 16235, 23475, 13, 51678, 51678], "temperature": 0.0, "avg_logprob": -0.11189406258719307, "compression_ratio": 1.6079295154185023, "no_speech_prob": 3.7851816614420386e-06}, {"id": 62, "seek": 29060, "start": 304.24, "end": 310.6, "text": " W and B no longer change much with each additional step that you take.", "tokens": [50364, 1042, 11, 337, 264, 16235, 23475, 9284, 11, 291, 434, 516, 281, 7149, 613, 732, 5623, 4439, 50638, 50638, 1826, 264, 9284, 9652, 2880, 13, 50760, 50760, 400, 538, 9652, 2880, 11, 286, 914, 300, 291, 2524, 264, 935, 412, 257, 2654, 7285, 689, 264, 9834, 51046, 51046, 343, 293, 363, 572, 2854, 1319, 709, 365, 1184, 4497, 1823, 300, 291, 747, 13, 51364, 51364, 823, 456, 311, 472, 544, 13743, 2607, 466, 577, 281, 8944, 4445, 16235, 23475, 13, 51678, 51678], "temperature": 0.0, "avg_logprob": -0.11189406258719307, "compression_ratio": 1.6079295154185023, "no_speech_prob": 3.7851816614420386e-06}, {"id": 63, "seek": 29060, "start": 310.6, "end": 316.88, "text": " Now there's one more subtle detail about how to correctly implement gradient descent.", "tokens": [50364, 1042, 11, 337, 264, 16235, 23475, 9284, 11, 291, 434, 516, 281, 7149, 613, 732, 5623, 4439, 50638, 50638, 1826, 264, 9284, 9652, 2880, 13, 50760, 50760, 400, 538, 9652, 2880, 11, 286, 914, 300, 291, 2524, 264, 935, 412, 257, 2654, 7285, 689, 264, 9834, 51046, 51046, 343, 293, 363, 572, 2854, 1319, 709, 365, 1184, 4497, 1823, 300, 291, 747, 13, 51364, 51364, 823, 456, 311, 472, 544, 13743, 2607, 466, 577, 281, 8944, 4445, 16235, 23475, 13, 51678, 51678], "temperature": 0.0, "avg_logprob": -0.11189406258719307, "compression_ratio": 1.6079295154185023, "no_speech_prob": 3.7851816614420386e-06}, {"id": 64, "seek": 31688, "start": 316.88, "end": 321.1, "text": " You're going to update two parameters W and B, right?", "tokens": [50364, 509, 434, 516, 281, 5623, 732, 9834, 343, 293, 363, 11, 558, 30, 50575, 50575, 407, 341, 5623, 2516, 1081, 337, 1293, 9834, 343, 293, 363, 13, 50851, 50851, 1485, 1021, 2607, 307, 300, 337, 16235, 23475, 11, 291, 528, 281, 16561, 5623, 51250, 51250, 343, 293, 363, 11, 3620, 291, 528, 281, 5623, 1293, 9834, 412, 264, 912, 565, 13, 51534, 51534, 708, 286, 914, 538, 300, 307, 300, 294, 341, 6114, 11, 291, 434, 516, 281, 5623, 343, 490, 264, 1331, 343, 281, 51862, 51862], "temperature": 0.0, "avg_logprob": -0.08847939566280065, "compression_ratio": 1.7839195979899498, "no_speech_prob": 3.5008142731385306e-06}, {"id": 65, "seek": 31688, "start": 321.1, "end": 326.62, "text": " So this update takes place for both parameters W and B.", "tokens": [50364, 509, 434, 516, 281, 5623, 732, 9834, 343, 293, 363, 11, 558, 30, 50575, 50575, 407, 341, 5623, 2516, 1081, 337, 1293, 9834, 343, 293, 363, 13, 50851, 50851, 1485, 1021, 2607, 307, 300, 337, 16235, 23475, 11, 291, 528, 281, 16561, 5623, 51250, 51250, 343, 293, 363, 11, 3620, 291, 528, 281, 5623, 1293, 9834, 412, 264, 912, 565, 13, 51534, 51534, 708, 286, 914, 538, 300, 307, 300, 294, 341, 6114, 11, 291, 434, 516, 281, 5623, 343, 490, 264, 1331, 343, 281, 51862, 51862], "temperature": 0.0, "avg_logprob": -0.08847939566280065, "compression_ratio": 1.7839195979899498, "no_speech_prob": 3.5008142731385306e-06}, {"id": 66, "seek": 31688, "start": 326.62, "end": 334.6, "text": " One important detail is that for gradient descent, you want to simultaneously update", "tokens": [50364, 509, 434, 516, 281, 5623, 732, 9834, 343, 293, 363, 11, 558, 30, 50575, 50575, 407, 341, 5623, 2516, 1081, 337, 1293, 9834, 343, 293, 363, 13, 50851, 50851, 1485, 1021, 2607, 307, 300, 337, 16235, 23475, 11, 291, 528, 281, 16561, 5623, 51250, 51250, 343, 293, 363, 11, 3620, 291, 528, 281, 5623, 1293, 9834, 412, 264, 912, 565, 13, 51534, 51534, 708, 286, 914, 538, 300, 307, 300, 294, 341, 6114, 11, 291, 434, 516, 281, 5623, 343, 490, 264, 1331, 343, 281, 51862, 51862], "temperature": 0.0, "avg_logprob": -0.08847939566280065, "compression_ratio": 1.7839195979899498, "no_speech_prob": 3.5008142731385306e-06}, {"id": 67, "seek": 31688, "start": 334.6, "end": 340.28, "text": " W and B, meaning you want to update both parameters at the same time.", "tokens": [50364, 509, 434, 516, 281, 5623, 732, 9834, 343, 293, 363, 11, 558, 30, 50575, 50575, 407, 341, 5623, 2516, 1081, 337, 1293, 9834, 343, 293, 363, 13, 50851, 50851, 1485, 1021, 2607, 307, 300, 337, 16235, 23475, 11, 291, 528, 281, 16561, 5623, 51250, 51250, 343, 293, 363, 11, 3620, 291, 528, 281, 5623, 1293, 9834, 412, 264, 912, 565, 13, 51534, 51534, 708, 286, 914, 538, 300, 307, 300, 294, 341, 6114, 11, 291, 434, 516, 281, 5623, 343, 490, 264, 1331, 343, 281, 51862, 51862], "temperature": 0.0, "avg_logprob": -0.08847939566280065, "compression_ratio": 1.7839195979899498, "no_speech_prob": 3.5008142731385306e-06}, {"id": 68, "seek": 31688, "start": 340.28, "end": 346.84, "text": " What I mean by that is that in this expression, you're going to update W from the old W to", "tokens": [50364, 509, 434, 516, 281, 5623, 732, 9834, 343, 293, 363, 11, 558, 30, 50575, 50575, 407, 341, 5623, 2516, 1081, 337, 1293, 9834, 343, 293, 363, 13, 50851, 50851, 1485, 1021, 2607, 307, 300, 337, 16235, 23475, 11, 291, 528, 281, 16561, 5623, 51250, 51250, 343, 293, 363, 11, 3620, 291, 528, 281, 5623, 1293, 9834, 412, 264, 912, 565, 13, 51534, 51534, 708, 286, 914, 538, 300, 307, 300, 294, 341, 6114, 11, 291, 434, 516, 281, 5623, 343, 490, 264, 1331, 343, 281, 51862, 51862], "temperature": 0.0, "avg_logprob": -0.08847939566280065, "compression_ratio": 1.7839195979899498, "no_speech_prob": 3.5008142731385306e-06}, {"id": 69, "seek": 34684, "start": 346.84, "end": 355.44, "text": " a new W, and you're also updating B from its old value to a new value B.", "tokens": [50364, 257, 777, 343, 11, 293, 291, 434, 611, 25113, 363, 490, 1080, 1331, 2158, 281, 257, 777, 2158, 363, 13, 50794, 50794, 400, 264, 636, 281, 4445, 341, 307, 281, 14722, 264, 558, 1252, 11, 15866, 341, 551, 337, 343, 51098, 51098, 293, 363, 293, 16561, 412, 264, 912, 565, 11, 5623, 343, 293, 363, 281, 264, 777, 4190, 13, 51562, 51562, 407, 718, 311, 747, 257, 574, 412, 437, 341, 1355, 13, 51742, 51742], "temperature": 0.0, "avg_logprob": -0.12736950911484757, "compression_ratio": 1.582857142857143, "no_speech_prob": 1.2805210644728504e-05}, {"id": 70, "seek": 34684, "start": 355.44, "end": 361.52, "text": " And the way to implement this is to compute the right side, computing this thing for W", "tokens": [50364, 257, 777, 343, 11, 293, 291, 434, 611, 25113, 363, 490, 1080, 1331, 2158, 281, 257, 777, 2158, 363, 13, 50794, 50794, 400, 264, 636, 281, 4445, 341, 307, 281, 14722, 264, 558, 1252, 11, 15866, 341, 551, 337, 343, 51098, 51098, 293, 363, 293, 16561, 412, 264, 912, 565, 11, 5623, 343, 293, 363, 281, 264, 777, 4190, 13, 51562, 51562, 407, 718, 311, 747, 257, 574, 412, 437, 341, 1355, 13, 51742, 51742], "temperature": 0.0, "avg_logprob": -0.12736950911484757, "compression_ratio": 1.582857142857143, "no_speech_prob": 1.2805210644728504e-05}, {"id": 71, "seek": 34684, "start": 361.52, "end": 370.79999999999995, "text": " and B and simultaneously at the same time, update W and B to the new values.", "tokens": [50364, 257, 777, 343, 11, 293, 291, 434, 611, 25113, 363, 490, 1080, 1331, 2158, 281, 257, 777, 2158, 363, 13, 50794, 50794, 400, 264, 636, 281, 4445, 341, 307, 281, 14722, 264, 558, 1252, 11, 15866, 341, 551, 337, 343, 51098, 51098, 293, 363, 293, 16561, 412, 264, 912, 565, 11, 5623, 343, 293, 363, 281, 264, 777, 4190, 13, 51562, 51562, 407, 718, 311, 747, 257, 574, 412, 437, 341, 1355, 13, 51742, 51742], "temperature": 0.0, "avg_logprob": -0.12736950911484757, "compression_ratio": 1.582857142857143, "no_speech_prob": 1.2805210644728504e-05}, {"id": 72, "seek": 34684, "start": 370.79999999999995, "end": 374.4, "text": " So let's take a look at what this means.", "tokens": [50364, 257, 777, 343, 11, 293, 291, 434, 611, 25113, 363, 490, 1080, 1331, 2158, 281, 257, 777, 2158, 363, 13, 50794, 50794, 400, 264, 636, 281, 4445, 341, 307, 281, 14722, 264, 558, 1252, 11, 15866, 341, 551, 337, 343, 51098, 51098, 293, 363, 293, 16561, 412, 264, 912, 565, 11, 5623, 343, 293, 363, 281, 264, 777, 4190, 13, 51562, 51562, 407, 718, 311, 747, 257, 574, 412, 437, 341, 1355, 13, 51742, 51742], "temperature": 0.0, "avg_logprob": -0.12736950911484757, "compression_ratio": 1.582857142857143, "no_speech_prob": 1.2805210644728504e-05}, {"id": 73, "seek": 37440, "start": 374.4, "end": 380.32, "text": " Here's the correct way to implement gradient descent, which does a simultaneous update.", "tokens": [50364, 1692, 311, 264, 3006, 636, 281, 4445, 16235, 23475, 11, 597, 775, 257, 46218, 5623, 13, 50660, 50660, 639, 6352, 257, 7006, 18274, 54, 2681, 281, 300, 6114, 11, 597, 307, 343, 3175, 300, 1433, 510, 13, 51056, 51056, 961, 311, 611, 992, 1071, 7006, 18274, 33, 281, 300, 11, 597, 307, 363, 3175, 300, 1433, 13, 51352, 51352, 407, 291, 14722, 1293, 558, 12, 5543, 4881, 11, 1293, 9205, 11, 293, 3531, 552, 666, 9102, 18274, 54, 51614, 51614, 293, 18274, 33, 13, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.11891034516421231, "compression_ratio": 1.6602870813397128, "no_speech_prob": 4.710847406386165e-06}, {"id": 74, "seek": 37440, "start": 380.32, "end": 388.23999999999995, "text": " This sets a variable tempW equal to that expression, which is W minus that term here.", "tokens": [50364, 1692, 311, 264, 3006, 636, 281, 4445, 16235, 23475, 11, 597, 775, 257, 46218, 5623, 13, 50660, 50660, 639, 6352, 257, 7006, 18274, 54, 2681, 281, 300, 6114, 11, 597, 307, 343, 3175, 300, 1433, 510, 13, 51056, 51056, 961, 311, 611, 992, 1071, 7006, 18274, 33, 281, 300, 11, 597, 307, 363, 3175, 300, 1433, 13, 51352, 51352, 407, 291, 14722, 1293, 558, 12, 5543, 4881, 11, 1293, 9205, 11, 293, 3531, 552, 666, 9102, 18274, 54, 51614, 51614, 293, 18274, 33, 13, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.11891034516421231, "compression_ratio": 1.6602870813397128, "no_speech_prob": 4.710847406386165e-06}, {"id": 75, "seek": 37440, "start": 388.23999999999995, "end": 394.15999999999997, "text": " Let's also set another variable tempB to that, which is B minus that term.", "tokens": [50364, 1692, 311, 264, 3006, 636, 281, 4445, 16235, 23475, 11, 597, 775, 257, 46218, 5623, 13, 50660, 50660, 639, 6352, 257, 7006, 18274, 54, 2681, 281, 300, 6114, 11, 597, 307, 343, 3175, 300, 1433, 510, 13, 51056, 51056, 961, 311, 611, 992, 1071, 7006, 18274, 33, 281, 300, 11, 597, 307, 363, 3175, 300, 1433, 13, 51352, 51352, 407, 291, 14722, 1293, 558, 12, 5543, 4881, 11, 1293, 9205, 11, 293, 3531, 552, 666, 9102, 18274, 54, 51614, 51614, 293, 18274, 33, 13, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.11891034516421231, "compression_ratio": 1.6602870813397128, "no_speech_prob": 4.710847406386165e-06}, {"id": 76, "seek": 37440, "start": 394.15999999999997, "end": 399.4, "text": " So you compute both right-hand sides, both updates, and store them into variables tempW", "tokens": [50364, 1692, 311, 264, 3006, 636, 281, 4445, 16235, 23475, 11, 597, 775, 257, 46218, 5623, 13, 50660, 50660, 639, 6352, 257, 7006, 18274, 54, 2681, 281, 300, 6114, 11, 597, 307, 343, 3175, 300, 1433, 510, 13, 51056, 51056, 961, 311, 611, 992, 1071, 7006, 18274, 33, 281, 300, 11, 597, 307, 363, 3175, 300, 1433, 13, 51352, 51352, 407, 291, 14722, 1293, 558, 12, 5543, 4881, 11, 1293, 9205, 11, 293, 3531, 552, 666, 9102, 18274, 54, 51614, 51614, 293, 18274, 33, 13, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.11891034516421231, "compression_ratio": 1.6602870813397128, "no_speech_prob": 4.710847406386165e-06}, {"id": 77, "seek": 37440, "start": 399.4, "end": 401.91999999999996, "text": " and tempB.", "tokens": [50364, 1692, 311, 264, 3006, 636, 281, 4445, 16235, 23475, 11, 597, 775, 257, 46218, 5623, 13, 50660, 50660, 639, 6352, 257, 7006, 18274, 54, 2681, 281, 300, 6114, 11, 597, 307, 343, 3175, 300, 1433, 510, 13, 51056, 51056, 961, 311, 611, 992, 1071, 7006, 18274, 33, 281, 300, 11, 597, 307, 363, 3175, 300, 1433, 13, 51352, 51352, 407, 291, 14722, 1293, 558, 12, 5543, 4881, 11, 1293, 9205, 11, 293, 3531, 552, 666, 9102, 18274, 54, 51614, 51614, 293, 18274, 33, 13, 51740, 51740], "temperature": 0.0, "avg_logprob": -0.11891034516421231, "compression_ratio": 1.6602870813397128, "no_speech_prob": 4.710847406386165e-06}, {"id": 78, "seek": 40192, "start": 401.92, "end": 412.08000000000004, "text": " Then you copy the value of tempW into W, and you also copy the value of tempB into B.", "tokens": [50364, 1396, 291, 5055, 264, 2158, 295, 18274, 54, 666, 343, 11, 293, 291, 611, 5055, 264, 2158, 295, 18274, 33, 666, 363, 13, 50872, 50872, 823, 472, 551, 291, 815, 3449, 307, 300, 341, 2158, 295, 343, 307, 490, 949, 343, 2170, 10588, 13, 51316, 51316, 1692, 3449, 300, 264, 659, 12, 1010, 17393, 343, 307, 437, 1709, 666, 264, 13760, 1433, 670, 510, 11, 1392, 30, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.0977631689796985, "compression_ratio": 1.6125, "no_speech_prob": 1.6797212083474733e-06}, {"id": 79, "seek": 40192, "start": 412.08000000000004, "end": 420.96000000000004, "text": " Now one thing you may notice is that this value of W is from before W gets updated.", "tokens": [50364, 1396, 291, 5055, 264, 2158, 295, 18274, 54, 666, 343, 11, 293, 291, 611, 5055, 264, 2158, 295, 18274, 33, 666, 363, 13, 50872, 50872, 823, 472, 551, 291, 815, 3449, 307, 300, 341, 2158, 295, 343, 307, 490, 949, 343, 2170, 10588, 13, 51316, 51316, 1692, 3449, 300, 264, 659, 12, 1010, 17393, 343, 307, 437, 1709, 666, 264, 13760, 1433, 670, 510, 11, 1392, 30, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.0977631689796985, "compression_ratio": 1.6125, "no_speech_prob": 1.6797212083474733e-06}, {"id": 80, "seek": 40192, "start": 420.96000000000004, "end": 428.72, "text": " Here notice that the pre-update W is what goes into the derivative term over here, okay?", "tokens": [50364, 1396, 291, 5055, 264, 2158, 295, 18274, 54, 666, 343, 11, 293, 291, 611, 5055, 264, 2158, 295, 18274, 33, 666, 363, 13, 50872, 50872, 823, 472, 551, 291, 815, 3449, 307, 300, 341, 2158, 295, 343, 307, 490, 949, 343, 2170, 10588, 13, 51316, 51316, 1692, 3449, 300, 264, 659, 12, 1010, 17393, 343, 307, 437, 1709, 666, 264, 13760, 1433, 670, 510, 11, 1392, 30, 51704, 51704], "temperature": 0.0, "avg_logprob": -0.0977631689796985, "compression_ratio": 1.6125, "no_speech_prob": 1.6797212083474733e-06}, {"id": 81, "seek": 42872, "start": 428.72, "end": 434.8, "text": " In contrast, here's an incorrect implementation of gradient descent that does not do a simultaneous", "tokens": [50364, 682, 8712, 11, 510, 311, 364, 18424, 11420, 295, 16235, 23475, 300, 775, 406, 360, 257, 46218, 50668, 50668, 5623, 13, 50718, 50718, 682, 341, 18424, 11420, 11, 321, 14722, 18274, 54, 912, 382, 949, 11, 370, 1400, 300, 311, 1392, 13, 51134, 51134, 400, 586, 510, 311, 689, 721, 722, 281, 743, 13, 51290, 51290, 492, 550, 5623, 343, 365, 264, 2158, 294, 18274, 54, 949, 28258, 264, 777, 2158, 337, 264, 661, 13075, 51664, 51664, 363, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10760224583637283, "compression_ratio": 1.6585365853658536, "no_speech_prob": 4.6644322537758853e-07}, {"id": 82, "seek": 42872, "start": 434.8, "end": 435.8, "text": " update.", "tokens": [50364, 682, 8712, 11, 510, 311, 364, 18424, 11420, 295, 16235, 23475, 300, 775, 406, 360, 257, 46218, 50668, 50668, 5623, 13, 50718, 50718, 682, 341, 18424, 11420, 11, 321, 14722, 18274, 54, 912, 382, 949, 11, 370, 1400, 300, 311, 1392, 13, 51134, 51134, 400, 586, 510, 311, 689, 721, 722, 281, 743, 13, 51290, 51290, 492, 550, 5623, 343, 365, 264, 2158, 294, 18274, 54, 949, 28258, 264, 777, 2158, 337, 264, 661, 13075, 51664, 51664, 363, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10760224583637283, "compression_ratio": 1.6585365853658536, "no_speech_prob": 4.6644322537758853e-07}, {"id": 83, "seek": 42872, "start": 435.8, "end": 444.12, "text": " In this incorrect implementation, we compute tempW same as before, so far that's okay.", "tokens": [50364, 682, 8712, 11, 510, 311, 364, 18424, 11420, 295, 16235, 23475, 300, 775, 406, 360, 257, 46218, 50668, 50668, 5623, 13, 50718, 50718, 682, 341, 18424, 11420, 11, 321, 14722, 18274, 54, 912, 382, 949, 11, 370, 1400, 300, 311, 1392, 13, 51134, 51134, 400, 586, 510, 311, 689, 721, 722, 281, 743, 13, 51290, 51290, 492, 550, 5623, 343, 365, 264, 2158, 294, 18274, 54, 949, 28258, 264, 777, 2158, 337, 264, 661, 13075, 51664, 51664, 363, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10760224583637283, "compression_ratio": 1.6585365853658536, "no_speech_prob": 4.6644322537758853e-07}, {"id": 84, "seek": 42872, "start": 444.12, "end": 447.24, "text": " And now here's where things start to differ.", "tokens": [50364, 682, 8712, 11, 510, 311, 364, 18424, 11420, 295, 16235, 23475, 300, 775, 406, 360, 257, 46218, 50668, 50668, 5623, 13, 50718, 50718, 682, 341, 18424, 11420, 11, 321, 14722, 18274, 54, 912, 382, 949, 11, 370, 1400, 300, 311, 1392, 13, 51134, 51134, 400, 586, 510, 311, 689, 721, 722, 281, 743, 13, 51290, 51290, 492, 550, 5623, 343, 365, 264, 2158, 294, 18274, 54, 949, 28258, 264, 777, 2158, 337, 264, 661, 13075, 51664, 51664, 363, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10760224583637283, "compression_ratio": 1.6585365853658536, "no_speech_prob": 4.6644322537758853e-07}, {"id": 85, "seek": 42872, "start": 447.24, "end": 454.72, "text": " We then update W with the value in tempW before calculating the new value for the other parameter", "tokens": [50364, 682, 8712, 11, 510, 311, 364, 18424, 11420, 295, 16235, 23475, 300, 775, 406, 360, 257, 46218, 50668, 50668, 5623, 13, 50718, 50718, 682, 341, 18424, 11420, 11, 321, 14722, 18274, 54, 912, 382, 949, 11, 370, 1400, 300, 311, 1392, 13, 51134, 51134, 400, 586, 510, 311, 689, 721, 722, 281, 743, 13, 51290, 51290, 492, 550, 5623, 343, 365, 264, 2158, 294, 18274, 54, 949, 28258, 264, 777, 2158, 337, 264, 661, 13075, 51664, 51664, 363, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10760224583637283, "compression_ratio": 1.6585365853658536, "no_speech_prob": 4.6644322537758853e-07}, {"id": 86, "seek": 42872, "start": 454.72, "end": 455.72, "text": " B.", "tokens": [50364, 682, 8712, 11, 510, 311, 364, 18424, 11420, 295, 16235, 23475, 300, 775, 406, 360, 257, 46218, 50668, 50668, 5623, 13, 50718, 50718, 682, 341, 18424, 11420, 11, 321, 14722, 18274, 54, 912, 382, 949, 11, 370, 1400, 300, 311, 1392, 13, 51134, 51134, 400, 586, 510, 311, 689, 721, 722, 281, 743, 13, 51290, 51290, 492, 550, 5623, 343, 365, 264, 2158, 294, 18274, 54, 949, 28258, 264, 777, 2158, 337, 264, 661, 13075, 51664, 51664, 363, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.10760224583637283, "compression_ratio": 1.6585365853658536, "no_speech_prob": 4.6644322537758853e-07}, {"id": 87, "seek": 45572, "start": 455.72, "end": 460.88000000000005, "text": " Next, we calculate tempB as B minus that term here.", "tokens": [50364, 3087, 11, 321, 8873, 18274, 33, 382, 363, 3175, 300, 1433, 510, 13, 50622, 50622, 400, 2721, 11, 321, 5623, 363, 365, 264, 2158, 294, 18274, 33, 13, 50870, 50870, 440, 2649, 1296, 264, 558, 12, 5543, 1252, 293, 264, 1411, 12, 5543, 1252, 4445, 763, 307, 51054, 51054, 300, 498, 291, 574, 670, 510, 11, 341, 343, 575, 1217, 668, 10588, 281, 341, 777, 2158, 11, 293, 309, 311, 341, 51418, 51418, 10588, 343, 300, 767, 1709, 666, 264, 2063, 2445, 508, 295, 343, 33, 13, 51754, 51754], "temperature": 0.0, "avg_logprob": -0.10979692228547819, "compression_ratio": 1.5813953488372092, "no_speech_prob": 1.8162143078370718e-06}, {"id": 88, "seek": 45572, "start": 460.88000000000005, "end": 465.84000000000003, "text": " And finally, we update B with the value in tempB.", "tokens": [50364, 3087, 11, 321, 8873, 18274, 33, 382, 363, 3175, 300, 1433, 510, 13, 50622, 50622, 400, 2721, 11, 321, 5623, 363, 365, 264, 2158, 294, 18274, 33, 13, 50870, 50870, 440, 2649, 1296, 264, 558, 12, 5543, 1252, 293, 264, 1411, 12, 5543, 1252, 4445, 763, 307, 51054, 51054, 300, 498, 291, 574, 670, 510, 11, 341, 343, 575, 1217, 668, 10588, 281, 341, 777, 2158, 11, 293, 309, 311, 341, 51418, 51418, 10588, 343, 300, 767, 1709, 666, 264, 2063, 2445, 508, 295, 343, 33, 13, 51754, 51754], "temperature": 0.0, "avg_logprob": -0.10979692228547819, "compression_ratio": 1.5813953488372092, "no_speech_prob": 1.8162143078370718e-06}, {"id": 89, "seek": 45572, "start": 465.84000000000003, "end": 469.52000000000004, "text": " The difference between the right-hand side and the left-hand side implementations is", "tokens": [50364, 3087, 11, 321, 8873, 18274, 33, 382, 363, 3175, 300, 1433, 510, 13, 50622, 50622, 400, 2721, 11, 321, 5623, 363, 365, 264, 2158, 294, 18274, 33, 13, 50870, 50870, 440, 2649, 1296, 264, 558, 12, 5543, 1252, 293, 264, 1411, 12, 5543, 1252, 4445, 763, 307, 51054, 51054, 300, 498, 291, 574, 670, 510, 11, 341, 343, 575, 1217, 668, 10588, 281, 341, 777, 2158, 11, 293, 309, 311, 341, 51418, 51418, 10588, 343, 300, 767, 1709, 666, 264, 2063, 2445, 508, 295, 343, 33, 13, 51754, 51754], "temperature": 0.0, "avg_logprob": -0.10979692228547819, "compression_ratio": 1.5813953488372092, "no_speech_prob": 1.8162143078370718e-06}, {"id": 90, "seek": 45572, "start": 469.52000000000004, "end": 476.8, "text": " that if you look over here, this W has already been updated to this new value, and it's this", "tokens": [50364, 3087, 11, 321, 8873, 18274, 33, 382, 363, 3175, 300, 1433, 510, 13, 50622, 50622, 400, 2721, 11, 321, 5623, 363, 365, 264, 2158, 294, 18274, 33, 13, 50870, 50870, 440, 2649, 1296, 264, 558, 12, 5543, 1252, 293, 264, 1411, 12, 5543, 1252, 4445, 763, 307, 51054, 51054, 300, 498, 291, 574, 670, 510, 11, 341, 343, 575, 1217, 668, 10588, 281, 341, 777, 2158, 11, 293, 309, 311, 341, 51418, 51418, 10588, 343, 300, 767, 1709, 666, 264, 2063, 2445, 508, 295, 343, 33, 13, 51754, 51754], "temperature": 0.0, "avg_logprob": -0.10979692228547819, "compression_ratio": 1.5813953488372092, "no_speech_prob": 1.8162143078370718e-06}, {"id": 91, "seek": 45572, "start": 476.8, "end": 483.52000000000004, "text": " updated W that actually goes into the cost function J of WB.", "tokens": [50364, 3087, 11, 321, 8873, 18274, 33, 382, 363, 3175, 300, 1433, 510, 13, 50622, 50622, 400, 2721, 11, 321, 5623, 363, 365, 264, 2158, 294, 18274, 33, 13, 50870, 50870, 440, 2649, 1296, 264, 558, 12, 5543, 1252, 293, 264, 1411, 12, 5543, 1252, 4445, 763, 307, 51054, 51054, 300, 498, 291, 574, 670, 510, 11, 341, 343, 575, 1217, 668, 10588, 281, 341, 777, 2158, 11, 293, 309, 311, 341, 51418, 51418, 10588, 343, 300, 767, 1709, 666, 264, 2063, 2445, 508, 295, 343, 33, 13, 51754, 51754], "temperature": 0.0, "avg_logprob": -0.10979692228547819, "compression_ratio": 1.5813953488372092, "no_speech_prob": 1.8162143078370718e-06}, {"id": 92, "seek": 48352, "start": 483.52, "end": 488.76, "text": " It means that this term here on the right is not the same as this term over here that", "tokens": [50364, 467, 1355, 300, 341, 1433, 510, 322, 264, 558, 307, 406, 264, 912, 382, 341, 1433, 670, 510, 300, 50626, 50626, 291, 536, 322, 264, 1411, 13, 50756, 50756, 400, 300, 611, 1355, 341, 18274, 33, 1433, 322, 264, 558, 307, 406, 1596, 264, 912, 382, 264, 18274, 33, 1433, 51146, 51146, 322, 264, 1411, 11, 293, 8807, 341, 10588, 2158, 337, 363, 322, 264, 558, 307, 406, 264, 912, 382, 341, 10588, 51456, 51456, 2158, 337, 7006, 363, 322, 264, 1411, 13, 51674, 51674], "temperature": 0.0, "avg_logprob": -0.07000329576689622, "compression_ratio": 2.213793103448276, "no_speech_prob": 2.406088469797396e-06}, {"id": 93, "seek": 48352, "start": 488.76, "end": 491.35999999999996, "text": " you see on the left.", "tokens": [50364, 467, 1355, 300, 341, 1433, 510, 322, 264, 558, 307, 406, 264, 912, 382, 341, 1433, 670, 510, 300, 50626, 50626, 291, 536, 322, 264, 1411, 13, 50756, 50756, 400, 300, 611, 1355, 341, 18274, 33, 1433, 322, 264, 558, 307, 406, 1596, 264, 912, 382, 264, 18274, 33, 1433, 51146, 51146, 322, 264, 1411, 11, 293, 8807, 341, 10588, 2158, 337, 363, 322, 264, 558, 307, 406, 264, 912, 382, 341, 10588, 51456, 51456, 2158, 337, 7006, 363, 322, 264, 1411, 13, 51674, 51674], "temperature": 0.0, "avg_logprob": -0.07000329576689622, "compression_ratio": 2.213793103448276, "no_speech_prob": 2.406088469797396e-06}, {"id": 94, "seek": 48352, "start": 491.35999999999996, "end": 499.15999999999997, "text": " And that also means this tempB term on the right is not quite the same as the tempB term", "tokens": [50364, 467, 1355, 300, 341, 1433, 510, 322, 264, 558, 307, 406, 264, 912, 382, 341, 1433, 670, 510, 300, 50626, 50626, 291, 536, 322, 264, 1411, 13, 50756, 50756, 400, 300, 611, 1355, 341, 18274, 33, 1433, 322, 264, 558, 307, 406, 1596, 264, 912, 382, 264, 18274, 33, 1433, 51146, 51146, 322, 264, 1411, 11, 293, 8807, 341, 10588, 2158, 337, 363, 322, 264, 558, 307, 406, 264, 912, 382, 341, 10588, 51456, 51456, 2158, 337, 7006, 363, 322, 264, 1411, 13, 51674, 51674], "temperature": 0.0, "avg_logprob": -0.07000329576689622, "compression_ratio": 2.213793103448276, "no_speech_prob": 2.406088469797396e-06}, {"id": 95, "seek": 48352, "start": 499.15999999999997, "end": 505.35999999999996, "text": " on the left, and thus this updated value for B on the right is not the same as this updated", "tokens": [50364, 467, 1355, 300, 341, 1433, 510, 322, 264, 558, 307, 406, 264, 912, 382, 341, 1433, 670, 510, 300, 50626, 50626, 291, 536, 322, 264, 1411, 13, 50756, 50756, 400, 300, 611, 1355, 341, 18274, 33, 1433, 322, 264, 558, 307, 406, 1596, 264, 912, 382, 264, 18274, 33, 1433, 51146, 51146, 322, 264, 1411, 11, 293, 8807, 341, 10588, 2158, 337, 363, 322, 264, 558, 307, 406, 264, 912, 382, 341, 10588, 51456, 51456, 2158, 337, 7006, 363, 322, 264, 1411, 13, 51674, 51674], "temperature": 0.0, "avg_logprob": -0.07000329576689622, "compression_ratio": 2.213793103448276, "no_speech_prob": 2.406088469797396e-06}, {"id": 96, "seek": 48352, "start": 505.35999999999996, "end": 509.71999999999997, "text": " value for variable B on the left.", "tokens": [50364, 467, 1355, 300, 341, 1433, 510, 322, 264, 558, 307, 406, 264, 912, 382, 341, 1433, 670, 510, 300, 50626, 50626, 291, 536, 322, 264, 1411, 13, 50756, 50756, 400, 300, 611, 1355, 341, 18274, 33, 1433, 322, 264, 558, 307, 406, 1596, 264, 912, 382, 264, 18274, 33, 1433, 51146, 51146, 322, 264, 1411, 11, 293, 8807, 341, 10588, 2158, 337, 363, 322, 264, 558, 307, 406, 264, 912, 382, 341, 10588, 51456, 51456, 2158, 337, 7006, 363, 322, 264, 1411, 13, 51674, 51674], "temperature": 0.0, "avg_logprob": -0.07000329576689622, "compression_ratio": 2.213793103448276, "no_speech_prob": 2.406088469797396e-06}, {"id": 97, "seek": 50972, "start": 509.72, "end": 513.88, "text": " The way that gradient descent is implemented in code, it actually turns out to be more", "tokens": [50364, 440, 636, 300, 16235, 23475, 307, 12270, 294, 3089, 11, 309, 767, 4523, 484, 281, 312, 544, 50572, 50572, 3303, 281, 4445, 309, 264, 3006, 636, 365, 46218, 9205, 13, 50901, 50901, 1133, 291, 1568, 1580, 751, 466, 16235, 23475, 11, 436, 1009, 914, 264, 16235, 23475, 51118, 51118, 689, 291, 2042, 257, 46218, 5623, 295, 264, 9834, 13, 51324, 51324, 759, 4461, 11, 291, 645, 281, 4445, 2107, 12, 30937, 723, 15447, 9205, 11, 309, 4523, 484, 309, 486, 1391, 589, 51671, 51671], "temperature": 0.0, "avg_logprob": -0.11216027237648188, "compression_ratio": 1.8504672897196262, "no_speech_prob": 8.530145350960083e-06}, {"id": 98, "seek": 50972, "start": 513.88, "end": 520.46, "text": " natural to implement it the correct way with simultaneous updates.", "tokens": [50364, 440, 636, 300, 16235, 23475, 307, 12270, 294, 3089, 11, 309, 767, 4523, 484, 281, 312, 544, 50572, 50572, 3303, 281, 4445, 309, 264, 3006, 636, 365, 46218, 9205, 13, 50901, 50901, 1133, 291, 1568, 1580, 751, 466, 16235, 23475, 11, 436, 1009, 914, 264, 16235, 23475, 51118, 51118, 689, 291, 2042, 257, 46218, 5623, 295, 264, 9834, 13, 51324, 51324, 759, 4461, 11, 291, 645, 281, 4445, 2107, 12, 30937, 723, 15447, 9205, 11, 309, 4523, 484, 309, 486, 1391, 589, 51671, 51671], "temperature": 0.0, "avg_logprob": -0.11216027237648188, "compression_ratio": 1.8504672897196262, "no_speech_prob": 8.530145350960083e-06}, {"id": 99, "seek": 50972, "start": 520.46, "end": 524.8000000000001, "text": " When you hear someone talk about gradient descent, they always mean the gradient descent", "tokens": [50364, 440, 636, 300, 16235, 23475, 307, 12270, 294, 3089, 11, 309, 767, 4523, 484, 281, 312, 544, 50572, 50572, 3303, 281, 4445, 309, 264, 3006, 636, 365, 46218, 9205, 13, 50901, 50901, 1133, 291, 1568, 1580, 751, 466, 16235, 23475, 11, 436, 1009, 914, 264, 16235, 23475, 51118, 51118, 689, 291, 2042, 257, 46218, 5623, 295, 264, 9834, 13, 51324, 51324, 759, 4461, 11, 291, 645, 281, 4445, 2107, 12, 30937, 723, 15447, 9205, 11, 309, 4523, 484, 309, 486, 1391, 589, 51671, 51671], "temperature": 0.0, "avg_logprob": -0.11216027237648188, "compression_ratio": 1.8504672897196262, "no_speech_prob": 8.530145350960083e-06}, {"id": 100, "seek": 50972, "start": 524.8000000000001, "end": 528.9200000000001, "text": " where you perform a simultaneous update of the parameters.", "tokens": [50364, 440, 636, 300, 16235, 23475, 307, 12270, 294, 3089, 11, 309, 767, 4523, 484, 281, 312, 544, 50572, 50572, 3303, 281, 4445, 309, 264, 3006, 636, 365, 46218, 9205, 13, 50901, 50901, 1133, 291, 1568, 1580, 751, 466, 16235, 23475, 11, 436, 1009, 914, 264, 16235, 23475, 51118, 51118, 689, 291, 2042, 257, 46218, 5623, 295, 264, 9834, 13, 51324, 51324, 759, 4461, 11, 291, 645, 281, 4445, 2107, 12, 30937, 723, 15447, 9205, 11, 309, 4523, 484, 309, 486, 1391, 589, 51671, 51671], "temperature": 0.0, "avg_logprob": -0.11216027237648188, "compression_ratio": 1.8504672897196262, "no_speech_prob": 8.530145350960083e-06}, {"id": 101, "seek": 50972, "start": 528.9200000000001, "end": 535.86, "text": " If however, you were to implement non-simultaneous updates, it turns out it will probably work", "tokens": [50364, 440, 636, 300, 16235, 23475, 307, 12270, 294, 3089, 11, 309, 767, 4523, 484, 281, 312, 544, 50572, 50572, 3303, 281, 4445, 309, 264, 3006, 636, 365, 46218, 9205, 13, 50901, 50901, 1133, 291, 1568, 1580, 751, 466, 16235, 23475, 11, 436, 1009, 914, 264, 16235, 23475, 51118, 51118, 689, 291, 2042, 257, 46218, 5623, 295, 264, 9834, 13, 51324, 51324, 759, 4461, 11, 291, 645, 281, 4445, 2107, 12, 30937, 723, 15447, 9205, 11, 309, 4523, 484, 309, 486, 1391, 589, 51671, 51671], "temperature": 0.0, "avg_logprob": -0.11216027237648188, "compression_ratio": 1.8504672897196262, "no_speech_prob": 8.530145350960083e-06}, {"id": 102, "seek": 53586, "start": 535.86, "end": 540.6, "text": " more or less anyway, but doing it this way isn't really the correct way to implement", "tokens": [50364, 544, 420, 1570, 4033, 11, 457, 884, 309, 341, 636, 1943, 380, 534, 264, 3006, 636, 281, 4445, 50601, 50601, 309, 11, 309, 311, 767, 512, 661, 9284, 365, 819, 7221, 13, 50804, 50804, 407, 286, 576, 18312, 291, 281, 445, 2897, 281, 264, 3006, 46218, 5623, 293, 406, 764, 341, 51073, 51073, 18424, 3037, 322, 264, 558, 13, 51225, 51225, 407, 300, 311, 16235, 23475, 13, 51333, 51333, 682, 264, 958, 960, 11, 321, 603, 352, 666, 4365, 295, 264, 13760, 1433, 11, 597, 291, 1866, 294, 341, 51555, 51555, 960, 11, 457, 300, 321, 994, 380, 534, 751, 466, 294, 2607, 13, 51769, 51769], "temperature": 0.0, "avg_logprob": -0.11594999278033222, "compression_ratio": 1.6793893129770991, "no_speech_prob": 5.507464265974704e-06}, {"id": 103, "seek": 53586, "start": 540.6, "end": 544.66, "text": " it, it's actually some other algorithm with different properties.", "tokens": [50364, 544, 420, 1570, 4033, 11, 457, 884, 309, 341, 636, 1943, 380, 534, 264, 3006, 636, 281, 4445, 50601, 50601, 309, 11, 309, 311, 767, 512, 661, 9284, 365, 819, 7221, 13, 50804, 50804, 407, 286, 576, 18312, 291, 281, 445, 2897, 281, 264, 3006, 46218, 5623, 293, 406, 764, 341, 51073, 51073, 18424, 3037, 322, 264, 558, 13, 51225, 51225, 407, 300, 311, 16235, 23475, 13, 51333, 51333, 682, 264, 958, 960, 11, 321, 603, 352, 666, 4365, 295, 264, 13760, 1433, 11, 597, 291, 1866, 294, 341, 51555, 51555, 960, 11, 457, 300, 321, 994, 380, 534, 751, 466, 294, 2607, 13, 51769, 51769], "temperature": 0.0, "avg_logprob": -0.11594999278033222, "compression_ratio": 1.6793893129770991, "no_speech_prob": 5.507464265974704e-06}, {"id": 104, "seek": 53586, "start": 544.66, "end": 550.04, "text": " So I would advise you to just stick to the correct simultaneous update and not use this", "tokens": [50364, 544, 420, 1570, 4033, 11, 457, 884, 309, 341, 636, 1943, 380, 534, 264, 3006, 636, 281, 4445, 50601, 50601, 309, 11, 309, 311, 767, 512, 661, 9284, 365, 819, 7221, 13, 50804, 50804, 407, 286, 576, 18312, 291, 281, 445, 2897, 281, 264, 3006, 46218, 5623, 293, 406, 764, 341, 51073, 51073, 18424, 3037, 322, 264, 558, 13, 51225, 51225, 407, 300, 311, 16235, 23475, 13, 51333, 51333, 682, 264, 958, 960, 11, 321, 603, 352, 666, 4365, 295, 264, 13760, 1433, 11, 597, 291, 1866, 294, 341, 51555, 51555, 960, 11, 457, 300, 321, 994, 380, 534, 751, 466, 294, 2607, 13, 51769, 51769], "temperature": 0.0, "avg_logprob": -0.11594999278033222, "compression_ratio": 1.6793893129770991, "no_speech_prob": 5.507464265974704e-06}, {"id": 105, "seek": 53586, "start": 550.04, "end": 553.08, "text": " incorrect version on the right.", "tokens": [50364, 544, 420, 1570, 4033, 11, 457, 884, 309, 341, 636, 1943, 380, 534, 264, 3006, 636, 281, 4445, 50601, 50601, 309, 11, 309, 311, 767, 512, 661, 9284, 365, 819, 7221, 13, 50804, 50804, 407, 286, 576, 18312, 291, 281, 445, 2897, 281, 264, 3006, 46218, 5623, 293, 406, 764, 341, 51073, 51073, 18424, 3037, 322, 264, 558, 13, 51225, 51225, 407, 300, 311, 16235, 23475, 13, 51333, 51333, 682, 264, 958, 960, 11, 321, 603, 352, 666, 4365, 295, 264, 13760, 1433, 11, 597, 291, 1866, 294, 341, 51555, 51555, 960, 11, 457, 300, 321, 994, 380, 534, 751, 466, 294, 2607, 13, 51769, 51769], "temperature": 0.0, "avg_logprob": -0.11594999278033222, "compression_ratio": 1.6793893129770991, "no_speech_prob": 5.507464265974704e-06}, {"id": 106, "seek": 53586, "start": 553.08, "end": 555.24, "text": " So that's gradient descent.", "tokens": [50364, 544, 420, 1570, 4033, 11, 457, 884, 309, 341, 636, 1943, 380, 534, 264, 3006, 636, 281, 4445, 50601, 50601, 309, 11, 309, 311, 767, 512, 661, 9284, 365, 819, 7221, 13, 50804, 50804, 407, 286, 576, 18312, 291, 281, 445, 2897, 281, 264, 3006, 46218, 5623, 293, 406, 764, 341, 51073, 51073, 18424, 3037, 322, 264, 558, 13, 51225, 51225, 407, 300, 311, 16235, 23475, 13, 51333, 51333, 682, 264, 958, 960, 11, 321, 603, 352, 666, 4365, 295, 264, 13760, 1433, 11, 597, 291, 1866, 294, 341, 51555, 51555, 960, 11, 457, 300, 321, 994, 380, 534, 751, 466, 294, 2607, 13, 51769, 51769], "temperature": 0.0, "avg_logprob": -0.11594999278033222, "compression_ratio": 1.6793893129770991, "no_speech_prob": 5.507464265974704e-06}, {"id": 107, "seek": 53586, "start": 555.24, "end": 559.6800000000001, "text": " In the next video, we'll go into details of the derivative term, which you saw in this", "tokens": [50364, 544, 420, 1570, 4033, 11, 457, 884, 309, 341, 636, 1943, 380, 534, 264, 3006, 636, 281, 4445, 50601, 50601, 309, 11, 309, 311, 767, 512, 661, 9284, 365, 819, 7221, 13, 50804, 50804, 407, 286, 576, 18312, 291, 281, 445, 2897, 281, 264, 3006, 46218, 5623, 293, 406, 764, 341, 51073, 51073, 18424, 3037, 322, 264, 558, 13, 51225, 51225, 407, 300, 311, 16235, 23475, 13, 51333, 51333, 682, 264, 958, 960, 11, 321, 603, 352, 666, 4365, 295, 264, 13760, 1433, 11, 597, 291, 1866, 294, 341, 51555, 51555, 960, 11, 457, 300, 321, 994, 380, 534, 751, 466, 294, 2607, 13, 51769, 51769], "temperature": 0.0, "avg_logprob": -0.11594999278033222, "compression_ratio": 1.6793893129770991, "no_speech_prob": 5.507464265974704e-06}, {"id": 108, "seek": 53586, "start": 559.6800000000001, "end": 563.96, "text": " video, but that we didn't really talk about in detail.", "tokens": [50364, 544, 420, 1570, 4033, 11, 457, 884, 309, 341, 636, 1943, 380, 534, 264, 3006, 636, 281, 4445, 50601, 50601, 309, 11, 309, 311, 767, 512, 661, 9284, 365, 819, 7221, 13, 50804, 50804, 407, 286, 576, 18312, 291, 281, 445, 2897, 281, 264, 3006, 46218, 5623, 293, 406, 764, 341, 51073, 51073, 18424, 3037, 322, 264, 558, 13, 51225, 51225, 407, 300, 311, 16235, 23475, 13, 51333, 51333, 682, 264, 958, 960, 11, 321, 603, 352, 666, 4365, 295, 264, 13760, 1433, 11, 597, 291, 1866, 294, 341, 51555, 51555, 960, 11, 457, 300, 321, 994, 380, 534, 751, 466, 294, 2607, 13, 51769, 51769], "temperature": 0.0, "avg_logprob": -0.11594999278033222, "compression_ratio": 1.6793893129770991, "no_speech_prob": 5.507464265974704e-06}, {"id": 109, "seek": 56396, "start": 563.96, "end": 568.24, "text": " Calculus are part of calculus, and again, if you're not familiar with calculus, don't", "tokens": [50364, 3511, 36002, 366, 644, 295, 33400, 11, 293, 797, 11, 498, 291, 434, 406, 4963, 365, 33400, 11, 500, 380, 50578, 50578, 3292, 466, 309, 13, 50643, 50643, 509, 1582, 380, 643, 281, 458, 33400, 412, 439, 294, 1668, 281, 3566, 341, 1164, 420, 341, 2121, 2144, 11, 50918, 50918, 293, 291, 603, 362, 439, 264, 1589, 291, 643, 294, 1668, 281, 4445, 16235, 23475, 13, 51184, 51184, 12473, 493, 294, 264, 958, 960, 11, 321, 603, 352, 670, 33733, 1214, 11, 293, 291, 808, 1314, 365, 51430, 51430, 264, 24002, 293, 3601, 291, 643, 281, 312, 1075, 281, 4445, 293, 3079, 16235, 23475, 51716, 51716, 1803, 13, 51782, 51782], "temperature": 0.0, "avg_logprob": -0.1280208400317601, "compression_ratio": 1.813953488372093, "no_speech_prob": 1.7777492757886648e-05}, {"id": 110, "seek": 56396, "start": 568.24, "end": 569.5400000000001, "text": " worry about it.", "tokens": [50364, 3511, 36002, 366, 644, 295, 33400, 11, 293, 797, 11, 498, 291, 434, 406, 4963, 365, 33400, 11, 500, 380, 50578, 50578, 3292, 466, 309, 13, 50643, 50643, 509, 1582, 380, 643, 281, 458, 33400, 412, 439, 294, 1668, 281, 3566, 341, 1164, 420, 341, 2121, 2144, 11, 50918, 50918, 293, 291, 603, 362, 439, 264, 1589, 291, 643, 294, 1668, 281, 4445, 16235, 23475, 13, 51184, 51184, 12473, 493, 294, 264, 958, 960, 11, 321, 603, 352, 670, 33733, 1214, 11, 293, 291, 808, 1314, 365, 51430, 51430, 264, 24002, 293, 3601, 291, 643, 281, 312, 1075, 281, 4445, 293, 3079, 16235, 23475, 51716, 51716, 1803, 13, 51782, 51782], "temperature": 0.0, "avg_logprob": -0.1280208400317601, "compression_ratio": 1.813953488372093, "no_speech_prob": 1.7777492757886648e-05}, {"id": 111, "seek": 56396, "start": 569.5400000000001, "end": 575.0400000000001, "text": " You won't need to know calculus at all in order to complete this course or this specialization,", "tokens": [50364, 3511, 36002, 366, 644, 295, 33400, 11, 293, 797, 11, 498, 291, 434, 406, 4963, 365, 33400, 11, 500, 380, 50578, 50578, 3292, 466, 309, 13, 50643, 50643, 509, 1582, 380, 643, 281, 458, 33400, 412, 439, 294, 1668, 281, 3566, 341, 1164, 420, 341, 2121, 2144, 11, 50918, 50918, 293, 291, 603, 362, 439, 264, 1589, 291, 643, 294, 1668, 281, 4445, 16235, 23475, 13, 51184, 51184, 12473, 493, 294, 264, 958, 960, 11, 321, 603, 352, 670, 33733, 1214, 11, 293, 291, 808, 1314, 365, 51430, 51430, 264, 24002, 293, 3601, 291, 643, 281, 312, 1075, 281, 4445, 293, 3079, 16235, 23475, 51716, 51716, 1803, 13, 51782, 51782], "temperature": 0.0, "avg_logprob": -0.1280208400317601, "compression_ratio": 1.813953488372093, "no_speech_prob": 1.7777492757886648e-05}, {"id": 112, "seek": 56396, "start": 575.0400000000001, "end": 580.36, "text": " and you'll have all the information you need in order to implement gradient descent.", "tokens": [50364, 3511, 36002, 366, 644, 295, 33400, 11, 293, 797, 11, 498, 291, 434, 406, 4963, 365, 33400, 11, 500, 380, 50578, 50578, 3292, 466, 309, 13, 50643, 50643, 509, 1582, 380, 643, 281, 458, 33400, 412, 439, 294, 1668, 281, 3566, 341, 1164, 420, 341, 2121, 2144, 11, 50918, 50918, 293, 291, 603, 362, 439, 264, 1589, 291, 643, 294, 1668, 281, 4445, 16235, 23475, 13, 51184, 51184, 12473, 493, 294, 264, 958, 960, 11, 321, 603, 352, 670, 33733, 1214, 11, 293, 291, 808, 1314, 365, 51430, 51430, 264, 24002, 293, 3601, 291, 643, 281, 312, 1075, 281, 4445, 293, 3079, 16235, 23475, 51716, 51716, 1803, 13, 51782, 51782], "temperature": 0.0, "avg_logprob": -0.1280208400317601, "compression_ratio": 1.813953488372093, "no_speech_prob": 1.7777492757886648e-05}, {"id": 113, "seek": 56396, "start": 580.36, "end": 585.2800000000001, "text": " Coming up in the next video, we'll go over derivatives together, and you come away with", "tokens": [50364, 3511, 36002, 366, 644, 295, 33400, 11, 293, 797, 11, 498, 291, 434, 406, 4963, 365, 33400, 11, 500, 380, 50578, 50578, 3292, 466, 309, 13, 50643, 50643, 509, 1582, 380, 643, 281, 458, 33400, 412, 439, 294, 1668, 281, 3566, 341, 1164, 420, 341, 2121, 2144, 11, 50918, 50918, 293, 291, 603, 362, 439, 264, 1589, 291, 643, 294, 1668, 281, 4445, 16235, 23475, 13, 51184, 51184, 12473, 493, 294, 264, 958, 960, 11, 321, 603, 352, 670, 33733, 1214, 11, 293, 291, 808, 1314, 365, 51430, 51430, 264, 24002, 293, 3601, 291, 643, 281, 312, 1075, 281, 4445, 293, 3079, 16235, 23475, 51716, 51716, 1803, 13, 51782, 51782], "temperature": 0.0, "avg_logprob": -0.1280208400317601, "compression_ratio": 1.813953488372093, "no_speech_prob": 1.7777492757886648e-05}, {"id": 114, "seek": 56396, "start": 585.2800000000001, "end": 591.0, "text": " the intuition and knowledge you need to be able to implement and apply gradient descent", "tokens": [50364, 3511, 36002, 366, 644, 295, 33400, 11, 293, 797, 11, 498, 291, 434, 406, 4963, 365, 33400, 11, 500, 380, 50578, 50578, 3292, 466, 309, 13, 50643, 50643, 509, 1582, 380, 643, 281, 458, 33400, 412, 439, 294, 1668, 281, 3566, 341, 1164, 420, 341, 2121, 2144, 11, 50918, 50918, 293, 291, 603, 362, 439, 264, 1589, 291, 643, 294, 1668, 281, 4445, 16235, 23475, 13, 51184, 51184, 12473, 493, 294, 264, 958, 960, 11, 321, 603, 352, 670, 33733, 1214, 11, 293, 291, 808, 1314, 365, 51430, 51430, 264, 24002, 293, 3601, 291, 643, 281, 312, 1075, 281, 4445, 293, 3079, 16235, 23475, 51716, 51716, 1803, 13, 51782, 51782], "temperature": 0.0, "avg_logprob": -0.1280208400317601, "compression_ratio": 1.813953488372093, "no_speech_prob": 1.7777492757886648e-05}, {"id": 115, "seek": 56396, "start": 591.0, "end": 592.32, "text": " yourself.", "tokens": [50364, 3511, 36002, 366, 644, 295, 33400, 11, 293, 797, 11, 498, 291, 434, 406, 4963, 365, 33400, 11, 500, 380, 50578, 50578, 3292, 466, 309, 13, 50643, 50643, 509, 1582, 380, 643, 281, 458, 33400, 412, 439, 294, 1668, 281, 3566, 341, 1164, 420, 341, 2121, 2144, 11, 50918, 50918, 293, 291, 603, 362, 439, 264, 1589, 291, 643, 294, 1668, 281, 4445, 16235, 23475, 13, 51184, 51184, 12473, 493, 294, 264, 958, 960, 11, 321, 603, 352, 670, 33733, 1214, 11, 293, 291, 808, 1314, 365, 51430, 51430, 264, 24002, 293, 3601, 291, 643, 281, 312, 1075, 281, 4445, 293, 3079, 16235, 23475, 51716, 51716, 1803, 13, 51782, 51782], "temperature": 0.0, "avg_logprob": -0.1280208400317601, "compression_ratio": 1.813953488372093, "no_speech_prob": 1.7777492757886648e-05}, {"id": 116, "seek": 59232, "start": 592.32, "end": 595.9200000000001, "text": " I think that'll be an exciting thing for you to know how to implement.", "tokens": [50364, 286, 519, 300, 603, 312, 364, 4670, 551, 337, 291, 281, 458, 577, 281, 4445, 13, 50544, 50544, 407, 718, 311, 352, 322, 281, 264, 958, 960, 281, 536, 577, 281, 360, 300, 13, 50690], "temperature": 0.0, "avg_logprob": -0.11062303749290672, "compression_ratio": 1.2352941176470589, "no_speech_prob": 5.714261715183966e-05}, {"id": 117, "seek": 59592, "start": 595.92, "end": 622.92, "text": " So let's go on to the next video to see how to do that.", "tokens": [50364, 407, 718, 311, 352, 322, 281, 264, 958, 960, 281, 536, 577, 281, 360, 300, 13, 51714, 51714], "temperature": 0.0, "avg_logprob": -0.20599844455718994, "compression_ratio": 0.9821428571428571, "no_speech_prob": 9.701969247544184e-05}], "language": "en", "video_id": "Dz4JZzgn-hg", "entity": "ML Specialization, Andrew Ng (2022)"}}
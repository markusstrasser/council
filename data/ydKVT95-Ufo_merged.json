{"video_id": "ydKVT95-Ufo", "title": "4.11 Neural network implementation in Python | Forward prop in a single layer-[ML| Andrew Ng]", "description": "Second Course:\nAdvanced Learning Algorithms.\n\n\nIf you liked the content please subscribe and put a little blue thumb.\nTake heart!", "author": "Machine Learning", "keywords": [], "channel_url": "https://www.youtube.com/channel/UClG5HEAJJFOavT_UolqYROQ", "length": 307, "views": 128, "publish_date": "11/04/2022", "timestamp": 1661385600, "entity": "ML Specialization, Andrew Ng (2022)", "transcript": {"text": " If you had to implement forward propagation yourself from scratch in Python, how would you go about doing so? In addition to gaining intuition about what's really going on in libraries like TensorFlow and PyTorch, if ever someday you decide you want to build something even better than TensorFlow and PyTorch, maybe now you'd have a better idea how. I don't really recommend doing this for most people, but maybe someday someone will come up with an even better framework than TensorFlow and PyTorch, and whoever does that may end up having to implement these things from scratch themselves. So let's take a look. On this slide, I'm going to go through quite a bit of code, and you'll see all this code again later in the optional lab as well as in the practice lab. So don't worry about having to take notes on every line of code or memorize every line of code. You see this code written down in the Jupyter Notebook in the lab, and the goal of this video is to just show you the code to make sure you can understand what it's doing so that when you go to the optional lab in the practice lab and see the code there, you know what to do. So don't worry about taking detailed notes on every line. If you can read through the code on this slide and understand what it's doing, that's all you need. So let's take a look at how you implement forward prop in a single layer. We're going to continue using the coffee roasting model shown here. And let's look at how you would take an input feature vector x and implement forward prop to get this output a2. In this Python implementation, I'm going to use one D arrays to represent all of these vectors and parameters, which is why there's only a single square bracket here. This is a one D array in Python, rather than a 2D matrix, which is what we had when we had double square brackets. So the first value you need to compute is a superscript square bracket one, subscript one, which is the first activation value of a one, and that's g of this expression over here. So I'm going to use the convention on this slide that a term like w two one, I'm going to represent as a variable w two, and then subscript one, this underscore one denotes subscript one. So w two means w superscript two in square brackets and in subscript one. So to compute a one one, we have parameters w one one and b one one, which are say one two and negative one. You would then compute z one one as the dot product between that parameter w one one and the input x and add it to be one one and then finally a one one is equal to g the safe point function applied to z one one. Next let's go on to compute a one two, which again by the convention I described here is going to be a one two written like that. So similar as what we did on the left, w one two is your two parameters minus three four, b one two is the term b one two over there. So you compute z as this term in the middle and then apply the safe point function and then you end up with a one two and finally you do the same thing to compute a one three. Now you've computed these three values a one one, a one two and a one three and we like to take these three numbers and group them together into an array to give you a one up here, which is the output of the first layer. And so you do that by grouping them together using a NumPy array as follows. So now you've computed a one. Let's implement the second layer as well to compute the output a two. So a two is computed using this expression and so we would have parameters w two one and b two one corresponding to these parameters and then you would compute z as the dot product between w two one and a one and add b two one and then apply the safe point function to get a two one and that's it. That's how you implement Ford prop using just Python and NumPy. Now there are a lot of expressions in this page of code that you just saw. Let's in the next video look at how you can simplify this to implement Ford prop for a more general neural network rather than hard coding it for every single neuron like we just did. So let's go see that in the next video.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 7.6000000000000005, "text": " If you had to implement forward propagation yourself from scratch in Python, how would", "tokens": [50364, 759, 291, 632, 281, 4445, 2128, 38377, 1803, 490, 8459, 294, 15329, 11, 577, 576, 50744, 50744, 291, 352, 466, 884, 370, 30, 50850, 50850, 682, 4500, 281, 19752, 24002, 466, 437, 311, 534, 516, 322, 294, 15148, 411, 37624, 51104, 51104, 293, 9953, 51, 284, 339, 11, 498, 1562, 19412, 291, 4536, 291, 528, 281, 1322, 746, 754, 1101, 813, 37624, 51372, 51372, 293, 9953, 51, 284, 339, 11, 1310, 586, 291, 1116, 362, 257, 1101, 1558, 577, 13, 51584, 51584, 286, 500, 380, 534, 2748, 884, 341, 337, 881, 561, 11, 457, 1310, 19412, 1580, 486, 808, 51813, 51813], "temperature": 0.0, "avg_logprob": -0.11344289316714389, "compression_ratio": 1.6717557251908397, "no_speech_prob": 0.09514499455690384}, {"id": 1, "seek": 0, "start": 7.6000000000000005, "end": 9.72, "text": " you go about doing so?", "tokens": [50364, 759, 291, 632, 281, 4445, 2128, 38377, 1803, 490, 8459, 294, 15329, 11, 577, 576, 50744, 50744, 291, 352, 466, 884, 370, 30, 50850, 50850, 682, 4500, 281, 19752, 24002, 466, 437, 311, 534, 516, 322, 294, 15148, 411, 37624, 51104, 51104, 293, 9953, 51, 284, 339, 11, 498, 1562, 19412, 291, 4536, 291, 528, 281, 1322, 746, 754, 1101, 813, 37624, 51372, 51372, 293, 9953, 51, 284, 339, 11, 1310, 586, 291, 1116, 362, 257, 1101, 1558, 577, 13, 51584, 51584, 286, 500, 380, 534, 2748, 884, 341, 337, 881, 561, 11, 457, 1310, 19412, 1580, 486, 808, 51813, 51813], "temperature": 0.0, "avg_logprob": -0.11344289316714389, "compression_ratio": 1.6717557251908397, "no_speech_prob": 0.09514499455690384}, {"id": 2, "seek": 0, "start": 9.72, "end": 14.8, "text": " In addition to gaining intuition about what's really going on in libraries like TensorFlow", "tokens": [50364, 759, 291, 632, 281, 4445, 2128, 38377, 1803, 490, 8459, 294, 15329, 11, 577, 576, 50744, 50744, 291, 352, 466, 884, 370, 30, 50850, 50850, 682, 4500, 281, 19752, 24002, 466, 437, 311, 534, 516, 322, 294, 15148, 411, 37624, 51104, 51104, 293, 9953, 51, 284, 339, 11, 498, 1562, 19412, 291, 4536, 291, 528, 281, 1322, 746, 754, 1101, 813, 37624, 51372, 51372, 293, 9953, 51, 284, 339, 11, 1310, 586, 291, 1116, 362, 257, 1101, 1558, 577, 13, 51584, 51584, 286, 500, 380, 534, 2748, 884, 341, 337, 881, 561, 11, 457, 1310, 19412, 1580, 486, 808, 51813, 51813], "temperature": 0.0, "avg_logprob": -0.11344289316714389, "compression_ratio": 1.6717557251908397, "no_speech_prob": 0.09514499455690384}, {"id": 3, "seek": 0, "start": 14.8, "end": 20.16, "text": " and PyTorch, if ever someday you decide you want to build something even better than TensorFlow", "tokens": [50364, 759, 291, 632, 281, 4445, 2128, 38377, 1803, 490, 8459, 294, 15329, 11, 577, 576, 50744, 50744, 291, 352, 466, 884, 370, 30, 50850, 50850, 682, 4500, 281, 19752, 24002, 466, 437, 311, 534, 516, 322, 294, 15148, 411, 37624, 51104, 51104, 293, 9953, 51, 284, 339, 11, 498, 1562, 19412, 291, 4536, 291, 528, 281, 1322, 746, 754, 1101, 813, 37624, 51372, 51372, 293, 9953, 51, 284, 339, 11, 1310, 586, 291, 1116, 362, 257, 1101, 1558, 577, 13, 51584, 51584, 286, 500, 380, 534, 2748, 884, 341, 337, 881, 561, 11, 457, 1310, 19412, 1580, 486, 808, 51813, 51813], "temperature": 0.0, "avg_logprob": -0.11344289316714389, "compression_ratio": 1.6717557251908397, "no_speech_prob": 0.09514499455690384}, {"id": 4, "seek": 0, "start": 20.16, "end": 24.400000000000002, "text": " and PyTorch, maybe now you'd have a better idea how.", "tokens": [50364, 759, 291, 632, 281, 4445, 2128, 38377, 1803, 490, 8459, 294, 15329, 11, 577, 576, 50744, 50744, 291, 352, 466, 884, 370, 30, 50850, 50850, 682, 4500, 281, 19752, 24002, 466, 437, 311, 534, 516, 322, 294, 15148, 411, 37624, 51104, 51104, 293, 9953, 51, 284, 339, 11, 498, 1562, 19412, 291, 4536, 291, 528, 281, 1322, 746, 754, 1101, 813, 37624, 51372, 51372, 293, 9953, 51, 284, 339, 11, 1310, 586, 291, 1116, 362, 257, 1101, 1558, 577, 13, 51584, 51584, 286, 500, 380, 534, 2748, 884, 341, 337, 881, 561, 11, 457, 1310, 19412, 1580, 486, 808, 51813, 51813], "temperature": 0.0, "avg_logprob": -0.11344289316714389, "compression_ratio": 1.6717557251908397, "no_speech_prob": 0.09514499455690384}, {"id": 5, "seek": 0, "start": 24.400000000000002, "end": 28.98, "text": " I don't really recommend doing this for most people, but maybe someday someone will come", "tokens": [50364, 759, 291, 632, 281, 4445, 2128, 38377, 1803, 490, 8459, 294, 15329, 11, 577, 576, 50744, 50744, 291, 352, 466, 884, 370, 30, 50850, 50850, 682, 4500, 281, 19752, 24002, 466, 437, 311, 534, 516, 322, 294, 15148, 411, 37624, 51104, 51104, 293, 9953, 51, 284, 339, 11, 498, 1562, 19412, 291, 4536, 291, 528, 281, 1322, 746, 754, 1101, 813, 37624, 51372, 51372, 293, 9953, 51, 284, 339, 11, 1310, 586, 291, 1116, 362, 257, 1101, 1558, 577, 13, 51584, 51584, 286, 500, 380, 534, 2748, 884, 341, 337, 881, 561, 11, 457, 1310, 19412, 1580, 486, 808, 51813, 51813], "temperature": 0.0, "avg_logprob": -0.11344289316714389, "compression_ratio": 1.6717557251908397, "no_speech_prob": 0.09514499455690384}, {"id": 6, "seek": 2898, "start": 28.98, "end": 33.94, "text": " up with an even better framework than TensorFlow and PyTorch, and whoever does that may end", "tokens": [50364, 493, 365, 364, 754, 1101, 8388, 813, 37624, 293, 9953, 51, 284, 339, 11, 293, 11387, 775, 300, 815, 917, 50612, 50612, 493, 1419, 281, 4445, 613, 721, 490, 8459, 2969, 13, 50784, 50784, 407, 718, 311, 747, 257, 574, 13, 50879, 50879, 1282, 341, 4137, 11, 286, 478, 516, 281, 352, 807, 1596, 257, 857, 295, 3089, 11, 293, 291, 603, 536, 439, 341, 3089, 51129, 51129, 797, 1780, 294, 264, 17312, 2715, 382, 731, 382, 294, 264, 3124, 2715, 13, 51348, 51348, 407, 500, 380, 3292, 466, 1419, 281, 747, 5570, 322, 633, 1622, 295, 3089, 420, 27478, 633, 1622, 51544, 51544, 295, 3089, 13, 51596, 51596], "temperature": 0.0, "avg_logprob": -0.10428808401296805, "compression_ratio": 1.6459143968871595, "no_speech_prob": 2.468059210514184e-05}, {"id": 7, "seek": 2898, "start": 33.94, "end": 37.38, "text": " up having to implement these things from scratch themselves.", "tokens": [50364, 493, 365, 364, 754, 1101, 8388, 813, 37624, 293, 9953, 51, 284, 339, 11, 293, 11387, 775, 300, 815, 917, 50612, 50612, 493, 1419, 281, 4445, 613, 721, 490, 8459, 2969, 13, 50784, 50784, 407, 718, 311, 747, 257, 574, 13, 50879, 50879, 1282, 341, 4137, 11, 286, 478, 516, 281, 352, 807, 1596, 257, 857, 295, 3089, 11, 293, 291, 603, 536, 439, 341, 3089, 51129, 51129, 797, 1780, 294, 264, 17312, 2715, 382, 731, 382, 294, 264, 3124, 2715, 13, 51348, 51348, 407, 500, 380, 3292, 466, 1419, 281, 747, 5570, 322, 633, 1622, 295, 3089, 420, 27478, 633, 1622, 51544, 51544, 295, 3089, 13, 51596, 51596], "temperature": 0.0, "avg_logprob": -0.10428808401296805, "compression_ratio": 1.6459143968871595, "no_speech_prob": 2.468059210514184e-05}, {"id": 8, "seek": 2898, "start": 37.38, "end": 39.28, "text": " So let's take a look.", "tokens": [50364, 493, 365, 364, 754, 1101, 8388, 813, 37624, 293, 9953, 51, 284, 339, 11, 293, 11387, 775, 300, 815, 917, 50612, 50612, 493, 1419, 281, 4445, 613, 721, 490, 8459, 2969, 13, 50784, 50784, 407, 718, 311, 747, 257, 574, 13, 50879, 50879, 1282, 341, 4137, 11, 286, 478, 516, 281, 352, 807, 1596, 257, 857, 295, 3089, 11, 293, 291, 603, 536, 439, 341, 3089, 51129, 51129, 797, 1780, 294, 264, 17312, 2715, 382, 731, 382, 294, 264, 3124, 2715, 13, 51348, 51348, 407, 500, 380, 3292, 466, 1419, 281, 747, 5570, 322, 633, 1622, 295, 3089, 420, 27478, 633, 1622, 51544, 51544, 295, 3089, 13, 51596, 51596], "temperature": 0.0, "avg_logprob": -0.10428808401296805, "compression_ratio": 1.6459143968871595, "no_speech_prob": 2.468059210514184e-05}, {"id": 9, "seek": 2898, "start": 39.28, "end": 44.28, "text": " On this slide, I'm going to go through quite a bit of code, and you'll see all this code", "tokens": [50364, 493, 365, 364, 754, 1101, 8388, 813, 37624, 293, 9953, 51, 284, 339, 11, 293, 11387, 775, 300, 815, 917, 50612, 50612, 493, 1419, 281, 4445, 613, 721, 490, 8459, 2969, 13, 50784, 50784, 407, 718, 311, 747, 257, 574, 13, 50879, 50879, 1282, 341, 4137, 11, 286, 478, 516, 281, 352, 807, 1596, 257, 857, 295, 3089, 11, 293, 291, 603, 536, 439, 341, 3089, 51129, 51129, 797, 1780, 294, 264, 17312, 2715, 382, 731, 382, 294, 264, 3124, 2715, 13, 51348, 51348, 407, 500, 380, 3292, 466, 1419, 281, 747, 5570, 322, 633, 1622, 295, 3089, 420, 27478, 633, 1622, 51544, 51544, 295, 3089, 13, 51596, 51596], "temperature": 0.0, "avg_logprob": -0.10428808401296805, "compression_ratio": 1.6459143968871595, "no_speech_prob": 2.468059210514184e-05}, {"id": 10, "seek": 2898, "start": 44.28, "end": 48.66, "text": " again later in the optional lab as well as in the practice lab.", "tokens": [50364, 493, 365, 364, 754, 1101, 8388, 813, 37624, 293, 9953, 51, 284, 339, 11, 293, 11387, 775, 300, 815, 917, 50612, 50612, 493, 1419, 281, 4445, 613, 721, 490, 8459, 2969, 13, 50784, 50784, 407, 718, 311, 747, 257, 574, 13, 50879, 50879, 1282, 341, 4137, 11, 286, 478, 516, 281, 352, 807, 1596, 257, 857, 295, 3089, 11, 293, 291, 603, 536, 439, 341, 3089, 51129, 51129, 797, 1780, 294, 264, 17312, 2715, 382, 731, 382, 294, 264, 3124, 2715, 13, 51348, 51348, 407, 500, 380, 3292, 466, 1419, 281, 747, 5570, 322, 633, 1622, 295, 3089, 420, 27478, 633, 1622, 51544, 51544, 295, 3089, 13, 51596, 51596], "temperature": 0.0, "avg_logprob": -0.10428808401296805, "compression_ratio": 1.6459143968871595, "no_speech_prob": 2.468059210514184e-05}, {"id": 11, "seek": 2898, "start": 48.66, "end": 52.58, "text": " So don't worry about having to take notes on every line of code or memorize every line", "tokens": [50364, 493, 365, 364, 754, 1101, 8388, 813, 37624, 293, 9953, 51, 284, 339, 11, 293, 11387, 775, 300, 815, 917, 50612, 50612, 493, 1419, 281, 4445, 613, 721, 490, 8459, 2969, 13, 50784, 50784, 407, 718, 311, 747, 257, 574, 13, 50879, 50879, 1282, 341, 4137, 11, 286, 478, 516, 281, 352, 807, 1596, 257, 857, 295, 3089, 11, 293, 291, 603, 536, 439, 341, 3089, 51129, 51129, 797, 1780, 294, 264, 17312, 2715, 382, 731, 382, 294, 264, 3124, 2715, 13, 51348, 51348, 407, 500, 380, 3292, 466, 1419, 281, 747, 5570, 322, 633, 1622, 295, 3089, 420, 27478, 633, 1622, 51544, 51544, 295, 3089, 13, 51596, 51596], "temperature": 0.0, "avg_logprob": -0.10428808401296805, "compression_ratio": 1.6459143968871595, "no_speech_prob": 2.468059210514184e-05}, {"id": 12, "seek": 2898, "start": 52.58, "end": 53.620000000000005, "text": " of code.", "tokens": [50364, 493, 365, 364, 754, 1101, 8388, 813, 37624, 293, 9953, 51, 284, 339, 11, 293, 11387, 775, 300, 815, 917, 50612, 50612, 493, 1419, 281, 4445, 613, 721, 490, 8459, 2969, 13, 50784, 50784, 407, 718, 311, 747, 257, 574, 13, 50879, 50879, 1282, 341, 4137, 11, 286, 478, 516, 281, 352, 807, 1596, 257, 857, 295, 3089, 11, 293, 291, 603, 536, 439, 341, 3089, 51129, 51129, 797, 1780, 294, 264, 17312, 2715, 382, 731, 382, 294, 264, 3124, 2715, 13, 51348, 51348, 407, 500, 380, 3292, 466, 1419, 281, 747, 5570, 322, 633, 1622, 295, 3089, 420, 27478, 633, 1622, 51544, 51544, 295, 3089, 13, 51596, 51596], "temperature": 0.0, "avg_logprob": -0.10428808401296805, "compression_ratio": 1.6459143968871595, "no_speech_prob": 2.468059210514184e-05}, {"id": 13, "seek": 5362, "start": 53.62, "end": 59.0, "text": " You see this code written down in the Jupyter Notebook in the lab, and the goal of this", "tokens": [50364, 509, 536, 341, 3089, 3720, 760, 294, 264, 22125, 88, 391, 11633, 2939, 294, 264, 2715, 11, 293, 264, 3387, 295, 341, 50633, 50633, 960, 307, 281, 445, 855, 291, 264, 3089, 281, 652, 988, 291, 393, 1223, 437, 309, 311, 884, 370, 50925, 50925, 300, 562, 291, 352, 281, 264, 17312, 2715, 294, 264, 3124, 2715, 293, 536, 264, 3089, 456, 11, 291, 458, 51129, 51129, 437, 281, 360, 13, 51179, 51179, 407, 500, 380, 3292, 466, 1940, 9942, 5570, 322, 633, 1622, 13, 51311, 51311, 759, 291, 393, 1401, 807, 264, 3089, 322, 341, 4137, 293, 1223, 437, 309, 311, 884, 11, 300, 311, 439, 51537, 51537, 291, 643, 13, 51605, 51605], "temperature": 0.0, "avg_logprob": -0.11084415994841477, "compression_ratio": 1.7601626016260163, "no_speech_prob": 1.5688672647229396e-05}, {"id": 14, "seek": 5362, "start": 59.0, "end": 64.84, "text": " video is to just show you the code to make sure you can understand what it's doing so", "tokens": [50364, 509, 536, 341, 3089, 3720, 760, 294, 264, 22125, 88, 391, 11633, 2939, 294, 264, 2715, 11, 293, 264, 3387, 295, 341, 50633, 50633, 960, 307, 281, 445, 855, 291, 264, 3089, 281, 652, 988, 291, 393, 1223, 437, 309, 311, 884, 370, 50925, 50925, 300, 562, 291, 352, 281, 264, 17312, 2715, 294, 264, 3124, 2715, 293, 536, 264, 3089, 456, 11, 291, 458, 51129, 51129, 437, 281, 360, 13, 51179, 51179, 407, 500, 380, 3292, 466, 1940, 9942, 5570, 322, 633, 1622, 13, 51311, 51311, 759, 291, 393, 1401, 807, 264, 3089, 322, 341, 4137, 293, 1223, 437, 309, 311, 884, 11, 300, 311, 439, 51537, 51537, 291, 643, 13, 51605, 51605], "temperature": 0.0, "avg_logprob": -0.11084415994841477, "compression_ratio": 1.7601626016260163, "no_speech_prob": 1.5688672647229396e-05}, {"id": 15, "seek": 5362, "start": 64.84, "end": 68.92, "text": " that when you go to the optional lab in the practice lab and see the code there, you know", "tokens": [50364, 509, 536, 341, 3089, 3720, 760, 294, 264, 22125, 88, 391, 11633, 2939, 294, 264, 2715, 11, 293, 264, 3387, 295, 341, 50633, 50633, 960, 307, 281, 445, 855, 291, 264, 3089, 281, 652, 988, 291, 393, 1223, 437, 309, 311, 884, 370, 50925, 50925, 300, 562, 291, 352, 281, 264, 17312, 2715, 294, 264, 3124, 2715, 293, 536, 264, 3089, 456, 11, 291, 458, 51129, 51129, 437, 281, 360, 13, 51179, 51179, 407, 500, 380, 3292, 466, 1940, 9942, 5570, 322, 633, 1622, 13, 51311, 51311, 759, 291, 393, 1401, 807, 264, 3089, 322, 341, 4137, 293, 1223, 437, 309, 311, 884, 11, 300, 311, 439, 51537, 51537, 291, 643, 13, 51605, 51605], "temperature": 0.0, "avg_logprob": -0.11084415994841477, "compression_ratio": 1.7601626016260163, "no_speech_prob": 1.5688672647229396e-05}, {"id": 16, "seek": 5362, "start": 68.92, "end": 69.92, "text": " what to do.", "tokens": [50364, 509, 536, 341, 3089, 3720, 760, 294, 264, 22125, 88, 391, 11633, 2939, 294, 264, 2715, 11, 293, 264, 3387, 295, 341, 50633, 50633, 960, 307, 281, 445, 855, 291, 264, 3089, 281, 652, 988, 291, 393, 1223, 437, 309, 311, 884, 370, 50925, 50925, 300, 562, 291, 352, 281, 264, 17312, 2715, 294, 264, 3124, 2715, 293, 536, 264, 3089, 456, 11, 291, 458, 51129, 51129, 437, 281, 360, 13, 51179, 51179, 407, 500, 380, 3292, 466, 1940, 9942, 5570, 322, 633, 1622, 13, 51311, 51311, 759, 291, 393, 1401, 807, 264, 3089, 322, 341, 4137, 293, 1223, 437, 309, 311, 884, 11, 300, 311, 439, 51537, 51537, 291, 643, 13, 51605, 51605], "temperature": 0.0, "avg_logprob": -0.11084415994841477, "compression_ratio": 1.7601626016260163, "no_speech_prob": 1.5688672647229396e-05}, {"id": 17, "seek": 5362, "start": 69.92, "end": 72.56, "text": " So don't worry about taking detailed notes on every line.", "tokens": [50364, 509, 536, 341, 3089, 3720, 760, 294, 264, 22125, 88, 391, 11633, 2939, 294, 264, 2715, 11, 293, 264, 3387, 295, 341, 50633, 50633, 960, 307, 281, 445, 855, 291, 264, 3089, 281, 652, 988, 291, 393, 1223, 437, 309, 311, 884, 370, 50925, 50925, 300, 562, 291, 352, 281, 264, 17312, 2715, 294, 264, 3124, 2715, 293, 536, 264, 3089, 456, 11, 291, 458, 51129, 51129, 437, 281, 360, 13, 51179, 51179, 407, 500, 380, 3292, 466, 1940, 9942, 5570, 322, 633, 1622, 13, 51311, 51311, 759, 291, 393, 1401, 807, 264, 3089, 322, 341, 4137, 293, 1223, 437, 309, 311, 884, 11, 300, 311, 439, 51537, 51537, 291, 643, 13, 51605, 51605], "temperature": 0.0, "avg_logprob": -0.11084415994841477, "compression_ratio": 1.7601626016260163, "no_speech_prob": 1.5688672647229396e-05}, {"id": 18, "seek": 5362, "start": 72.56, "end": 77.08, "text": " If you can read through the code on this slide and understand what it's doing, that's all", "tokens": [50364, 509, 536, 341, 3089, 3720, 760, 294, 264, 22125, 88, 391, 11633, 2939, 294, 264, 2715, 11, 293, 264, 3387, 295, 341, 50633, 50633, 960, 307, 281, 445, 855, 291, 264, 3089, 281, 652, 988, 291, 393, 1223, 437, 309, 311, 884, 370, 50925, 50925, 300, 562, 291, 352, 281, 264, 17312, 2715, 294, 264, 3124, 2715, 293, 536, 264, 3089, 456, 11, 291, 458, 51129, 51129, 437, 281, 360, 13, 51179, 51179, 407, 500, 380, 3292, 466, 1940, 9942, 5570, 322, 633, 1622, 13, 51311, 51311, 759, 291, 393, 1401, 807, 264, 3089, 322, 341, 4137, 293, 1223, 437, 309, 311, 884, 11, 300, 311, 439, 51537, 51537, 291, 643, 13, 51605, 51605], "temperature": 0.0, "avg_logprob": -0.11084415994841477, "compression_ratio": 1.7601626016260163, "no_speech_prob": 1.5688672647229396e-05}, {"id": 19, "seek": 5362, "start": 77.08, "end": 78.44, "text": " you need.", "tokens": [50364, 509, 536, 341, 3089, 3720, 760, 294, 264, 22125, 88, 391, 11633, 2939, 294, 264, 2715, 11, 293, 264, 3387, 295, 341, 50633, 50633, 960, 307, 281, 445, 855, 291, 264, 3089, 281, 652, 988, 291, 393, 1223, 437, 309, 311, 884, 370, 50925, 50925, 300, 562, 291, 352, 281, 264, 17312, 2715, 294, 264, 3124, 2715, 293, 536, 264, 3089, 456, 11, 291, 458, 51129, 51129, 437, 281, 360, 13, 51179, 51179, 407, 500, 380, 3292, 466, 1940, 9942, 5570, 322, 633, 1622, 13, 51311, 51311, 759, 291, 393, 1401, 807, 264, 3089, 322, 341, 4137, 293, 1223, 437, 309, 311, 884, 11, 300, 311, 439, 51537, 51537, 291, 643, 13, 51605, 51605], "temperature": 0.0, "avg_logprob": -0.11084415994841477, "compression_ratio": 1.7601626016260163, "no_speech_prob": 1.5688672647229396e-05}, {"id": 20, "seek": 7844, "start": 78.44, "end": 83.64, "text": " So let's take a look at how you implement forward prop in a single layer.", "tokens": [50364, 407, 718, 311, 747, 257, 574, 412, 577, 291, 4445, 2128, 2365, 294, 257, 2167, 4583, 13, 50624, 50624, 492, 434, 516, 281, 2354, 1228, 264, 4982, 45227, 2316, 4898, 510, 13, 50920, 50920, 400, 718, 311, 574, 412, 577, 291, 576, 747, 364, 4846, 4111, 8062, 2031, 293, 4445, 2128, 2365, 51302, 51302, 281, 483, 341, 5598, 257, 17, 13, 51446, 51446, 682, 341, 15329, 11420, 11, 286, 478, 516, 281, 764, 472, 413, 41011, 281, 2906, 439, 295, 613, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.14323941399069393, "compression_ratio": 1.6634146341463414, "no_speech_prob": 1.47383607327356e-05}, {"id": 21, "seek": 7844, "start": 83.64, "end": 89.56, "text": " We're going to continue using the coffee roasting model shown here.", "tokens": [50364, 407, 718, 311, 747, 257, 574, 412, 577, 291, 4445, 2128, 2365, 294, 257, 2167, 4583, 13, 50624, 50624, 492, 434, 516, 281, 2354, 1228, 264, 4982, 45227, 2316, 4898, 510, 13, 50920, 50920, 400, 718, 311, 574, 412, 577, 291, 576, 747, 364, 4846, 4111, 8062, 2031, 293, 4445, 2128, 2365, 51302, 51302, 281, 483, 341, 5598, 257, 17, 13, 51446, 51446, 682, 341, 15329, 11420, 11, 286, 478, 516, 281, 764, 472, 413, 41011, 281, 2906, 439, 295, 613, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.14323941399069393, "compression_ratio": 1.6634146341463414, "no_speech_prob": 1.47383607327356e-05}, {"id": 22, "seek": 7844, "start": 89.56, "end": 97.2, "text": " And let's look at how you would take an input feature vector x and implement forward prop", "tokens": [50364, 407, 718, 311, 747, 257, 574, 412, 577, 291, 4445, 2128, 2365, 294, 257, 2167, 4583, 13, 50624, 50624, 492, 434, 516, 281, 2354, 1228, 264, 4982, 45227, 2316, 4898, 510, 13, 50920, 50920, 400, 718, 311, 574, 412, 577, 291, 576, 747, 364, 4846, 4111, 8062, 2031, 293, 4445, 2128, 2365, 51302, 51302, 281, 483, 341, 5598, 257, 17, 13, 51446, 51446, 682, 341, 15329, 11420, 11, 286, 478, 516, 281, 764, 472, 413, 41011, 281, 2906, 439, 295, 613, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.14323941399069393, "compression_ratio": 1.6634146341463414, "no_speech_prob": 1.47383607327356e-05}, {"id": 23, "seek": 7844, "start": 97.2, "end": 100.08, "text": " to get this output a2.", "tokens": [50364, 407, 718, 311, 747, 257, 574, 412, 577, 291, 4445, 2128, 2365, 294, 257, 2167, 4583, 13, 50624, 50624, 492, 434, 516, 281, 2354, 1228, 264, 4982, 45227, 2316, 4898, 510, 13, 50920, 50920, 400, 718, 311, 574, 412, 577, 291, 576, 747, 364, 4846, 4111, 8062, 2031, 293, 4445, 2128, 2365, 51302, 51302, 281, 483, 341, 5598, 257, 17, 13, 51446, 51446, 682, 341, 15329, 11420, 11, 286, 478, 516, 281, 764, 472, 413, 41011, 281, 2906, 439, 295, 613, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.14323941399069393, "compression_ratio": 1.6634146341463414, "no_speech_prob": 1.47383607327356e-05}, {"id": 24, "seek": 7844, "start": 100.08, "end": 106.6, "text": " In this Python implementation, I'm going to use one D arrays to represent all of these", "tokens": [50364, 407, 718, 311, 747, 257, 574, 412, 577, 291, 4445, 2128, 2365, 294, 257, 2167, 4583, 13, 50624, 50624, 492, 434, 516, 281, 2354, 1228, 264, 4982, 45227, 2316, 4898, 510, 13, 50920, 50920, 400, 718, 311, 574, 412, 577, 291, 576, 747, 364, 4846, 4111, 8062, 2031, 293, 4445, 2128, 2365, 51302, 51302, 281, 483, 341, 5598, 257, 17, 13, 51446, 51446, 682, 341, 15329, 11420, 11, 286, 478, 516, 281, 764, 472, 413, 41011, 281, 2906, 439, 295, 613, 51772, 51772], "temperature": 0.0, "avg_logprob": -0.14323941399069393, "compression_ratio": 1.6634146341463414, "no_speech_prob": 1.47383607327356e-05}, {"id": 25, "seek": 10660, "start": 106.6, "end": 111.11999999999999, "text": " vectors and parameters, which is why there's only a single square bracket here.", "tokens": [50364, 18875, 293, 9834, 11, 597, 307, 983, 456, 311, 787, 257, 2167, 3732, 16904, 510, 13, 50590, 50590, 639, 307, 257, 472, 413, 10225, 294, 15329, 11, 2831, 813, 257, 568, 35, 8141, 11, 597, 307, 437, 321, 632, 562, 321, 50880, 50880, 632, 3834, 3732, 26179, 13, 51015, 51015, 407, 264, 700, 2158, 291, 643, 281, 14722, 307, 257, 37906, 5944, 3732, 16904, 472, 11, 2325, 662, 51308, 51308, 472, 11, 597, 307, 264, 700, 24433, 2158, 295, 257, 472, 11, 293, 300, 311, 290, 295, 341, 6114, 670, 51656, 51656, 510, 13, 51710, 51710], "temperature": 0.0, "avg_logprob": -0.15702404294695174, "compression_ratio": 1.7077625570776256, "no_speech_prob": 3.905428911821218e-06}, {"id": 26, "seek": 10660, "start": 111.11999999999999, "end": 116.91999999999999, "text": " This is a one D array in Python, rather than a 2D matrix, which is what we had when we", "tokens": [50364, 18875, 293, 9834, 11, 597, 307, 983, 456, 311, 787, 257, 2167, 3732, 16904, 510, 13, 50590, 50590, 639, 307, 257, 472, 413, 10225, 294, 15329, 11, 2831, 813, 257, 568, 35, 8141, 11, 597, 307, 437, 321, 632, 562, 321, 50880, 50880, 632, 3834, 3732, 26179, 13, 51015, 51015, 407, 264, 700, 2158, 291, 643, 281, 14722, 307, 257, 37906, 5944, 3732, 16904, 472, 11, 2325, 662, 51308, 51308, 472, 11, 597, 307, 264, 700, 24433, 2158, 295, 257, 472, 11, 293, 300, 311, 290, 295, 341, 6114, 670, 51656, 51656, 510, 13, 51710, 51710], "temperature": 0.0, "avg_logprob": -0.15702404294695174, "compression_ratio": 1.7077625570776256, "no_speech_prob": 3.905428911821218e-06}, {"id": 27, "seek": 10660, "start": 116.91999999999999, "end": 119.61999999999999, "text": " had double square brackets.", "tokens": [50364, 18875, 293, 9834, 11, 597, 307, 983, 456, 311, 787, 257, 2167, 3732, 16904, 510, 13, 50590, 50590, 639, 307, 257, 472, 413, 10225, 294, 15329, 11, 2831, 813, 257, 568, 35, 8141, 11, 597, 307, 437, 321, 632, 562, 321, 50880, 50880, 632, 3834, 3732, 26179, 13, 51015, 51015, 407, 264, 700, 2158, 291, 643, 281, 14722, 307, 257, 37906, 5944, 3732, 16904, 472, 11, 2325, 662, 51308, 51308, 472, 11, 597, 307, 264, 700, 24433, 2158, 295, 257, 472, 11, 293, 300, 311, 290, 295, 341, 6114, 670, 51656, 51656, 510, 13, 51710, 51710], "temperature": 0.0, "avg_logprob": -0.15702404294695174, "compression_ratio": 1.7077625570776256, "no_speech_prob": 3.905428911821218e-06}, {"id": 28, "seek": 10660, "start": 119.61999999999999, "end": 125.47999999999999, "text": " So the first value you need to compute is a superscript square bracket one, subscript", "tokens": [50364, 18875, 293, 9834, 11, 597, 307, 983, 456, 311, 787, 257, 2167, 3732, 16904, 510, 13, 50590, 50590, 639, 307, 257, 472, 413, 10225, 294, 15329, 11, 2831, 813, 257, 568, 35, 8141, 11, 597, 307, 437, 321, 632, 562, 321, 50880, 50880, 632, 3834, 3732, 26179, 13, 51015, 51015, 407, 264, 700, 2158, 291, 643, 281, 14722, 307, 257, 37906, 5944, 3732, 16904, 472, 11, 2325, 662, 51308, 51308, 472, 11, 597, 307, 264, 700, 24433, 2158, 295, 257, 472, 11, 293, 300, 311, 290, 295, 341, 6114, 670, 51656, 51656, 510, 13, 51710, 51710], "temperature": 0.0, "avg_logprob": -0.15702404294695174, "compression_ratio": 1.7077625570776256, "no_speech_prob": 3.905428911821218e-06}, {"id": 29, "seek": 10660, "start": 125.47999999999999, "end": 132.44, "text": " one, which is the first activation value of a one, and that's g of this expression over", "tokens": [50364, 18875, 293, 9834, 11, 597, 307, 983, 456, 311, 787, 257, 2167, 3732, 16904, 510, 13, 50590, 50590, 639, 307, 257, 472, 413, 10225, 294, 15329, 11, 2831, 813, 257, 568, 35, 8141, 11, 597, 307, 437, 321, 632, 562, 321, 50880, 50880, 632, 3834, 3732, 26179, 13, 51015, 51015, 407, 264, 700, 2158, 291, 643, 281, 14722, 307, 257, 37906, 5944, 3732, 16904, 472, 11, 2325, 662, 51308, 51308, 472, 11, 597, 307, 264, 700, 24433, 2158, 295, 257, 472, 11, 293, 300, 311, 290, 295, 341, 6114, 670, 51656, 51656, 510, 13, 51710, 51710], "temperature": 0.0, "avg_logprob": -0.15702404294695174, "compression_ratio": 1.7077625570776256, "no_speech_prob": 3.905428911821218e-06}, {"id": 30, "seek": 10660, "start": 132.44, "end": 133.51999999999998, "text": " here.", "tokens": [50364, 18875, 293, 9834, 11, 597, 307, 983, 456, 311, 787, 257, 2167, 3732, 16904, 510, 13, 50590, 50590, 639, 307, 257, 472, 413, 10225, 294, 15329, 11, 2831, 813, 257, 568, 35, 8141, 11, 597, 307, 437, 321, 632, 562, 321, 50880, 50880, 632, 3834, 3732, 26179, 13, 51015, 51015, 407, 264, 700, 2158, 291, 643, 281, 14722, 307, 257, 37906, 5944, 3732, 16904, 472, 11, 2325, 662, 51308, 51308, 472, 11, 597, 307, 264, 700, 24433, 2158, 295, 257, 472, 11, 293, 300, 311, 290, 295, 341, 6114, 670, 51656, 51656, 510, 13, 51710, 51710], "temperature": 0.0, "avg_logprob": -0.15702404294695174, "compression_ratio": 1.7077625570776256, "no_speech_prob": 3.905428911821218e-06}, {"id": 31, "seek": 13352, "start": 133.52, "end": 141.20000000000002, "text": " So I'm going to use the convention on this slide that a term like w two one, I'm going", "tokens": [50364, 407, 286, 478, 516, 281, 764, 264, 10286, 322, 341, 4137, 300, 257, 1433, 411, 261, 732, 472, 11, 286, 478, 516, 50748, 50748, 281, 2906, 382, 257, 7006, 261, 732, 11, 293, 550, 2325, 662, 472, 11, 341, 37556, 472, 1441, 17251, 51132, 51132, 2325, 662, 472, 13, 51182, 51182, 407, 261, 732, 1355, 261, 37906, 5944, 732, 294, 3732, 26179, 293, 294, 2325, 662, 472, 13, 51516, 51516], "temperature": 0.0, "avg_logprob": -0.14666128158569336, "compression_ratio": 1.6838709677419355, "no_speech_prob": 2.8572490009537432e-06}, {"id": 32, "seek": 13352, "start": 141.20000000000002, "end": 148.88, "text": " to represent as a variable w two, and then subscript one, this underscore one denotes", "tokens": [50364, 407, 286, 478, 516, 281, 764, 264, 10286, 322, 341, 4137, 300, 257, 1433, 411, 261, 732, 472, 11, 286, 478, 516, 50748, 50748, 281, 2906, 382, 257, 7006, 261, 732, 11, 293, 550, 2325, 662, 472, 11, 341, 37556, 472, 1441, 17251, 51132, 51132, 2325, 662, 472, 13, 51182, 51182, 407, 261, 732, 1355, 261, 37906, 5944, 732, 294, 3732, 26179, 293, 294, 2325, 662, 472, 13, 51516, 51516], "temperature": 0.0, "avg_logprob": -0.14666128158569336, "compression_ratio": 1.6838709677419355, "no_speech_prob": 2.8572490009537432e-06}, {"id": 33, "seek": 13352, "start": 148.88, "end": 149.88, "text": " subscript one.", "tokens": [50364, 407, 286, 478, 516, 281, 764, 264, 10286, 322, 341, 4137, 300, 257, 1433, 411, 261, 732, 472, 11, 286, 478, 516, 50748, 50748, 281, 2906, 382, 257, 7006, 261, 732, 11, 293, 550, 2325, 662, 472, 11, 341, 37556, 472, 1441, 17251, 51132, 51132, 2325, 662, 472, 13, 51182, 51182, 407, 261, 732, 1355, 261, 37906, 5944, 732, 294, 3732, 26179, 293, 294, 2325, 662, 472, 13, 51516, 51516], "temperature": 0.0, "avg_logprob": -0.14666128158569336, "compression_ratio": 1.6838709677419355, "no_speech_prob": 2.8572490009537432e-06}, {"id": 34, "seek": 13352, "start": 149.88, "end": 156.56, "text": " So w two means w superscript two in square brackets and in subscript one.", "tokens": [50364, 407, 286, 478, 516, 281, 764, 264, 10286, 322, 341, 4137, 300, 257, 1433, 411, 261, 732, 472, 11, 286, 478, 516, 50748, 50748, 281, 2906, 382, 257, 7006, 261, 732, 11, 293, 550, 2325, 662, 472, 11, 341, 37556, 472, 1441, 17251, 51132, 51132, 2325, 662, 472, 13, 51182, 51182, 407, 261, 732, 1355, 261, 37906, 5944, 732, 294, 3732, 26179, 293, 294, 2325, 662, 472, 13, 51516, 51516], "temperature": 0.0, "avg_logprob": -0.14666128158569336, "compression_ratio": 1.6838709677419355, "no_speech_prob": 2.8572490009537432e-06}, {"id": 35, "seek": 15656, "start": 156.56, "end": 167.48, "text": " So to compute a one one, we have parameters w one one and b one one, which are say one", "tokens": [50364, 407, 281, 14722, 257, 472, 472, 11, 321, 362, 9834, 261, 472, 472, 293, 272, 472, 472, 11, 597, 366, 584, 472, 50910, 50910, 732, 293, 3671, 472, 13, 51038, 51038, 509, 576, 550, 14722, 710, 472, 472, 382, 264, 5893, 1674, 1296, 300, 13075, 261, 472, 472, 293, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.1390768716920097, "compression_ratio": 1.628099173553719, "no_speech_prob": 2.123307695001131e-06}, {"id": 36, "seek": 15656, "start": 167.48, "end": 170.04, "text": " two and negative one.", "tokens": [50364, 407, 281, 14722, 257, 472, 472, 11, 321, 362, 9834, 261, 472, 472, 293, 272, 472, 472, 11, 597, 366, 584, 472, 50910, 50910, 732, 293, 3671, 472, 13, 51038, 51038, 509, 576, 550, 14722, 710, 472, 472, 382, 264, 5893, 1674, 1296, 300, 13075, 261, 472, 472, 293, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.1390768716920097, "compression_ratio": 1.628099173553719, "no_speech_prob": 2.123307695001131e-06}, {"id": 37, "seek": 15656, "start": 170.04, "end": 178.56, "text": " You would then compute z one one as the dot product between that parameter w one one and", "tokens": [50364, 407, 281, 14722, 257, 472, 472, 11, 321, 362, 9834, 261, 472, 472, 293, 272, 472, 472, 11, 597, 366, 584, 472, 50910, 50910, 732, 293, 3671, 472, 13, 51038, 51038, 509, 576, 550, 14722, 710, 472, 472, 382, 264, 5893, 1674, 1296, 300, 13075, 261, 472, 472, 293, 51464, 51464], "temperature": 0.0, "avg_logprob": -0.1390768716920097, "compression_ratio": 1.628099173553719, "no_speech_prob": 2.123307695001131e-06}, {"id": 38, "seek": 17856, "start": 178.56, "end": 188.2, "text": " the input x and add it to be one one and then finally a one one is equal to g the safe point", "tokens": [50364, 264, 4846, 2031, 293, 909, 309, 281, 312, 472, 472, 293, 550, 2721, 257, 472, 472, 307, 2681, 281, 290, 264, 3273, 935, 50846, 50846, 2445, 6456, 281, 710, 472, 472, 13, 51044, 51044, 3087, 718, 311, 352, 322, 281, 14722, 257, 472, 732, 11, 597, 797, 538, 264, 10286, 286, 7619, 510, 307, 51366, 51366, 516, 281, 312, 257, 472, 732, 3720, 411, 300, 13, 51591, 51591], "temperature": 0.0, "avg_logprob": -0.20402772086007254, "compression_ratio": 1.5714285714285714, "no_speech_prob": 7.934430641398649e-07}, {"id": 39, "seek": 17856, "start": 188.2, "end": 192.16, "text": " function applied to z one one.", "tokens": [50364, 264, 4846, 2031, 293, 909, 309, 281, 312, 472, 472, 293, 550, 2721, 257, 472, 472, 307, 2681, 281, 290, 264, 3273, 935, 50846, 50846, 2445, 6456, 281, 710, 472, 472, 13, 51044, 51044, 3087, 718, 311, 352, 322, 281, 14722, 257, 472, 732, 11, 597, 797, 538, 264, 10286, 286, 7619, 510, 307, 51366, 51366, 516, 281, 312, 257, 472, 732, 3720, 411, 300, 13, 51591, 51591], "temperature": 0.0, "avg_logprob": -0.20402772086007254, "compression_ratio": 1.5714285714285714, "no_speech_prob": 7.934430641398649e-07}, {"id": 40, "seek": 17856, "start": 192.16, "end": 198.6, "text": " Next let's go on to compute a one two, which again by the convention I described here is", "tokens": [50364, 264, 4846, 2031, 293, 909, 309, 281, 312, 472, 472, 293, 550, 2721, 257, 472, 472, 307, 2681, 281, 290, 264, 3273, 935, 50846, 50846, 2445, 6456, 281, 710, 472, 472, 13, 51044, 51044, 3087, 718, 311, 352, 322, 281, 14722, 257, 472, 732, 11, 597, 797, 538, 264, 10286, 286, 7619, 510, 307, 51366, 51366, 516, 281, 312, 257, 472, 732, 3720, 411, 300, 13, 51591, 51591], "temperature": 0.0, "avg_logprob": -0.20402772086007254, "compression_ratio": 1.5714285714285714, "no_speech_prob": 7.934430641398649e-07}, {"id": 41, "seek": 17856, "start": 198.6, "end": 203.1, "text": " going to be a one two written like that.", "tokens": [50364, 264, 4846, 2031, 293, 909, 309, 281, 312, 472, 472, 293, 550, 2721, 257, 472, 472, 307, 2681, 281, 290, 264, 3273, 935, 50846, 50846, 2445, 6456, 281, 710, 472, 472, 13, 51044, 51044, 3087, 718, 311, 352, 322, 281, 14722, 257, 472, 732, 11, 597, 797, 538, 264, 10286, 286, 7619, 510, 307, 51366, 51366, 516, 281, 312, 257, 472, 732, 3720, 411, 300, 13, 51591, 51591], "temperature": 0.0, "avg_logprob": -0.20402772086007254, "compression_ratio": 1.5714285714285714, "no_speech_prob": 7.934430641398649e-07}, {"id": 42, "seek": 20310, "start": 203.1, "end": 210.0, "text": " So similar as what we did on the left, w one two is your two parameters minus three four,", "tokens": [50364, 407, 2531, 382, 437, 321, 630, 322, 264, 1411, 11, 261, 472, 732, 307, 428, 732, 9834, 3175, 1045, 1451, 11, 50709, 50709, 272, 472, 732, 307, 264, 1433, 272, 472, 732, 670, 456, 13, 50895, 50895, 407, 291, 14722, 710, 382, 341, 1433, 294, 264, 2808, 293, 550, 3079, 264, 3273, 935, 2445, 293, 51189, 51189, 550, 291, 917, 493, 365, 257, 472, 732, 293, 2721, 291, 360, 264, 912, 551, 281, 14722, 257, 472, 1045, 13, 51637, 51637], "temperature": 0.0, "avg_logprob": -0.17717254452589082, "compression_ratio": 1.7556818181818181, "no_speech_prob": 3.340501507409499e-06}, {"id": 43, "seek": 20310, "start": 210.0, "end": 213.72, "text": " b one two is the term b one two over there.", "tokens": [50364, 407, 2531, 382, 437, 321, 630, 322, 264, 1411, 11, 261, 472, 732, 307, 428, 732, 9834, 3175, 1045, 1451, 11, 50709, 50709, 272, 472, 732, 307, 264, 1433, 272, 472, 732, 670, 456, 13, 50895, 50895, 407, 291, 14722, 710, 382, 341, 1433, 294, 264, 2808, 293, 550, 3079, 264, 3273, 935, 2445, 293, 51189, 51189, 550, 291, 917, 493, 365, 257, 472, 732, 293, 2721, 291, 360, 264, 912, 551, 281, 14722, 257, 472, 1045, 13, 51637, 51637], "temperature": 0.0, "avg_logprob": -0.17717254452589082, "compression_ratio": 1.7556818181818181, "no_speech_prob": 3.340501507409499e-06}, {"id": 44, "seek": 20310, "start": 213.72, "end": 219.6, "text": " So you compute z as this term in the middle and then apply the safe point function and", "tokens": [50364, 407, 2531, 382, 437, 321, 630, 322, 264, 1411, 11, 261, 472, 732, 307, 428, 732, 9834, 3175, 1045, 1451, 11, 50709, 50709, 272, 472, 732, 307, 264, 1433, 272, 472, 732, 670, 456, 13, 50895, 50895, 407, 291, 14722, 710, 382, 341, 1433, 294, 264, 2808, 293, 550, 3079, 264, 3273, 935, 2445, 293, 51189, 51189, 550, 291, 917, 493, 365, 257, 472, 732, 293, 2721, 291, 360, 264, 912, 551, 281, 14722, 257, 472, 1045, 13, 51637, 51637], "temperature": 0.0, "avg_logprob": -0.17717254452589082, "compression_ratio": 1.7556818181818181, "no_speech_prob": 3.340501507409499e-06}, {"id": 45, "seek": 20310, "start": 219.6, "end": 228.56, "text": " then you end up with a one two and finally you do the same thing to compute a one three.", "tokens": [50364, 407, 2531, 382, 437, 321, 630, 322, 264, 1411, 11, 261, 472, 732, 307, 428, 732, 9834, 3175, 1045, 1451, 11, 50709, 50709, 272, 472, 732, 307, 264, 1433, 272, 472, 732, 670, 456, 13, 50895, 50895, 407, 291, 14722, 710, 382, 341, 1433, 294, 264, 2808, 293, 550, 3079, 264, 3273, 935, 2445, 293, 51189, 51189, 550, 291, 917, 493, 365, 257, 472, 732, 293, 2721, 291, 360, 264, 912, 551, 281, 14722, 257, 472, 1045, 13, 51637, 51637], "temperature": 0.0, "avg_logprob": -0.17717254452589082, "compression_ratio": 1.7556818181818181, "no_speech_prob": 3.340501507409499e-06}, {"id": 46, "seek": 22856, "start": 228.56, "end": 236.68, "text": " Now you've computed these three values a one one, a one two and a one three and we like", "tokens": [50364, 823, 291, 600, 40610, 613, 1045, 4190, 257, 472, 472, 11, 257, 472, 732, 293, 257, 472, 1045, 293, 321, 411, 50770, 50770, 281, 747, 613, 1045, 3547, 293, 1594, 552, 1214, 666, 364, 10225, 281, 976, 291, 257, 472, 493, 51102, 51102, 510, 11, 597, 307, 264, 5598, 295, 264, 700, 4583, 13, 51230, 51230, 400, 370, 291, 360, 300, 538, 40149, 552, 1214, 1228, 257, 22592, 47, 88, 10225, 382, 10002, 13, 51528, 51528, 407, 586, 291, 600, 40610, 257, 472, 13, 51686, 51686], "temperature": 0.0, "avg_logprob": -0.09982771223241632, "compression_ratio": 1.712041884816754, "no_speech_prob": 3.187506763424608e-06}, {"id": 47, "seek": 22856, "start": 236.68, "end": 243.32, "text": " to take these three numbers and group them together into an array to give you a one up", "tokens": [50364, 823, 291, 600, 40610, 613, 1045, 4190, 257, 472, 472, 11, 257, 472, 732, 293, 257, 472, 1045, 293, 321, 411, 50770, 50770, 281, 747, 613, 1045, 3547, 293, 1594, 552, 1214, 666, 364, 10225, 281, 976, 291, 257, 472, 493, 51102, 51102, 510, 11, 597, 307, 264, 5598, 295, 264, 700, 4583, 13, 51230, 51230, 400, 370, 291, 360, 300, 538, 40149, 552, 1214, 1228, 257, 22592, 47, 88, 10225, 382, 10002, 13, 51528, 51528, 407, 586, 291, 600, 40610, 257, 472, 13, 51686, 51686], "temperature": 0.0, "avg_logprob": -0.09982771223241632, "compression_ratio": 1.712041884816754, "no_speech_prob": 3.187506763424608e-06}, {"id": 48, "seek": 22856, "start": 243.32, "end": 245.88, "text": " here, which is the output of the first layer.", "tokens": [50364, 823, 291, 600, 40610, 613, 1045, 4190, 257, 472, 472, 11, 257, 472, 732, 293, 257, 472, 1045, 293, 321, 411, 50770, 50770, 281, 747, 613, 1045, 3547, 293, 1594, 552, 1214, 666, 364, 10225, 281, 976, 291, 257, 472, 493, 51102, 51102, 510, 11, 597, 307, 264, 5598, 295, 264, 700, 4583, 13, 51230, 51230, 400, 370, 291, 360, 300, 538, 40149, 552, 1214, 1228, 257, 22592, 47, 88, 10225, 382, 10002, 13, 51528, 51528, 407, 586, 291, 600, 40610, 257, 472, 13, 51686, 51686], "temperature": 0.0, "avg_logprob": -0.09982771223241632, "compression_ratio": 1.712041884816754, "no_speech_prob": 3.187506763424608e-06}, {"id": 49, "seek": 22856, "start": 245.88, "end": 251.84, "text": " And so you do that by grouping them together using a NumPy array as follows.", "tokens": [50364, 823, 291, 600, 40610, 613, 1045, 4190, 257, 472, 472, 11, 257, 472, 732, 293, 257, 472, 1045, 293, 321, 411, 50770, 50770, 281, 747, 613, 1045, 3547, 293, 1594, 552, 1214, 666, 364, 10225, 281, 976, 291, 257, 472, 493, 51102, 51102, 510, 11, 597, 307, 264, 5598, 295, 264, 700, 4583, 13, 51230, 51230, 400, 370, 291, 360, 300, 538, 40149, 552, 1214, 1228, 257, 22592, 47, 88, 10225, 382, 10002, 13, 51528, 51528, 407, 586, 291, 600, 40610, 257, 472, 13, 51686, 51686], "temperature": 0.0, "avg_logprob": -0.09982771223241632, "compression_ratio": 1.712041884816754, "no_speech_prob": 3.187506763424608e-06}, {"id": 50, "seek": 22856, "start": 251.84, "end": 255.0, "text": " So now you've computed a one.", "tokens": [50364, 823, 291, 600, 40610, 613, 1045, 4190, 257, 472, 472, 11, 257, 472, 732, 293, 257, 472, 1045, 293, 321, 411, 50770, 50770, 281, 747, 613, 1045, 3547, 293, 1594, 552, 1214, 666, 364, 10225, 281, 976, 291, 257, 472, 493, 51102, 51102, 510, 11, 597, 307, 264, 5598, 295, 264, 700, 4583, 13, 51230, 51230, 400, 370, 291, 360, 300, 538, 40149, 552, 1214, 1228, 257, 22592, 47, 88, 10225, 382, 10002, 13, 51528, 51528, 407, 586, 291, 600, 40610, 257, 472, 13, 51686, 51686], "temperature": 0.0, "avg_logprob": -0.09982771223241632, "compression_ratio": 1.712041884816754, "no_speech_prob": 3.187506763424608e-06}, {"id": 51, "seek": 25500, "start": 255.0, "end": 260.88, "text": " Let's implement the second layer as well to compute the output a two.", "tokens": [50364, 961, 311, 4445, 264, 1150, 4583, 382, 731, 281, 14722, 264, 5598, 257, 732, 13, 50658, 50658, 407, 257, 732, 307, 40610, 1228, 341, 6114, 293, 370, 321, 576, 362, 9834, 261, 732, 472, 51030, 51030, 293, 272, 732, 472, 11760, 281, 613, 9834, 293, 550, 291, 576, 14722, 710, 382, 264, 5893, 1674, 51384, 51384, 1296, 261, 732, 472, 293, 257, 472, 293, 909, 272, 732, 472, 293, 550, 3079, 264, 3273, 935, 2445, 51666, 51666, 281, 483, 257, 732, 472, 293, 300, 311, 309, 13, 51862, 51862], "temperature": 0.0, "avg_logprob": -0.10413143660995987, "compression_ratio": 1.8535353535353536, "no_speech_prob": 3.555913735908689e-06}, {"id": 52, "seek": 25500, "start": 260.88, "end": 268.32, "text": " So a two is computed using this expression and so we would have parameters w two one", "tokens": [50364, 961, 311, 4445, 264, 1150, 4583, 382, 731, 281, 14722, 264, 5598, 257, 732, 13, 50658, 50658, 407, 257, 732, 307, 40610, 1228, 341, 6114, 293, 370, 321, 576, 362, 9834, 261, 732, 472, 51030, 51030, 293, 272, 732, 472, 11760, 281, 613, 9834, 293, 550, 291, 576, 14722, 710, 382, 264, 5893, 1674, 51384, 51384, 1296, 261, 732, 472, 293, 257, 472, 293, 909, 272, 732, 472, 293, 550, 3079, 264, 3273, 935, 2445, 51666, 51666, 281, 483, 257, 732, 472, 293, 300, 311, 309, 13, 51862, 51862], "temperature": 0.0, "avg_logprob": -0.10413143660995987, "compression_ratio": 1.8535353535353536, "no_speech_prob": 3.555913735908689e-06}, {"id": 53, "seek": 25500, "start": 268.32, "end": 275.4, "text": " and b two one corresponding to these parameters and then you would compute z as the dot product", "tokens": [50364, 961, 311, 4445, 264, 1150, 4583, 382, 731, 281, 14722, 264, 5598, 257, 732, 13, 50658, 50658, 407, 257, 732, 307, 40610, 1228, 341, 6114, 293, 370, 321, 576, 362, 9834, 261, 732, 472, 51030, 51030, 293, 272, 732, 472, 11760, 281, 613, 9834, 293, 550, 291, 576, 14722, 710, 382, 264, 5893, 1674, 51384, 51384, 1296, 261, 732, 472, 293, 257, 472, 293, 909, 272, 732, 472, 293, 550, 3079, 264, 3273, 935, 2445, 51666, 51666, 281, 483, 257, 732, 472, 293, 300, 311, 309, 13, 51862, 51862], "temperature": 0.0, "avg_logprob": -0.10413143660995987, "compression_ratio": 1.8535353535353536, "no_speech_prob": 3.555913735908689e-06}, {"id": 54, "seek": 25500, "start": 275.4, "end": 281.04, "text": " between w two one and a one and add b two one and then apply the safe point function", "tokens": [50364, 961, 311, 4445, 264, 1150, 4583, 382, 731, 281, 14722, 264, 5598, 257, 732, 13, 50658, 50658, 407, 257, 732, 307, 40610, 1228, 341, 6114, 293, 370, 321, 576, 362, 9834, 261, 732, 472, 51030, 51030, 293, 272, 732, 472, 11760, 281, 613, 9834, 293, 550, 291, 576, 14722, 710, 382, 264, 5893, 1674, 51384, 51384, 1296, 261, 732, 472, 293, 257, 472, 293, 909, 272, 732, 472, 293, 550, 3079, 264, 3273, 935, 2445, 51666, 51666, 281, 483, 257, 732, 472, 293, 300, 311, 309, 13, 51862, 51862], "temperature": 0.0, "avg_logprob": -0.10413143660995987, "compression_ratio": 1.8535353535353536, "no_speech_prob": 3.555913735908689e-06}, {"id": 55, "seek": 25500, "start": 281.04, "end": 284.96, "text": " to get a two one and that's it.", "tokens": [50364, 961, 311, 4445, 264, 1150, 4583, 382, 731, 281, 14722, 264, 5598, 257, 732, 13, 50658, 50658, 407, 257, 732, 307, 40610, 1228, 341, 6114, 293, 370, 321, 576, 362, 9834, 261, 732, 472, 51030, 51030, 293, 272, 732, 472, 11760, 281, 613, 9834, 293, 550, 291, 576, 14722, 710, 382, 264, 5893, 1674, 51384, 51384, 1296, 261, 732, 472, 293, 257, 472, 293, 909, 272, 732, 472, 293, 550, 3079, 264, 3273, 935, 2445, 51666, 51666, 281, 483, 257, 732, 472, 293, 300, 311, 309, 13, 51862, 51862], "temperature": 0.0, "avg_logprob": -0.10413143660995987, "compression_ratio": 1.8535353535353536, "no_speech_prob": 3.555913735908689e-06}, {"id": 56, "seek": 28496, "start": 284.96, "end": 289.59999999999997, "text": " That's how you implement Ford prop using just Python and NumPy.", "tokens": [50364, 663, 311, 577, 291, 4445, 11961, 2365, 1228, 445, 15329, 293, 22592, 47, 88, 13, 50596, 50596, 823, 456, 366, 257, 688, 295, 15277, 294, 341, 3028, 295, 3089, 300, 291, 445, 1866, 13, 50820, 50820, 961, 311, 294, 264, 958, 960, 574, 412, 577, 291, 393, 20460, 341, 281, 4445, 11961, 2365, 337, 257, 51056, 51056, 544, 2674, 18161, 3209, 2831, 813, 1152, 17720, 309, 337, 633, 2167, 34090, 411, 321, 51286, 51286, 445, 630, 13, 51345, 51345], "temperature": 0.0, "avg_logprob": -0.13694147416103034, "compression_ratio": 1.5940594059405941, "no_speech_prob": 1.3002488230995368e-05}, {"id": 57, "seek": 28496, "start": 289.59999999999997, "end": 294.08, "text": " Now there are a lot of expressions in this page of code that you just saw.", "tokens": [50364, 663, 311, 577, 291, 4445, 11961, 2365, 1228, 445, 15329, 293, 22592, 47, 88, 13, 50596, 50596, 823, 456, 366, 257, 688, 295, 15277, 294, 341, 3028, 295, 3089, 300, 291, 445, 1866, 13, 50820, 50820, 961, 311, 294, 264, 958, 960, 574, 412, 577, 291, 393, 20460, 341, 281, 4445, 11961, 2365, 337, 257, 51056, 51056, 544, 2674, 18161, 3209, 2831, 813, 1152, 17720, 309, 337, 633, 2167, 34090, 411, 321, 51286, 51286, 445, 630, 13, 51345, 51345], "temperature": 0.0, "avg_logprob": -0.13694147416103034, "compression_ratio": 1.5940594059405941, "no_speech_prob": 1.3002488230995368e-05}, {"id": 58, "seek": 28496, "start": 294.08, "end": 298.79999999999995, "text": " Let's in the next video look at how you can simplify this to implement Ford prop for a", "tokens": [50364, 663, 311, 577, 291, 4445, 11961, 2365, 1228, 445, 15329, 293, 22592, 47, 88, 13, 50596, 50596, 823, 456, 366, 257, 688, 295, 15277, 294, 341, 3028, 295, 3089, 300, 291, 445, 1866, 13, 50820, 50820, 961, 311, 294, 264, 958, 960, 574, 412, 577, 291, 393, 20460, 341, 281, 4445, 11961, 2365, 337, 257, 51056, 51056, 544, 2674, 18161, 3209, 2831, 813, 1152, 17720, 309, 337, 633, 2167, 34090, 411, 321, 51286, 51286, 445, 630, 13, 51345, 51345], "temperature": 0.0, "avg_logprob": -0.13694147416103034, "compression_ratio": 1.5940594059405941, "no_speech_prob": 1.3002488230995368e-05}, {"id": 59, "seek": 28496, "start": 298.79999999999995, "end": 303.4, "text": " more general neural network rather than hard coding it for every single neuron like we", "tokens": [50364, 663, 311, 577, 291, 4445, 11961, 2365, 1228, 445, 15329, 293, 22592, 47, 88, 13, 50596, 50596, 823, 456, 366, 257, 688, 295, 15277, 294, 341, 3028, 295, 3089, 300, 291, 445, 1866, 13, 50820, 50820, 961, 311, 294, 264, 958, 960, 574, 412, 577, 291, 393, 20460, 341, 281, 4445, 11961, 2365, 337, 257, 51056, 51056, 544, 2674, 18161, 3209, 2831, 813, 1152, 17720, 309, 337, 633, 2167, 34090, 411, 321, 51286, 51286, 445, 630, 13, 51345, 51345], "temperature": 0.0, "avg_logprob": -0.13694147416103034, "compression_ratio": 1.5940594059405941, "no_speech_prob": 1.3002488230995368e-05}, {"id": 60, "seek": 28496, "start": 303.4, "end": 304.58, "text": " just did.", "tokens": [50364, 663, 311, 577, 291, 4445, 11961, 2365, 1228, 445, 15329, 293, 22592, 47, 88, 13, 50596, 50596, 823, 456, 366, 257, 688, 295, 15277, 294, 341, 3028, 295, 3089, 300, 291, 445, 1866, 13, 50820, 50820, 961, 311, 294, 264, 958, 960, 574, 412, 577, 291, 393, 20460, 341, 281, 4445, 11961, 2365, 337, 257, 51056, 51056, 544, 2674, 18161, 3209, 2831, 813, 1152, 17720, 309, 337, 633, 2167, 34090, 411, 321, 51286, 51286, 445, 630, 13, 51345, 51345], "temperature": 0.0, "avg_logprob": -0.13694147416103034, "compression_ratio": 1.5940594059405941, "no_speech_prob": 1.3002488230995368e-05}, {"id": 61, "seek": 30458, "start": 304.58, "end": 315.68, "text": " So let's go see that in the next video.", "tokens": [50364, 407, 718, 311, 352, 536, 300, 294, 264, 958, 960, 13, 50919], "temperature": 0.0, "avg_logprob": -0.390186071395874, "compression_ratio": 0.8666666666666667, "no_speech_prob": 0.00010202548583038151}], "language": "en", "video_id": "ydKVT95-Ufo", "entity": "ML Specialization, Andrew Ng (2022)"}}
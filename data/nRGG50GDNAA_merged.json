{"video_id": "nRGG50GDNAA", "title": "2.3 Linear Regression with Multiple Variables | Vectorization part 2 --[Machine Learning |Andrew Ng]", "description": "First Course:\nSupervised Machine Learning : Regression and Classification.\n\nIf you liked the content please subscribe and put a little blue thumb.\nTake heart!", "author": "Machine Learning", "keywords": [], "channel_url": "https://www.youtube.com/channel/UClG5HEAJJFOavT_UolqYROQ", "length": 412, "views": 317, "publish_date": "11/04/2022", "timestamp": 1661040000, "entity": "ML Specialization, Andrew Ng (2022)", "transcript": {"text": " I remember when I first learned about vectorization, I spent many hours on my computer taking an un-vectorized version of an algorithm, running it, see how long it ran, and then running a vectorized version of the code and seeing how much faster that ran. And I just spent hours playing with that. And it frankly blew my mind that the same algorithm, vectorized, would run so much faster. It felt almost like a magic trick to me. In this video, let's figure out how this magic trick really works. Let's take a deeper look at how a vectorized implementation may work on your computer behind the scenes. Let's look at this for loop. A for loop like this runs without vectorization. So if j ranges from 0 to, say, 15, this piece of code performs operations one after another. On the first time step, which I'm going to write as time 0 or t0, it first operates on the values at index 0. At the next time step, it calculates values corresponding to index 1 and so on until the fifth theme step, where it computes that. In other words, it calculates these computations one step at a time, one step after another. In contrast, this function in NumPy is implemented in the computer hardware with vectorization. So the computer can get all values of the vectors w and x, and in a single step, it multiplies each pair of w and x with each other all at the same time in parallel. Then after that, the computer takes these 16 numbers and uses specialized hardware to add them all together very efficiently, rather than needing to carry out distinct additions one after another to add up these 16 numbers. This means that code with vectorization can perform calculations in much less time than code without vectorization. And this matters more when you're running learning algorithms on large data sets or trying to train large models, which is often the case with machine learning. So that's why being able to write vectorized implementations of learning algorithms has been a key step to getting learning algorithms to run efficiently and therefore scale well to the large data sets that many modern machine learning algorithms now have to operate on. Now let's take a look at a concrete example of how this helps with implementing multiple linear regression, that is linear regression with multiple input features. Say you have a problem with 16 features and 16 parameters w1 through w16 in addition to the parameter b. You calculated 16 derivative terms for these 16 weights and in code, maybe you stored the values of w and d in two non-pyrotries with d storing the values of the derivatives. For this example, I'm just going to ignore the parameter b. Now you want to compute and update for each of these 16 parameters. So wj is updated to wj minus the learning rate, say 0.1 times dj for j from 1 through 16. In code, without vectorization, you would be doing something like this, update w1 to be w1 minus the learning rate 0.1 times d1, next update w2 similarly and so on through w16, updated as w16 minus 0.1 times d16. In code without vectorization, you could use a full loop like this for j in range 0, 16, that again goes from 0 to 15, set wj equals wj minus 0.1 times dj. In contrast, with vectorization, you can imagine the computer's parallel processing hardware like this. It takes all 16 values in the vector w and subtracts in parallel 0.1 times all 16 values in the vector d and assign all 16 calculations back to w all at the same time and all in one step. In code, you can implement this as follows. W is assigned to w minus 0.1 times d. Behind the scenes, the computer takes these numpy arrays w and d and uses parallel processing hardware to carry out all 16 computations efficiently. So using a vectorized implementation, you should get a much more efficient implementation of linear regression. Maybe the speed difference won't be huge if you have 16 features, but if you have thousands of features and perhaps very large training sets, this type of vectorized implementation will make a huge difference in the running time of your learning algorithm. It could be the difference between code finishing in one or two minutes versus taking many, many hours to do the same thing. In the optional lab that follows this video, you see an introduction to one of the most used Python libraries in machine learning, which we've already touched on in this video called numpy. You see how they create vectors in code, and these vectors or lists of numbers are called numpy arrays. And you also see how to take the dot product of two vectors using a numpy function called dot. And you also get to see how vectorized code, such as using the dot function, can run much faster than a for loop. In fact, you get to time this code yourself and hopefully see it run much faster. This optional lab introduces a fair amount of new numpy syntax. So when you read through the optional lab, please don't feel like you have to understand all the code right away. But you can save this notebook and use it as a reference to look at when you're working with data stored in numpy arrays. So congrats on finishing this video on vectorization. You've learned one of the most important and useful techniques in implementing machine learning algorithms. In the next video, we'll put the math of multiple linear regression together with vectorization so that you really implement gradient descent for multiple linear regression with vectorization. Let's go on to the next video.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 8.08, "text": " I remember when I first learned about vectorization, I spent many hours on my computer taking an", "tokens": [50364, 286, 1604, 562, 286, 700, 3264, 466, 8062, 2144, 11, 286, 4418, 867, 2496, 322, 452, 3820, 1940, 364, 50768, 50768, 517, 12, 303, 1672, 1602, 3037, 295, 364, 9284, 11, 2614, 309, 11, 536, 577, 938, 309, 5872, 11, 293, 550, 2614, 51009, 51009, 257, 8062, 1602, 3037, 295, 264, 3089, 293, 2577, 577, 709, 4663, 300, 5872, 13, 51174, 51174, 400, 286, 445, 4418, 2496, 2433, 365, 300, 13, 51296, 51296, 400, 309, 11939, 19075, 452, 1575, 300, 264, 912, 9284, 11, 8062, 1602, 11, 576, 1190, 370, 709, 4663, 13, 51576, 51576, 467, 2762, 1920, 411, 257, 5585, 4282, 281, 385, 13, 51722, 51722], "temperature": 0.0, "avg_logprob": -0.13679159671888438, "compression_ratio": 1.7875, "no_speech_prob": 0.09521620720624924}, {"id": 1, "seek": 0, "start": 8.08, "end": 12.9, "text": " un-vectorized version of an algorithm, running it, see how long it ran, and then running", "tokens": [50364, 286, 1604, 562, 286, 700, 3264, 466, 8062, 2144, 11, 286, 4418, 867, 2496, 322, 452, 3820, 1940, 364, 50768, 50768, 517, 12, 303, 1672, 1602, 3037, 295, 364, 9284, 11, 2614, 309, 11, 536, 577, 938, 309, 5872, 11, 293, 550, 2614, 51009, 51009, 257, 8062, 1602, 3037, 295, 264, 3089, 293, 2577, 577, 709, 4663, 300, 5872, 13, 51174, 51174, 400, 286, 445, 4418, 2496, 2433, 365, 300, 13, 51296, 51296, 400, 309, 11939, 19075, 452, 1575, 300, 264, 912, 9284, 11, 8062, 1602, 11, 576, 1190, 370, 709, 4663, 13, 51576, 51576, 467, 2762, 1920, 411, 257, 5585, 4282, 281, 385, 13, 51722, 51722], "temperature": 0.0, "avg_logprob": -0.13679159671888438, "compression_ratio": 1.7875, "no_speech_prob": 0.09521620720624924}, {"id": 2, "seek": 0, "start": 12.9, "end": 16.2, "text": " a vectorized version of the code and seeing how much faster that ran.", "tokens": [50364, 286, 1604, 562, 286, 700, 3264, 466, 8062, 2144, 11, 286, 4418, 867, 2496, 322, 452, 3820, 1940, 364, 50768, 50768, 517, 12, 303, 1672, 1602, 3037, 295, 364, 9284, 11, 2614, 309, 11, 536, 577, 938, 309, 5872, 11, 293, 550, 2614, 51009, 51009, 257, 8062, 1602, 3037, 295, 264, 3089, 293, 2577, 577, 709, 4663, 300, 5872, 13, 51174, 51174, 400, 286, 445, 4418, 2496, 2433, 365, 300, 13, 51296, 51296, 400, 309, 11939, 19075, 452, 1575, 300, 264, 912, 9284, 11, 8062, 1602, 11, 576, 1190, 370, 709, 4663, 13, 51576, 51576, 467, 2762, 1920, 411, 257, 5585, 4282, 281, 385, 13, 51722, 51722], "temperature": 0.0, "avg_logprob": -0.13679159671888438, "compression_ratio": 1.7875, "no_speech_prob": 0.09521620720624924}, {"id": 3, "seek": 0, "start": 16.2, "end": 18.64, "text": " And I just spent hours playing with that.", "tokens": [50364, 286, 1604, 562, 286, 700, 3264, 466, 8062, 2144, 11, 286, 4418, 867, 2496, 322, 452, 3820, 1940, 364, 50768, 50768, 517, 12, 303, 1672, 1602, 3037, 295, 364, 9284, 11, 2614, 309, 11, 536, 577, 938, 309, 5872, 11, 293, 550, 2614, 51009, 51009, 257, 8062, 1602, 3037, 295, 264, 3089, 293, 2577, 577, 709, 4663, 300, 5872, 13, 51174, 51174, 400, 286, 445, 4418, 2496, 2433, 365, 300, 13, 51296, 51296, 400, 309, 11939, 19075, 452, 1575, 300, 264, 912, 9284, 11, 8062, 1602, 11, 576, 1190, 370, 709, 4663, 13, 51576, 51576, 467, 2762, 1920, 411, 257, 5585, 4282, 281, 385, 13, 51722, 51722], "temperature": 0.0, "avg_logprob": -0.13679159671888438, "compression_ratio": 1.7875, "no_speech_prob": 0.09521620720624924}, {"id": 4, "seek": 0, "start": 18.64, "end": 24.240000000000002, "text": " And it frankly blew my mind that the same algorithm, vectorized, would run so much faster.", "tokens": [50364, 286, 1604, 562, 286, 700, 3264, 466, 8062, 2144, 11, 286, 4418, 867, 2496, 322, 452, 3820, 1940, 364, 50768, 50768, 517, 12, 303, 1672, 1602, 3037, 295, 364, 9284, 11, 2614, 309, 11, 536, 577, 938, 309, 5872, 11, 293, 550, 2614, 51009, 51009, 257, 8062, 1602, 3037, 295, 264, 3089, 293, 2577, 577, 709, 4663, 300, 5872, 13, 51174, 51174, 400, 286, 445, 4418, 2496, 2433, 365, 300, 13, 51296, 51296, 400, 309, 11939, 19075, 452, 1575, 300, 264, 912, 9284, 11, 8062, 1602, 11, 576, 1190, 370, 709, 4663, 13, 51576, 51576, 467, 2762, 1920, 411, 257, 5585, 4282, 281, 385, 13, 51722, 51722], "temperature": 0.0, "avg_logprob": -0.13679159671888438, "compression_ratio": 1.7875, "no_speech_prob": 0.09521620720624924}, {"id": 5, "seek": 0, "start": 24.240000000000002, "end": 27.16, "text": " It felt almost like a magic trick to me.", "tokens": [50364, 286, 1604, 562, 286, 700, 3264, 466, 8062, 2144, 11, 286, 4418, 867, 2496, 322, 452, 3820, 1940, 364, 50768, 50768, 517, 12, 303, 1672, 1602, 3037, 295, 364, 9284, 11, 2614, 309, 11, 536, 577, 938, 309, 5872, 11, 293, 550, 2614, 51009, 51009, 257, 8062, 1602, 3037, 295, 264, 3089, 293, 2577, 577, 709, 4663, 300, 5872, 13, 51174, 51174, 400, 286, 445, 4418, 2496, 2433, 365, 300, 13, 51296, 51296, 400, 309, 11939, 19075, 452, 1575, 300, 264, 912, 9284, 11, 8062, 1602, 11, 576, 1190, 370, 709, 4663, 13, 51576, 51576, 467, 2762, 1920, 411, 257, 5585, 4282, 281, 385, 13, 51722, 51722], "temperature": 0.0, "avg_logprob": -0.13679159671888438, "compression_ratio": 1.7875, "no_speech_prob": 0.09521620720624924}, {"id": 6, "seek": 2716, "start": 27.16, "end": 31.44, "text": " In this video, let's figure out how this magic trick really works.", "tokens": [50364, 682, 341, 960, 11, 718, 311, 2573, 484, 577, 341, 5585, 4282, 534, 1985, 13, 50578, 50578, 961, 311, 747, 257, 7731, 574, 412, 577, 257, 8062, 1602, 11420, 815, 589, 322, 428, 3820, 2261, 50810, 50810, 264, 8026, 13, 50872, 50872, 961, 311, 574, 412, 341, 337, 6367, 13, 50978, 50978, 316, 337, 6367, 411, 341, 6676, 1553, 8062, 2144, 13, 51164, 51164, 407, 498, 361, 22526, 490, 1958, 281, 11, 584, 11, 2119, 11, 341, 2522, 295, 3089, 26213, 7705, 472, 934, 1071, 13, 51639, 51639], "temperature": 0.0, "avg_logprob": -0.10097748438517253, "compression_ratio": 1.5688073394495412, "no_speech_prob": 1.3845582543581259e-05}, {"id": 7, "seek": 2716, "start": 31.44, "end": 36.08, "text": " Let's take a deeper look at how a vectorized implementation may work on your computer behind", "tokens": [50364, 682, 341, 960, 11, 718, 311, 2573, 484, 577, 341, 5585, 4282, 534, 1985, 13, 50578, 50578, 961, 311, 747, 257, 7731, 574, 412, 577, 257, 8062, 1602, 11420, 815, 589, 322, 428, 3820, 2261, 50810, 50810, 264, 8026, 13, 50872, 50872, 961, 311, 574, 412, 341, 337, 6367, 13, 50978, 50978, 316, 337, 6367, 411, 341, 6676, 1553, 8062, 2144, 13, 51164, 51164, 407, 498, 361, 22526, 490, 1958, 281, 11, 584, 11, 2119, 11, 341, 2522, 295, 3089, 26213, 7705, 472, 934, 1071, 13, 51639, 51639], "temperature": 0.0, "avg_logprob": -0.10097748438517253, "compression_ratio": 1.5688073394495412, "no_speech_prob": 1.3845582543581259e-05}, {"id": 8, "seek": 2716, "start": 36.08, "end": 37.32, "text": " the scenes.", "tokens": [50364, 682, 341, 960, 11, 718, 311, 2573, 484, 577, 341, 5585, 4282, 534, 1985, 13, 50578, 50578, 961, 311, 747, 257, 7731, 574, 412, 577, 257, 8062, 1602, 11420, 815, 589, 322, 428, 3820, 2261, 50810, 50810, 264, 8026, 13, 50872, 50872, 961, 311, 574, 412, 341, 337, 6367, 13, 50978, 50978, 316, 337, 6367, 411, 341, 6676, 1553, 8062, 2144, 13, 51164, 51164, 407, 498, 361, 22526, 490, 1958, 281, 11, 584, 11, 2119, 11, 341, 2522, 295, 3089, 26213, 7705, 472, 934, 1071, 13, 51639, 51639], "temperature": 0.0, "avg_logprob": -0.10097748438517253, "compression_ratio": 1.5688073394495412, "no_speech_prob": 1.3845582543581259e-05}, {"id": 9, "seek": 2716, "start": 37.32, "end": 39.44, "text": " Let's look at this for loop.", "tokens": [50364, 682, 341, 960, 11, 718, 311, 2573, 484, 577, 341, 5585, 4282, 534, 1985, 13, 50578, 50578, 961, 311, 747, 257, 7731, 574, 412, 577, 257, 8062, 1602, 11420, 815, 589, 322, 428, 3820, 2261, 50810, 50810, 264, 8026, 13, 50872, 50872, 961, 311, 574, 412, 341, 337, 6367, 13, 50978, 50978, 316, 337, 6367, 411, 341, 6676, 1553, 8062, 2144, 13, 51164, 51164, 407, 498, 361, 22526, 490, 1958, 281, 11, 584, 11, 2119, 11, 341, 2522, 295, 3089, 26213, 7705, 472, 934, 1071, 13, 51639, 51639], "temperature": 0.0, "avg_logprob": -0.10097748438517253, "compression_ratio": 1.5688073394495412, "no_speech_prob": 1.3845582543581259e-05}, {"id": 10, "seek": 2716, "start": 39.44, "end": 43.16, "text": " A for loop like this runs without vectorization.", "tokens": [50364, 682, 341, 960, 11, 718, 311, 2573, 484, 577, 341, 5585, 4282, 534, 1985, 13, 50578, 50578, 961, 311, 747, 257, 7731, 574, 412, 577, 257, 8062, 1602, 11420, 815, 589, 322, 428, 3820, 2261, 50810, 50810, 264, 8026, 13, 50872, 50872, 961, 311, 574, 412, 341, 337, 6367, 13, 50978, 50978, 316, 337, 6367, 411, 341, 6676, 1553, 8062, 2144, 13, 51164, 51164, 407, 498, 361, 22526, 490, 1958, 281, 11, 584, 11, 2119, 11, 341, 2522, 295, 3089, 26213, 7705, 472, 934, 1071, 13, 51639, 51639], "temperature": 0.0, "avg_logprob": -0.10097748438517253, "compression_ratio": 1.5688073394495412, "no_speech_prob": 1.3845582543581259e-05}, {"id": 11, "seek": 2716, "start": 43.16, "end": 52.66, "text": " So if j ranges from 0 to, say, 15, this piece of code performs operations one after another.", "tokens": [50364, 682, 341, 960, 11, 718, 311, 2573, 484, 577, 341, 5585, 4282, 534, 1985, 13, 50578, 50578, 961, 311, 747, 257, 7731, 574, 412, 577, 257, 8062, 1602, 11420, 815, 589, 322, 428, 3820, 2261, 50810, 50810, 264, 8026, 13, 50872, 50872, 961, 311, 574, 412, 341, 337, 6367, 13, 50978, 50978, 316, 337, 6367, 411, 341, 6676, 1553, 8062, 2144, 13, 51164, 51164, 407, 498, 361, 22526, 490, 1958, 281, 11, 584, 11, 2119, 11, 341, 2522, 295, 3089, 26213, 7705, 472, 934, 1071, 13, 51639, 51639], "temperature": 0.0, "avg_logprob": -0.10097748438517253, "compression_ratio": 1.5688073394495412, "no_speech_prob": 1.3845582543581259e-05}, {"id": 12, "seek": 5266, "start": 52.66, "end": 59.31999999999999, "text": " On the first time step, which I'm going to write as time 0 or t0, it first operates on", "tokens": [50364, 1282, 264, 700, 565, 1823, 11, 597, 286, 478, 516, 281, 2464, 382, 565, 1958, 420, 256, 15, 11, 309, 700, 22577, 322, 50697, 50697, 264, 4190, 412, 8186, 1958, 13, 50841, 50841, 1711, 264, 958, 565, 1823, 11, 309, 4322, 1024, 4190, 11760, 281, 8186, 502, 293, 370, 322, 1826, 264, 51167, 51167, 9266, 6314, 1823, 11, 689, 309, 715, 1819, 300, 13, 51409, 51409, 682, 661, 2283, 11, 309, 4322, 1024, 613, 2807, 763, 472, 1823, 412, 257, 565, 11, 472, 1823, 934, 1071, 13, 51785, 51785], "temperature": 0.0, "avg_logprob": -0.10950991871592762, "compression_ratio": 1.7807486631016043, "no_speech_prob": 5.014655926061096e-06}, {"id": 13, "seek": 5266, "start": 59.31999999999999, "end": 62.199999999999996, "text": " the values at index 0.", "tokens": [50364, 1282, 264, 700, 565, 1823, 11, 597, 286, 478, 516, 281, 2464, 382, 565, 1958, 420, 256, 15, 11, 309, 700, 22577, 322, 50697, 50697, 264, 4190, 412, 8186, 1958, 13, 50841, 50841, 1711, 264, 958, 565, 1823, 11, 309, 4322, 1024, 4190, 11760, 281, 8186, 502, 293, 370, 322, 1826, 264, 51167, 51167, 9266, 6314, 1823, 11, 689, 309, 715, 1819, 300, 13, 51409, 51409, 682, 661, 2283, 11, 309, 4322, 1024, 613, 2807, 763, 472, 1823, 412, 257, 565, 11, 472, 1823, 934, 1071, 13, 51785, 51785], "temperature": 0.0, "avg_logprob": -0.10950991871592762, "compression_ratio": 1.7807486631016043, "no_speech_prob": 5.014655926061096e-06}, {"id": 14, "seek": 5266, "start": 62.199999999999996, "end": 68.72, "text": " At the next time step, it calculates values corresponding to index 1 and so on until the", "tokens": [50364, 1282, 264, 700, 565, 1823, 11, 597, 286, 478, 516, 281, 2464, 382, 565, 1958, 420, 256, 15, 11, 309, 700, 22577, 322, 50697, 50697, 264, 4190, 412, 8186, 1958, 13, 50841, 50841, 1711, 264, 958, 565, 1823, 11, 309, 4322, 1024, 4190, 11760, 281, 8186, 502, 293, 370, 322, 1826, 264, 51167, 51167, 9266, 6314, 1823, 11, 689, 309, 715, 1819, 300, 13, 51409, 51409, 682, 661, 2283, 11, 309, 4322, 1024, 613, 2807, 763, 472, 1823, 412, 257, 565, 11, 472, 1823, 934, 1071, 13, 51785, 51785], "temperature": 0.0, "avg_logprob": -0.10950991871592762, "compression_ratio": 1.7807486631016043, "no_speech_prob": 5.014655926061096e-06}, {"id": 15, "seek": 5266, "start": 68.72, "end": 73.56, "text": " fifth theme step, where it computes that.", "tokens": [50364, 1282, 264, 700, 565, 1823, 11, 597, 286, 478, 516, 281, 2464, 382, 565, 1958, 420, 256, 15, 11, 309, 700, 22577, 322, 50697, 50697, 264, 4190, 412, 8186, 1958, 13, 50841, 50841, 1711, 264, 958, 565, 1823, 11, 309, 4322, 1024, 4190, 11760, 281, 8186, 502, 293, 370, 322, 1826, 264, 51167, 51167, 9266, 6314, 1823, 11, 689, 309, 715, 1819, 300, 13, 51409, 51409, 682, 661, 2283, 11, 309, 4322, 1024, 613, 2807, 763, 472, 1823, 412, 257, 565, 11, 472, 1823, 934, 1071, 13, 51785, 51785], "temperature": 0.0, "avg_logprob": -0.10950991871592762, "compression_ratio": 1.7807486631016043, "no_speech_prob": 5.014655926061096e-06}, {"id": 16, "seek": 5266, "start": 73.56, "end": 81.08, "text": " In other words, it calculates these computations one step at a time, one step after another.", "tokens": [50364, 1282, 264, 700, 565, 1823, 11, 597, 286, 478, 516, 281, 2464, 382, 565, 1958, 420, 256, 15, 11, 309, 700, 22577, 322, 50697, 50697, 264, 4190, 412, 8186, 1958, 13, 50841, 50841, 1711, 264, 958, 565, 1823, 11, 309, 4322, 1024, 4190, 11760, 281, 8186, 502, 293, 370, 322, 1826, 264, 51167, 51167, 9266, 6314, 1823, 11, 689, 309, 715, 1819, 300, 13, 51409, 51409, 682, 661, 2283, 11, 309, 4322, 1024, 613, 2807, 763, 472, 1823, 412, 257, 565, 11, 472, 1823, 934, 1071, 13, 51785, 51785], "temperature": 0.0, "avg_logprob": -0.10950991871592762, "compression_ratio": 1.7807486631016043, "no_speech_prob": 5.014655926061096e-06}, {"id": 17, "seek": 8108, "start": 81.08, "end": 88.67999999999999, "text": " In contrast, this function in NumPy is implemented in the computer hardware with vectorization.", "tokens": [50364, 682, 8712, 11, 341, 2445, 294, 22592, 47, 88, 307, 12270, 294, 264, 3820, 8837, 365, 8062, 2144, 13, 50744, 50744, 407, 264, 3820, 393, 483, 439, 4190, 295, 264, 18875, 261, 293, 2031, 11, 293, 294, 257, 2167, 1823, 11, 309, 51094, 51094, 12788, 530, 1184, 6119, 295, 261, 293, 2031, 365, 1184, 661, 439, 412, 264, 912, 565, 294, 8952, 13, 51436, 51436, 1396, 934, 300, 11, 264, 3820, 2516, 613, 3165, 3547, 293, 4960, 19813, 8837, 281, 51706, 51706], "temperature": 0.0, "avg_logprob": -0.07783912477039155, "compression_ratio": 1.6064814814814814, "no_speech_prob": 1.5534691328866757e-06}, {"id": 18, "seek": 8108, "start": 88.67999999999999, "end": 95.67999999999999, "text": " So the computer can get all values of the vectors w and x, and in a single step, it", "tokens": [50364, 682, 8712, 11, 341, 2445, 294, 22592, 47, 88, 307, 12270, 294, 264, 3820, 8837, 365, 8062, 2144, 13, 50744, 50744, 407, 264, 3820, 393, 483, 439, 4190, 295, 264, 18875, 261, 293, 2031, 11, 293, 294, 257, 2167, 1823, 11, 309, 51094, 51094, 12788, 530, 1184, 6119, 295, 261, 293, 2031, 365, 1184, 661, 439, 412, 264, 912, 565, 294, 8952, 13, 51436, 51436, 1396, 934, 300, 11, 264, 3820, 2516, 613, 3165, 3547, 293, 4960, 19813, 8837, 281, 51706, 51706], "temperature": 0.0, "avg_logprob": -0.07783912477039155, "compression_ratio": 1.6064814814814814, "no_speech_prob": 1.5534691328866757e-06}, {"id": 19, "seek": 8108, "start": 95.67999999999999, "end": 102.52, "text": " multiplies each pair of w and x with each other all at the same time in parallel.", "tokens": [50364, 682, 8712, 11, 341, 2445, 294, 22592, 47, 88, 307, 12270, 294, 264, 3820, 8837, 365, 8062, 2144, 13, 50744, 50744, 407, 264, 3820, 393, 483, 439, 4190, 295, 264, 18875, 261, 293, 2031, 11, 293, 294, 257, 2167, 1823, 11, 309, 51094, 51094, 12788, 530, 1184, 6119, 295, 261, 293, 2031, 365, 1184, 661, 439, 412, 264, 912, 565, 294, 8952, 13, 51436, 51436, 1396, 934, 300, 11, 264, 3820, 2516, 613, 3165, 3547, 293, 4960, 19813, 8837, 281, 51706, 51706], "temperature": 0.0, "avg_logprob": -0.07783912477039155, "compression_ratio": 1.6064814814814814, "no_speech_prob": 1.5534691328866757e-06}, {"id": 20, "seek": 8108, "start": 102.52, "end": 107.92, "text": " Then after that, the computer takes these 16 numbers and uses specialized hardware to", "tokens": [50364, 682, 8712, 11, 341, 2445, 294, 22592, 47, 88, 307, 12270, 294, 264, 3820, 8837, 365, 8062, 2144, 13, 50744, 50744, 407, 264, 3820, 393, 483, 439, 4190, 295, 264, 18875, 261, 293, 2031, 11, 293, 294, 257, 2167, 1823, 11, 309, 51094, 51094, 12788, 530, 1184, 6119, 295, 261, 293, 2031, 365, 1184, 661, 439, 412, 264, 912, 565, 294, 8952, 13, 51436, 51436, 1396, 934, 300, 11, 264, 3820, 2516, 613, 3165, 3547, 293, 4960, 19813, 8837, 281, 51706, 51706], "temperature": 0.0, "avg_logprob": -0.07783912477039155, "compression_ratio": 1.6064814814814814, "no_speech_prob": 1.5534691328866757e-06}, {"id": 21, "seek": 10792, "start": 107.92, "end": 114.08, "text": " add them all together very efficiently, rather than needing to carry out distinct additions", "tokens": [50364, 909, 552, 439, 1214, 588, 19621, 11, 2831, 813, 18006, 281, 3985, 484, 10644, 35113, 50672, 50672, 472, 934, 1071, 281, 909, 493, 613, 3165, 3547, 13, 50888, 50888, 639, 1355, 300, 3089, 365, 8062, 2144, 393, 2042, 20448, 294, 709, 1570, 565, 813, 51160, 51160, 3089, 1553, 8062, 2144, 13, 51296, 51296, 400, 341, 7001, 544, 562, 291, 434, 2614, 2539, 14642, 322, 2416, 1412, 6352, 420, 51523, 51523, 1382, 281, 3847, 2416, 5245, 11, 597, 307, 2049, 264, 1389, 365, 3479, 2539, 13, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.08468335398127523, "compression_ratio": 1.6761133603238867, "no_speech_prob": 8.851445159052673e-07}, {"id": 22, "seek": 10792, "start": 114.08, "end": 118.4, "text": " one after another to add up these 16 numbers.", "tokens": [50364, 909, 552, 439, 1214, 588, 19621, 11, 2831, 813, 18006, 281, 3985, 484, 10644, 35113, 50672, 50672, 472, 934, 1071, 281, 909, 493, 613, 3165, 3547, 13, 50888, 50888, 639, 1355, 300, 3089, 365, 8062, 2144, 393, 2042, 20448, 294, 709, 1570, 565, 813, 51160, 51160, 3089, 1553, 8062, 2144, 13, 51296, 51296, 400, 341, 7001, 544, 562, 291, 434, 2614, 2539, 14642, 322, 2416, 1412, 6352, 420, 51523, 51523, 1382, 281, 3847, 2416, 5245, 11, 597, 307, 2049, 264, 1389, 365, 3479, 2539, 13, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.08468335398127523, "compression_ratio": 1.6761133603238867, "no_speech_prob": 8.851445159052673e-07}, {"id": 23, "seek": 10792, "start": 118.4, "end": 123.84, "text": " This means that code with vectorization can perform calculations in much less time than", "tokens": [50364, 909, 552, 439, 1214, 588, 19621, 11, 2831, 813, 18006, 281, 3985, 484, 10644, 35113, 50672, 50672, 472, 934, 1071, 281, 909, 493, 613, 3165, 3547, 13, 50888, 50888, 639, 1355, 300, 3089, 365, 8062, 2144, 393, 2042, 20448, 294, 709, 1570, 565, 813, 51160, 51160, 3089, 1553, 8062, 2144, 13, 51296, 51296, 400, 341, 7001, 544, 562, 291, 434, 2614, 2539, 14642, 322, 2416, 1412, 6352, 420, 51523, 51523, 1382, 281, 3847, 2416, 5245, 11, 597, 307, 2049, 264, 1389, 365, 3479, 2539, 13, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.08468335398127523, "compression_ratio": 1.6761133603238867, "no_speech_prob": 8.851445159052673e-07}, {"id": 24, "seek": 10792, "start": 123.84, "end": 126.56, "text": " code without vectorization.", "tokens": [50364, 909, 552, 439, 1214, 588, 19621, 11, 2831, 813, 18006, 281, 3985, 484, 10644, 35113, 50672, 50672, 472, 934, 1071, 281, 909, 493, 613, 3165, 3547, 13, 50888, 50888, 639, 1355, 300, 3089, 365, 8062, 2144, 393, 2042, 20448, 294, 709, 1570, 565, 813, 51160, 51160, 3089, 1553, 8062, 2144, 13, 51296, 51296, 400, 341, 7001, 544, 562, 291, 434, 2614, 2539, 14642, 322, 2416, 1412, 6352, 420, 51523, 51523, 1382, 281, 3847, 2416, 5245, 11, 597, 307, 2049, 264, 1389, 365, 3479, 2539, 13, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.08468335398127523, "compression_ratio": 1.6761133603238867, "no_speech_prob": 8.851445159052673e-07}, {"id": 25, "seek": 10792, "start": 126.56, "end": 131.1, "text": " And this matters more when you're running learning algorithms on large data sets or", "tokens": [50364, 909, 552, 439, 1214, 588, 19621, 11, 2831, 813, 18006, 281, 3985, 484, 10644, 35113, 50672, 50672, 472, 934, 1071, 281, 909, 493, 613, 3165, 3547, 13, 50888, 50888, 639, 1355, 300, 3089, 365, 8062, 2144, 393, 2042, 20448, 294, 709, 1570, 565, 813, 51160, 51160, 3089, 1553, 8062, 2144, 13, 51296, 51296, 400, 341, 7001, 544, 562, 291, 434, 2614, 2539, 14642, 322, 2416, 1412, 6352, 420, 51523, 51523, 1382, 281, 3847, 2416, 5245, 11, 597, 307, 2049, 264, 1389, 365, 3479, 2539, 13, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.08468335398127523, "compression_ratio": 1.6761133603238867, "no_speech_prob": 8.851445159052673e-07}, {"id": 26, "seek": 10792, "start": 131.1, "end": 136.4, "text": " trying to train large models, which is often the case with machine learning.", "tokens": [50364, 909, 552, 439, 1214, 588, 19621, 11, 2831, 813, 18006, 281, 3985, 484, 10644, 35113, 50672, 50672, 472, 934, 1071, 281, 909, 493, 613, 3165, 3547, 13, 50888, 50888, 639, 1355, 300, 3089, 365, 8062, 2144, 393, 2042, 20448, 294, 709, 1570, 565, 813, 51160, 51160, 3089, 1553, 8062, 2144, 13, 51296, 51296, 400, 341, 7001, 544, 562, 291, 434, 2614, 2539, 14642, 322, 2416, 1412, 6352, 420, 51523, 51523, 1382, 281, 3847, 2416, 5245, 11, 597, 307, 2049, 264, 1389, 365, 3479, 2539, 13, 51788, 51788], "temperature": 0.0, "avg_logprob": -0.08468335398127523, "compression_ratio": 1.6761133603238867, "no_speech_prob": 8.851445159052673e-07}, {"id": 27, "seek": 13640, "start": 136.4, "end": 140.68, "text": " So that's why being able to write vectorized implementations of learning algorithms has", "tokens": [50364, 407, 300, 311, 983, 885, 1075, 281, 2464, 8062, 1602, 4445, 763, 295, 2539, 14642, 575, 50578, 50578, 668, 257, 2141, 1823, 281, 1242, 2539, 14642, 281, 1190, 19621, 293, 4412, 4373, 731, 50876, 50876, 281, 264, 2416, 1412, 6352, 300, 867, 4363, 3479, 2539, 14642, 586, 362, 281, 9651, 322, 13, 51168, 51168, 823, 718, 311, 747, 257, 574, 412, 257, 9859, 1365, 295, 577, 341, 3665, 365, 18114, 3866, 51447, 51447, 8213, 24590, 11, 300, 307, 8213, 24590, 365, 3866, 4846, 4122, 13, 51735, 51735], "temperature": 0.0, "avg_logprob": -0.08682813001482674, "compression_ratio": 1.778688524590164, "no_speech_prob": 9.132397167377349e-07}, {"id": 28, "seek": 13640, "start": 140.68, "end": 146.64000000000001, "text": " been a key step to getting learning algorithms to run efficiently and therefore scale well", "tokens": [50364, 407, 300, 311, 983, 885, 1075, 281, 2464, 8062, 1602, 4445, 763, 295, 2539, 14642, 575, 50578, 50578, 668, 257, 2141, 1823, 281, 1242, 2539, 14642, 281, 1190, 19621, 293, 4412, 4373, 731, 50876, 50876, 281, 264, 2416, 1412, 6352, 300, 867, 4363, 3479, 2539, 14642, 586, 362, 281, 9651, 322, 13, 51168, 51168, 823, 718, 311, 747, 257, 574, 412, 257, 9859, 1365, 295, 577, 341, 3665, 365, 18114, 3866, 51447, 51447, 8213, 24590, 11, 300, 307, 8213, 24590, 365, 3866, 4846, 4122, 13, 51735, 51735], "temperature": 0.0, "avg_logprob": -0.08682813001482674, "compression_ratio": 1.778688524590164, "no_speech_prob": 9.132397167377349e-07}, {"id": 29, "seek": 13640, "start": 146.64000000000001, "end": 152.48000000000002, "text": " to the large data sets that many modern machine learning algorithms now have to operate on.", "tokens": [50364, 407, 300, 311, 983, 885, 1075, 281, 2464, 8062, 1602, 4445, 763, 295, 2539, 14642, 575, 50578, 50578, 668, 257, 2141, 1823, 281, 1242, 2539, 14642, 281, 1190, 19621, 293, 4412, 4373, 731, 50876, 50876, 281, 264, 2416, 1412, 6352, 300, 867, 4363, 3479, 2539, 14642, 586, 362, 281, 9651, 322, 13, 51168, 51168, 823, 718, 311, 747, 257, 574, 412, 257, 9859, 1365, 295, 577, 341, 3665, 365, 18114, 3866, 51447, 51447, 8213, 24590, 11, 300, 307, 8213, 24590, 365, 3866, 4846, 4122, 13, 51735, 51735], "temperature": 0.0, "avg_logprob": -0.08682813001482674, "compression_ratio": 1.778688524590164, "no_speech_prob": 9.132397167377349e-07}, {"id": 30, "seek": 13640, "start": 152.48000000000002, "end": 158.06, "text": " Now let's take a look at a concrete example of how this helps with implementing multiple", "tokens": [50364, 407, 300, 311, 983, 885, 1075, 281, 2464, 8062, 1602, 4445, 763, 295, 2539, 14642, 575, 50578, 50578, 668, 257, 2141, 1823, 281, 1242, 2539, 14642, 281, 1190, 19621, 293, 4412, 4373, 731, 50876, 50876, 281, 264, 2416, 1412, 6352, 300, 867, 4363, 3479, 2539, 14642, 586, 362, 281, 9651, 322, 13, 51168, 51168, 823, 718, 311, 747, 257, 574, 412, 257, 9859, 1365, 295, 577, 341, 3665, 365, 18114, 3866, 51447, 51447, 8213, 24590, 11, 300, 307, 8213, 24590, 365, 3866, 4846, 4122, 13, 51735, 51735], "temperature": 0.0, "avg_logprob": -0.08682813001482674, "compression_ratio": 1.778688524590164, "no_speech_prob": 9.132397167377349e-07}, {"id": 31, "seek": 13640, "start": 158.06, "end": 163.82, "text": " linear regression, that is linear regression with multiple input features.", "tokens": [50364, 407, 300, 311, 983, 885, 1075, 281, 2464, 8062, 1602, 4445, 763, 295, 2539, 14642, 575, 50578, 50578, 668, 257, 2141, 1823, 281, 1242, 2539, 14642, 281, 1190, 19621, 293, 4412, 4373, 731, 50876, 50876, 281, 264, 2416, 1412, 6352, 300, 867, 4363, 3479, 2539, 14642, 586, 362, 281, 9651, 322, 13, 51168, 51168, 823, 718, 311, 747, 257, 574, 412, 257, 9859, 1365, 295, 577, 341, 3665, 365, 18114, 3866, 51447, 51447, 8213, 24590, 11, 300, 307, 8213, 24590, 365, 3866, 4846, 4122, 13, 51735, 51735], "temperature": 0.0, "avg_logprob": -0.08682813001482674, "compression_ratio": 1.778688524590164, "no_speech_prob": 9.132397167377349e-07}, {"id": 32, "seek": 16382, "start": 163.82, "end": 173.07999999999998, "text": " Say you have a problem with 16 features and 16 parameters w1 through w16 in addition to", "tokens": [50364, 6463, 291, 362, 257, 1154, 365, 3165, 4122, 293, 3165, 9834, 261, 16, 807, 261, 6866, 294, 4500, 281, 50827, 50827, 264, 13075, 272, 13, 50953, 50953, 509, 15598, 3165, 13760, 2115, 337, 613, 3165, 17443, 293, 294, 3089, 11, 1310, 291, 12187, 264, 51283, 51283, 4190, 295, 261, 293, 274, 294, 732, 2107, 12, 79, 6016, 310, 2244, 365, 274, 26085, 264, 4190, 295, 264, 33733, 13, 51711, 51711], "temperature": 0.0, "avg_logprob": -0.2548714213901096, "compression_ratio": 1.5852272727272727, "no_speech_prob": 3.7265888295223704e-06}, {"id": 33, "seek": 16382, "start": 173.07999999999998, "end": 175.6, "text": " the parameter b.", "tokens": [50364, 6463, 291, 362, 257, 1154, 365, 3165, 4122, 293, 3165, 9834, 261, 16, 807, 261, 6866, 294, 4500, 281, 50827, 50827, 264, 13075, 272, 13, 50953, 50953, 509, 15598, 3165, 13760, 2115, 337, 613, 3165, 17443, 293, 294, 3089, 11, 1310, 291, 12187, 264, 51283, 51283, 4190, 295, 261, 293, 274, 294, 732, 2107, 12, 79, 6016, 310, 2244, 365, 274, 26085, 264, 4190, 295, 264, 33733, 13, 51711, 51711], "temperature": 0.0, "avg_logprob": -0.2548714213901096, "compression_ratio": 1.5852272727272727, "no_speech_prob": 3.7265888295223704e-06}, {"id": 34, "seek": 16382, "start": 175.6, "end": 182.2, "text": " You calculated 16 derivative terms for these 16 weights and in code, maybe you stored the", "tokens": [50364, 6463, 291, 362, 257, 1154, 365, 3165, 4122, 293, 3165, 9834, 261, 16, 807, 261, 6866, 294, 4500, 281, 50827, 50827, 264, 13075, 272, 13, 50953, 50953, 509, 15598, 3165, 13760, 2115, 337, 613, 3165, 17443, 293, 294, 3089, 11, 1310, 291, 12187, 264, 51283, 51283, 4190, 295, 261, 293, 274, 294, 732, 2107, 12, 79, 6016, 310, 2244, 365, 274, 26085, 264, 4190, 295, 264, 33733, 13, 51711, 51711], "temperature": 0.0, "avg_logprob": -0.2548714213901096, "compression_ratio": 1.5852272727272727, "no_speech_prob": 3.7265888295223704e-06}, {"id": 35, "seek": 16382, "start": 182.2, "end": 190.76, "text": " values of w and d in two non-pyrotries with d storing the values of the derivatives.", "tokens": [50364, 6463, 291, 362, 257, 1154, 365, 3165, 4122, 293, 3165, 9834, 261, 16, 807, 261, 6866, 294, 4500, 281, 50827, 50827, 264, 13075, 272, 13, 50953, 50953, 509, 15598, 3165, 13760, 2115, 337, 613, 3165, 17443, 293, 294, 3089, 11, 1310, 291, 12187, 264, 51283, 51283, 4190, 295, 261, 293, 274, 294, 732, 2107, 12, 79, 6016, 310, 2244, 365, 274, 26085, 264, 4190, 295, 264, 33733, 13, 51711, 51711], "temperature": 0.0, "avg_logprob": -0.2548714213901096, "compression_ratio": 1.5852272727272727, "no_speech_prob": 3.7265888295223704e-06}, {"id": 36, "seek": 19076, "start": 190.76, "end": 194.92, "text": " For this example, I'm just going to ignore the parameter b.", "tokens": [50364, 1171, 341, 1365, 11, 286, 478, 445, 516, 281, 11200, 264, 13075, 272, 13, 50572, 50572, 823, 291, 528, 281, 14722, 293, 5623, 337, 1184, 295, 613, 3165, 9834, 13, 50850, 50850, 407, 261, 73, 307, 10588, 281, 261, 73, 3175, 264, 2539, 3314, 11, 584, 1958, 13, 16, 1413, 274, 73, 337, 361, 490, 502, 807, 51486, 51486, 3165, 13, 51536, 51536], "temperature": 0.0, "avg_logprob": -0.15045325939471904, "compression_ratio": 1.35625, "no_speech_prob": 8.315243462675426e-07}, {"id": 37, "seek": 19076, "start": 194.92, "end": 200.48, "text": " Now you want to compute and update for each of these 16 parameters.", "tokens": [50364, 1171, 341, 1365, 11, 286, 478, 445, 516, 281, 11200, 264, 13075, 272, 13, 50572, 50572, 823, 291, 528, 281, 14722, 293, 5623, 337, 1184, 295, 613, 3165, 9834, 13, 50850, 50850, 407, 261, 73, 307, 10588, 281, 261, 73, 3175, 264, 2539, 3314, 11, 584, 1958, 13, 16, 1413, 274, 73, 337, 361, 490, 502, 807, 51486, 51486, 3165, 13, 51536, 51536], "temperature": 0.0, "avg_logprob": -0.15045325939471904, "compression_ratio": 1.35625, "no_speech_prob": 8.315243462675426e-07}, {"id": 38, "seek": 19076, "start": 200.48, "end": 213.2, "text": " So wj is updated to wj minus the learning rate, say 0.1 times dj for j from 1 through", "tokens": [50364, 1171, 341, 1365, 11, 286, 478, 445, 516, 281, 11200, 264, 13075, 272, 13, 50572, 50572, 823, 291, 528, 281, 14722, 293, 5623, 337, 1184, 295, 613, 3165, 9834, 13, 50850, 50850, 407, 261, 73, 307, 10588, 281, 261, 73, 3175, 264, 2539, 3314, 11, 584, 1958, 13, 16, 1413, 274, 73, 337, 361, 490, 502, 807, 51486, 51486, 3165, 13, 51536, 51536], "temperature": 0.0, "avg_logprob": -0.15045325939471904, "compression_ratio": 1.35625, "no_speech_prob": 8.315243462675426e-07}, {"id": 39, "seek": 19076, "start": 213.2, "end": 214.2, "text": " 16.", "tokens": [50364, 1171, 341, 1365, 11, 286, 478, 445, 516, 281, 11200, 264, 13075, 272, 13, 50572, 50572, 823, 291, 528, 281, 14722, 293, 5623, 337, 1184, 295, 613, 3165, 9834, 13, 50850, 50850, 407, 261, 73, 307, 10588, 281, 261, 73, 3175, 264, 2539, 3314, 11, 584, 1958, 13, 16, 1413, 274, 73, 337, 361, 490, 502, 807, 51486, 51486, 3165, 13, 51536, 51536], "temperature": 0.0, "avg_logprob": -0.15045325939471904, "compression_ratio": 1.35625, "no_speech_prob": 8.315243462675426e-07}, {"id": 40, "seek": 21420, "start": 214.2, "end": 221.6, "text": " In code, without vectorization, you would be doing something like this, update w1 to", "tokens": [50364, 682, 3089, 11, 1553, 8062, 2144, 11, 291, 576, 312, 884, 746, 411, 341, 11, 5623, 261, 16, 281, 50734, 50734, 312, 261, 16, 3175, 264, 2539, 3314, 1958, 13, 16, 1413, 274, 16, 11, 958, 5623, 261, 17, 14138, 293, 370, 322, 807, 51194, 51194, 261, 6866, 11, 10588, 382, 261, 6866, 3175, 1958, 13, 16, 1413, 274, 6866, 13, 51546, 51546], "temperature": 0.0, "avg_logprob": -0.16890338017390324, "compression_ratio": 1.4620689655172414, "no_speech_prob": 4.356808858574368e-06}, {"id": 41, "seek": 21420, "start": 221.6, "end": 230.79999999999998, "text": " be w1 minus the learning rate 0.1 times d1, next update w2 similarly and so on through", "tokens": [50364, 682, 3089, 11, 1553, 8062, 2144, 11, 291, 576, 312, 884, 746, 411, 341, 11, 5623, 261, 16, 281, 50734, 50734, 312, 261, 16, 3175, 264, 2539, 3314, 1958, 13, 16, 1413, 274, 16, 11, 958, 5623, 261, 17, 14138, 293, 370, 322, 807, 51194, 51194, 261, 6866, 11, 10588, 382, 261, 6866, 3175, 1958, 13, 16, 1413, 274, 6866, 13, 51546, 51546], "temperature": 0.0, "avg_logprob": -0.16890338017390324, "compression_ratio": 1.4620689655172414, "no_speech_prob": 4.356808858574368e-06}, {"id": 42, "seek": 21420, "start": 230.79999999999998, "end": 237.83999999999997, "text": " w16, updated as w16 minus 0.1 times d16.", "tokens": [50364, 682, 3089, 11, 1553, 8062, 2144, 11, 291, 576, 312, 884, 746, 411, 341, 11, 5623, 261, 16, 281, 50734, 50734, 312, 261, 16, 3175, 264, 2539, 3314, 1958, 13, 16, 1413, 274, 16, 11, 958, 5623, 261, 17, 14138, 293, 370, 322, 807, 51194, 51194, 261, 6866, 11, 10588, 382, 261, 6866, 3175, 1958, 13, 16, 1413, 274, 6866, 13, 51546, 51546], "temperature": 0.0, "avg_logprob": -0.16890338017390324, "compression_ratio": 1.4620689655172414, "no_speech_prob": 4.356808858574368e-06}, {"id": 43, "seek": 23784, "start": 237.84, "end": 246.16, "text": " In code without vectorization, you could use a full loop like this for j in range 0, 16,", "tokens": [50364, 682, 3089, 1553, 8062, 2144, 11, 291, 727, 764, 257, 1577, 6367, 411, 341, 337, 361, 294, 3613, 1958, 11, 3165, 11, 50780, 50780, 300, 797, 1709, 490, 1958, 281, 2119, 11, 992, 261, 73, 6915, 261, 73, 3175, 1958, 13, 16, 1413, 274, 73, 13, 51192, 51192, 682, 8712, 11, 365, 8062, 2144, 11, 291, 393, 3811, 264, 3820, 311, 8952, 9007, 8837, 51518, 51518, 411, 341, 13, 51574, 51574], "temperature": 0.0, "avg_logprob": -0.14033145120699111, "compression_ratio": 1.4715909090909092, "no_speech_prob": 5.255308678897563e-06}, {"id": 44, "seek": 23784, "start": 246.16, "end": 254.4, "text": " that again goes from 0 to 15, set wj equals wj minus 0.1 times dj.", "tokens": [50364, 682, 3089, 1553, 8062, 2144, 11, 291, 727, 764, 257, 1577, 6367, 411, 341, 337, 361, 294, 3613, 1958, 11, 3165, 11, 50780, 50780, 300, 797, 1709, 490, 1958, 281, 2119, 11, 992, 261, 73, 6915, 261, 73, 3175, 1958, 13, 16, 1413, 274, 73, 13, 51192, 51192, 682, 8712, 11, 365, 8062, 2144, 11, 291, 393, 3811, 264, 3820, 311, 8952, 9007, 8837, 51518, 51518, 411, 341, 13, 51574, 51574], "temperature": 0.0, "avg_logprob": -0.14033145120699111, "compression_ratio": 1.4715909090909092, "no_speech_prob": 5.255308678897563e-06}, {"id": 45, "seek": 23784, "start": 254.4, "end": 260.92, "text": " In contrast, with vectorization, you can imagine the computer's parallel processing hardware", "tokens": [50364, 682, 3089, 1553, 8062, 2144, 11, 291, 727, 764, 257, 1577, 6367, 411, 341, 337, 361, 294, 3613, 1958, 11, 3165, 11, 50780, 50780, 300, 797, 1709, 490, 1958, 281, 2119, 11, 992, 261, 73, 6915, 261, 73, 3175, 1958, 13, 16, 1413, 274, 73, 13, 51192, 51192, 682, 8712, 11, 365, 8062, 2144, 11, 291, 393, 3811, 264, 3820, 311, 8952, 9007, 8837, 51518, 51518, 411, 341, 13, 51574, 51574], "temperature": 0.0, "avg_logprob": -0.14033145120699111, "compression_ratio": 1.4715909090909092, "no_speech_prob": 5.255308678897563e-06}, {"id": 46, "seek": 23784, "start": 260.92, "end": 262.04, "text": " like this.", "tokens": [50364, 682, 3089, 1553, 8062, 2144, 11, 291, 727, 764, 257, 1577, 6367, 411, 341, 337, 361, 294, 3613, 1958, 11, 3165, 11, 50780, 50780, 300, 797, 1709, 490, 1958, 281, 2119, 11, 992, 261, 73, 6915, 261, 73, 3175, 1958, 13, 16, 1413, 274, 73, 13, 51192, 51192, 682, 8712, 11, 365, 8062, 2144, 11, 291, 393, 3811, 264, 3820, 311, 8952, 9007, 8837, 51518, 51518, 411, 341, 13, 51574, 51574], "temperature": 0.0, "avg_logprob": -0.14033145120699111, "compression_ratio": 1.4715909090909092, "no_speech_prob": 5.255308678897563e-06}, {"id": 47, "seek": 26204, "start": 262.04, "end": 271.40000000000003, "text": " It takes all 16 values in the vector w and subtracts in parallel 0.1 times all 16 values", "tokens": [50364, 467, 2516, 439, 3165, 4190, 294, 264, 8062, 261, 293, 16390, 82, 294, 8952, 1958, 13, 16, 1413, 439, 3165, 4190, 50832, 50832, 294, 264, 8062, 274, 293, 6269, 439, 3165, 20448, 646, 281, 261, 439, 412, 264, 912, 565, 293, 439, 294, 51220, 51220, 472, 1823, 13, 51286, 51286, 682, 3089, 11, 291, 393, 4445, 341, 382, 10002, 13, 51524, 51524, 343, 307, 13279, 281, 261, 3175, 1958, 13, 16, 1413, 274, 13, 51774, 51774], "temperature": 0.0, "avg_logprob": -0.1199170259328989, "compression_ratio": 1.6604938271604939, "no_speech_prob": 4.860360149905318e-06}, {"id": 48, "seek": 26204, "start": 271.40000000000003, "end": 279.16, "text": " in the vector d and assign all 16 calculations back to w all at the same time and all in", "tokens": [50364, 467, 2516, 439, 3165, 4190, 294, 264, 8062, 261, 293, 16390, 82, 294, 8952, 1958, 13, 16, 1413, 439, 3165, 4190, 50832, 50832, 294, 264, 8062, 274, 293, 6269, 439, 3165, 20448, 646, 281, 261, 439, 412, 264, 912, 565, 293, 439, 294, 51220, 51220, 472, 1823, 13, 51286, 51286, 682, 3089, 11, 291, 393, 4445, 341, 382, 10002, 13, 51524, 51524, 343, 307, 13279, 281, 261, 3175, 1958, 13, 16, 1413, 274, 13, 51774, 51774], "temperature": 0.0, "avg_logprob": -0.1199170259328989, "compression_ratio": 1.6604938271604939, "no_speech_prob": 4.860360149905318e-06}, {"id": 49, "seek": 26204, "start": 279.16, "end": 280.48, "text": " one step.", "tokens": [50364, 467, 2516, 439, 3165, 4190, 294, 264, 8062, 261, 293, 16390, 82, 294, 8952, 1958, 13, 16, 1413, 439, 3165, 4190, 50832, 50832, 294, 264, 8062, 274, 293, 6269, 439, 3165, 20448, 646, 281, 261, 439, 412, 264, 912, 565, 293, 439, 294, 51220, 51220, 472, 1823, 13, 51286, 51286, 682, 3089, 11, 291, 393, 4445, 341, 382, 10002, 13, 51524, 51524, 343, 307, 13279, 281, 261, 3175, 1958, 13, 16, 1413, 274, 13, 51774, 51774], "temperature": 0.0, "avg_logprob": -0.1199170259328989, "compression_ratio": 1.6604938271604939, "no_speech_prob": 4.860360149905318e-06}, {"id": 50, "seek": 26204, "start": 280.48, "end": 285.24, "text": " In code, you can implement this as follows.", "tokens": [50364, 467, 2516, 439, 3165, 4190, 294, 264, 8062, 261, 293, 16390, 82, 294, 8952, 1958, 13, 16, 1413, 439, 3165, 4190, 50832, 50832, 294, 264, 8062, 274, 293, 6269, 439, 3165, 20448, 646, 281, 261, 439, 412, 264, 912, 565, 293, 439, 294, 51220, 51220, 472, 1823, 13, 51286, 51286, 682, 3089, 11, 291, 393, 4445, 341, 382, 10002, 13, 51524, 51524, 343, 307, 13279, 281, 261, 3175, 1958, 13, 16, 1413, 274, 13, 51774, 51774], "temperature": 0.0, "avg_logprob": -0.1199170259328989, "compression_ratio": 1.6604938271604939, "no_speech_prob": 4.860360149905318e-06}, {"id": 51, "seek": 26204, "start": 285.24, "end": 290.24, "text": " W is assigned to w minus 0.1 times d.", "tokens": [50364, 467, 2516, 439, 3165, 4190, 294, 264, 8062, 261, 293, 16390, 82, 294, 8952, 1958, 13, 16, 1413, 439, 3165, 4190, 50832, 50832, 294, 264, 8062, 274, 293, 6269, 439, 3165, 20448, 646, 281, 261, 439, 412, 264, 912, 565, 293, 439, 294, 51220, 51220, 472, 1823, 13, 51286, 51286, 682, 3089, 11, 291, 393, 4445, 341, 382, 10002, 13, 51524, 51524, 343, 307, 13279, 281, 261, 3175, 1958, 13, 16, 1413, 274, 13, 51774, 51774], "temperature": 0.0, "avg_logprob": -0.1199170259328989, "compression_ratio": 1.6604938271604939, "no_speech_prob": 4.860360149905318e-06}, {"id": 52, "seek": 29024, "start": 290.24, "end": 296.32, "text": " Behind the scenes, the computer takes these numpy arrays w and d and uses parallel processing", "tokens": [50364, 20475, 264, 8026, 11, 264, 3820, 2516, 613, 1031, 8200, 41011, 261, 293, 274, 293, 4960, 8952, 9007, 50668, 50668, 8837, 281, 3985, 484, 439, 3165, 2807, 763, 19621, 13, 50902, 50902, 407, 1228, 257, 8062, 1602, 11420, 11, 291, 820, 483, 257, 709, 544, 7148, 11420, 51132, 51132, 295, 8213, 24590, 13, 51242, 51242, 2704, 264, 3073, 2649, 1582, 380, 312, 2603, 498, 291, 362, 3165, 4122, 11, 457, 498, 291, 362, 5383, 51534, 51534, 295, 4122, 293, 4317, 588, 2416, 3097, 6352, 11, 341, 2010, 295, 8062, 1602, 11420, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.10901830572831003, "compression_ratio": 1.715953307392996, "no_speech_prob": 5.862541456735926e-06}, {"id": 53, "seek": 29024, "start": 296.32, "end": 301.0, "text": " hardware to carry out all 16 computations efficiently.", "tokens": [50364, 20475, 264, 8026, 11, 264, 3820, 2516, 613, 1031, 8200, 41011, 261, 293, 274, 293, 4960, 8952, 9007, 50668, 50668, 8837, 281, 3985, 484, 439, 3165, 2807, 763, 19621, 13, 50902, 50902, 407, 1228, 257, 8062, 1602, 11420, 11, 291, 820, 483, 257, 709, 544, 7148, 11420, 51132, 51132, 295, 8213, 24590, 13, 51242, 51242, 2704, 264, 3073, 2649, 1582, 380, 312, 2603, 498, 291, 362, 3165, 4122, 11, 457, 498, 291, 362, 5383, 51534, 51534, 295, 4122, 293, 4317, 588, 2416, 3097, 6352, 11, 341, 2010, 295, 8062, 1602, 11420, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.10901830572831003, "compression_ratio": 1.715953307392996, "no_speech_prob": 5.862541456735926e-06}, {"id": 54, "seek": 29024, "start": 301.0, "end": 305.6, "text": " So using a vectorized implementation, you should get a much more efficient implementation", "tokens": [50364, 20475, 264, 8026, 11, 264, 3820, 2516, 613, 1031, 8200, 41011, 261, 293, 274, 293, 4960, 8952, 9007, 50668, 50668, 8837, 281, 3985, 484, 439, 3165, 2807, 763, 19621, 13, 50902, 50902, 407, 1228, 257, 8062, 1602, 11420, 11, 291, 820, 483, 257, 709, 544, 7148, 11420, 51132, 51132, 295, 8213, 24590, 13, 51242, 51242, 2704, 264, 3073, 2649, 1582, 380, 312, 2603, 498, 291, 362, 3165, 4122, 11, 457, 498, 291, 362, 5383, 51534, 51534, 295, 4122, 293, 4317, 588, 2416, 3097, 6352, 11, 341, 2010, 295, 8062, 1602, 11420, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.10901830572831003, "compression_ratio": 1.715953307392996, "no_speech_prob": 5.862541456735926e-06}, {"id": 55, "seek": 29024, "start": 305.6, "end": 307.8, "text": " of linear regression.", "tokens": [50364, 20475, 264, 8026, 11, 264, 3820, 2516, 613, 1031, 8200, 41011, 261, 293, 274, 293, 4960, 8952, 9007, 50668, 50668, 8837, 281, 3985, 484, 439, 3165, 2807, 763, 19621, 13, 50902, 50902, 407, 1228, 257, 8062, 1602, 11420, 11, 291, 820, 483, 257, 709, 544, 7148, 11420, 51132, 51132, 295, 8213, 24590, 13, 51242, 51242, 2704, 264, 3073, 2649, 1582, 380, 312, 2603, 498, 291, 362, 3165, 4122, 11, 457, 498, 291, 362, 5383, 51534, 51534, 295, 4122, 293, 4317, 588, 2416, 3097, 6352, 11, 341, 2010, 295, 8062, 1602, 11420, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.10901830572831003, "compression_ratio": 1.715953307392996, "no_speech_prob": 5.862541456735926e-06}, {"id": 56, "seek": 29024, "start": 307.8, "end": 313.64, "text": " Maybe the speed difference won't be huge if you have 16 features, but if you have thousands", "tokens": [50364, 20475, 264, 8026, 11, 264, 3820, 2516, 613, 1031, 8200, 41011, 261, 293, 274, 293, 4960, 8952, 9007, 50668, 50668, 8837, 281, 3985, 484, 439, 3165, 2807, 763, 19621, 13, 50902, 50902, 407, 1228, 257, 8062, 1602, 11420, 11, 291, 820, 483, 257, 709, 544, 7148, 11420, 51132, 51132, 295, 8213, 24590, 13, 51242, 51242, 2704, 264, 3073, 2649, 1582, 380, 312, 2603, 498, 291, 362, 3165, 4122, 11, 457, 498, 291, 362, 5383, 51534, 51534, 295, 4122, 293, 4317, 588, 2416, 3097, 6352, 11, 341, 2010, 295, 8062, 1602, 11420, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.10901830572831003, "compression_ratio": 1.715953307392996, "no_speech_prob": 5.862541456735926e-06}, {"id": 57, "seek": 29024, "start": 313.64, "end": 318.24, "text": " of features and perhaps very large training sets, this type of vectorized implementation", "tokens": [50364, 20475, 264, 8026, 11, 264, 3820, 2516, 613, 1031, 8200, 41011, 261, 293, 274, 293, 4960, 8952, 9007, 50668, 50668, 8837, 281, 3985, 484, 439, 3165, 2807, 763, 19621, 13, 50902, 50902, 407, 1228, 257, 8062, 1602, 11420, 11, 291, 820, 483, 257, 709, 544, 7148, 11420, 51132, 51132, 295, 8213, 24590, 13, 51242, 51242, 2704, 264, 3073, 2649, 1582, 380, 312, 2603, 498, 291, 362, 3165, 4122, 11, 457, 498, 291, 362, 5383, 51534, 51534, 295, 4122, 293, 4317, 588, 2416, 3097, 6352, 11, 341, 2010, 295, 8062, 1602, 11420, 51764, 51764], "temperature": 0.0, "avg_logprob": -0.10901830572831003, "compression_ratio": 1.715953307392996, "no_speech_prob": 5.862541456735926e-06}, {"id": 58, "seek": 31824, "start": 318.24, "end": 322.04, "text": " will make a huge difference in the running time of your learning algorithm.", "tokens": [50364, 486, 652, 257, 2603, 2649, 294, 264, 2614, 565, 295, 428, 2539, 9284, 13, 50554, 50554, 467, 727, 312, 264, 2649, 1296, 3089, 12693, 294, 472, 420, 732, 2077, 5717, 1940, 867, 11, 50796, 50796, 867, 2496, 281, 360, 264, 912, 551, 13, 50936, 50936, 682, 264, 17312, 2715, 300, 10002, 341, 960, 11, 291, 536, 364, 9339, 281, 472, 295, 264, 881, 51190, 51190, 1143, 15329, 15148, 294, 3479, 2539, 11, 597, 321, 600, 1217, 9828, 322, 294, 341, 960, 51410, 51410, 1219, 1031, 8200, 13, 51522, 51522, 509, 536, 577, 436, 1884, 18875, 294, 3089, 11, 293, 613, 18875, 420, 14511, 295, 3547, 366, 1219, 51783, 51783], "temperature": 0.0, "avg_logprob": -0.10846585626000757, "compression_ratio": 1.702127659574468, "no_speech_prob": 8.939292456489056e-06}, {"id": 59, "seek": 31824, "start": 322.04, "end": 326.88, "text": " It could be the difference between code finishing in one or two minutes versus taking many,", "tokens": [50364, 486, 652, 257, 2603, 2649, 294, 264, 2614, 565, 295, 428, 2539, 9284, 13, 50554, 50554, 467, 727, 312, 264, 2649, 1296, 3089, 12693, 294, 472, 420, 732, 2077, 5717, 1940, 867, 11, 50796, 50796, 867, 2496, 281, 360, 264, 912, 551, 13, 50936, 50936, 682, 264, 17312, 2715, 300, 10002, 341, 960, 11, 291, 536, 364, 9339, 281, 472, 295, 264, 881, 51190, 51190, 1143, 15329, 15148, 294, 3479, 2539, 11, 597, 321, 600, 1217, 9828, 322, 294, 341, 960, 51410, 51410, 1219, 1031, 8200, 13, 51522, 51522, 509, 536, 577, 436, 1884, 18875, 294, 3089, 11, 293, 613, 18875, 420, 14511, 295, 3547, 366, 1219, 51783, 51783], "temperature": 0.0, "avg_logprob": -0.10846585626000757, "compression_ratio": 1.702127659574468, "no_speech_prob": 8.939292456489056e-06}, {"id": 60, "seek": 31824, "start": 326.88, "end": 329.68, "text": " many hours to do the same thing.", "tokens": [50364, 486, 652, 257, 2603, 2649, 294, 264, 2614, 565, 295, 428, 2539, 9284, 13, 50554, 50554, 467, 727, 312, 264, 2649, 1296, 3089, 12693, 294, 472, 420, 732, 2077, 5717, 1940, 867, 11, 50796, 50796, 867, 2496, 281, 360, 264, 912, 551, 13, 50936, 50936, 682, 264, 17312, 2715, 300, 10002, 341, 960, 11, 291, 536, 364, 9339, 281, 472, 295, 264, 881, 51190, 51190, 1143, 15329, 15148, 294, 3479, 2539, 11, 597, 321, 600, 1217, 9828, 322, 294, 341, 960, 51410, 51410, 1219, 1031, 8200, 13, 51522, 51522, 509, 536, 577, 436, 1884, 18875, 294, 3089, 11, 293, 613, 18875, 420, 14511, 295, 3547, 366, 1219, 51783, 51783], "temperature": 0.0, "avg_logprob": -0.10846585626000757, "compression_ratio": 1.702127659574468, "no_speech_prob": 8.939292456489056e-06}, {"id": 61, "seek": 31824, "start": 329.68, "end": 334.76, "text": " In the optional lab that follows this video, you see an introduction to one of the most", "tokens": [50364, 486, 652, 257, 2603, 2649, 294, 264, 2614, 565, 295, 428, 2539, 9284, 13, 50554, 50554, 467, 727, 312, 264, 2649, 1296, 3089, 12693, 294, 472, 420, 732, 2077, 5717, 1940, 867, 11, 50796, 50796, 867, 2496, 281, 360, 264, 912, 551, 13, 50936, 50936, 682, 264, 17312, 2715, 300, 10002, 341, 960, 11, 291, 536, 364, 9339, 281, 472, 295, 264, 881, 51190, 51190, 1143, 15329, 15148, 294, 3479, 2539, 11, 597, 321, 600, 1217, 9828, 322, 294, 341, 960, 51410, 51410, 1219, 1031, 8200, 13, 51522, 51522, 509, 536, 577, 436, 1884, 18875, 294, 3089, 11, 293, 613, 18875, 420, 14511, 295, 3547, 366, 1219, 51783, 51783], "temperature": 0.0, "avg_logprob": -0.10846585626000757, "compression_ratio": 1.702127659574468, "no_speech_prob": 8.939292456489056e-06}, {"id": 62, "seek": 31824, "start": 334.76, "end": 339.16, "text": " used Python libraries in machine learning, which we've already touched on in this video", "tokens": [50364, 486, 652, 257, 2603, 2649, 294, 264, 2614, 565, 295, 428, 2539, 9284, 13, 50554, 50554, 467, 727, 312, 264, 2649, 1296, 3089, 12693, 294, 472, 420, 732, 2077, 5717, 1940, 867, 11, 50796, 50796, 867, 2496, 281, 360, 264, 912, 551, 13, 50936, 50936, 682, 264, 17312, 2715, 300, 10002, 341, 960, 11, 291, 536, 364, 9339, 281, 472, 295, 264, 881, 51190, 51190, 1143, 15329, 15148, 294, 3479, 2539, 11, 597, 321, 600, 1217, 9828, 322, 294, 341, 960, 51410, 51410, 1219, 1031, 8200, 13, 51522, 51522, 509, 536, 577, 436, 1884, 18875, 294, 3089, 11, 293, 613, 18875, 420, 14511, 295, 3547, 366, 1219, 51783, 51783], "temperature": 0.0, "avg_logprob": -0.10846585626000757, "compression_ratio": 1.702127659574468, "no_speech_prob": 8.939292456489056e-06}, {"id": 63, "seek": 31824, "start": 339.16, "end": 341.40000000000003, "text": " called numpy.", "tokens": [50364, 486, 652, 257, 2603, 2649, 294, 264, 2614, 565, 295, 428, 2539, 9284, 13, 50554, 50554, 467, 727, 312, 264, 2649, 1296, 3089, 12693, 294, 472, 420, 732, 2077, 5717, 1940, 867, 11, 50796, 50796, 867, 2496, 281, 360, 264, 912, 551, 13, 50936, 50936, 682, 264, 17312, 2715, 300, 10002, 341, 960, 11, 291, 536, 364, 9339, 281, 472, 295, 264, 881, 51190, 51190, 1143, 15329, 15148, 294, 3479, 2539, 11, 597, 321, 600, 1217, 9828, 322, 294, 341, 960, 51410, 51410, 1219, 1031, 8200, 13, 51522, 51522, 509, 536, 577, 436, 1884, 18875, 294, 3089, 11, 293, 613, 18875, 420, 14511, 295, 3547, 366, 1219, 51783, 51783], "temperature": 0.0, "avg_logprob": -0.10846585626000757, "compression_ratio": 1.702127659574468, "no_speech_prob": 8.939292456489056e-06}, {"id": 64, "seek": 31824, "start": 341.40000000000003, "end": 346.62, "text": " You see how they create vectors in code, and these vectors or lists of numbers are called", "tokens": [50364, 486, 652, 257, 2603, 2649, 294, 264, 2614, 565, 295, 428, 2539, 9284, 13, 50554, 50554, 467, 727, 312, 264, 2649, 1296, 3089, 12693, 294, 472, 420, 732, 2077, 5717, 1940, 867, 11, 50796, 50796, 867, 2496, 281, 360, 264, 912, 551, 13, 50936, 50936, 682, 264, 17312, 2715, 300, 10002, 341, 960, 11, 291, 536, 364, 9339, 281, 472, 295, 264, 881, 51190, 51190, 1143, 15329, 15148, 294, 3479, 2539, 11, 597, 321, 600, 1217, 9828, 322, 294, 341, 960, 51410, 51410, 1219, 1031, 8200, 13, 51522, 51522, 509, 536, 577, 436, 1884, 18875, 294, 3089, 11, 293, 613, 18875, 420, 14511, 295, 3547, 366, 1219, 51783, 51783], "temperature": 0.0, "avg_logprob": -0.10846585626000757, "compression_ratio": 1.702127659574468, "no_speech_prob": 8.939292456489056e-06}, {"id": 65, "seek": 34662, "start": 346.62, "end": 348.72, "text": " numpy arrays.", "tokens": [50364, 1031, 8200, 41011, 13, 50469, 50469, 400, 291, 611, 536, 577, 281, 747, 264, 5893, 1674, 295, 732, 18875, 1228, 257, 1031, 8200, 2445, 1219, 50767, 50767, 5893, 13, 50871, 50871, 400, 291, 611, 483, 281, 536, 577, 8062, 1602, 3089, 11, 1270, 382, 1228, 264, 5893, 2445, 11, 393, 1190, 709, 51141, 51141, 4663, 813, 257, 337, 6367, 13, 51251, 51251, 682, 1186, 11, 291, 483, 281, 565, 341, 3089, 1803, 293, 4696, 536, 309, 1190, 709, 4663, 13, 51525, 51525, 639, 17312, 2715, 31472, 257, 3143, 2372, 295, 777, 1031, 8200, 28431, 13, 51751, 51751], "temperature": 0.0, "avg_logprob": -0.10927053894659486, "compression_ratio": 1.7523809523809524, "no_speech_prob": 7.295982868527062e-06}, {"id": 66, "seek": 34662, "start": 348.72, "end": 354.68, "text": " And you also see how to take the dot product of two vectors using a numpy function called", "tokens": [50364, 1031, 8200, 41011, 13, 50469, 50469, 400, 291, 611, 536, 577, 281, 747, 264, 5893, 1674, 295, 732, 18875, 1228, 257, 1031, 8200, 2445, 1219, 50767, 50767, 5893, 13, 50871, 50871, 400, 291, 611, 483, 281, 536, 577, 8062, 1602, 3089, 11, 1270, 382, 1228, 264, 5893, 2445, 11, 393, 1190, 709, 51141, 51141, 4663, 813, 257, 337, 6367, 13, 51251, 51251, 682, 1186, 11, 291, 483, 281, 565, 341, 3089, 1803, 293, 4696, 536, 309, 1190, 709, 4663, 13, 51525, 51525, 639, 17312, 2715, 31472, 257, 3143, 2372, 295, 777, 1031, 8200, 28431, 13, 51751, 51751], "temperature": 0.0, "avg_logprob": -0.10927053894659486, "compression_ratio": 1.7523809523809524, "no_speech_prob": 7.295982868527062e-06}, {"id": 67, "seek": 34662, "start": 354.68, "end": 356.76, "text": " dot.", "tokens": [50364, 1031, 8200, 41011, 13, 50469, 50469, 400, 291, 611, 536, 577, 281, 747, 264, 5893, 1674, 295, 732, 18875, 1228, 257, 1031, 8200, 2445, 1219, 50767, 50767, 5893, 13, 50871, 50871, 400, 291, 611, 483, 281, 536, 577, 8062, 1602, 3089, 11, 1270, 382, 1228, 264, 5893, 2445, 11, 393, 1190, 709, 51141, 51141, 4663, 813, 257, 337, 6367, 13, 51251, 51251, 682, 1186, 11, 291, 483, 281, 565, 341, 3089, 1803, 293, 4696, 536, 309, 1190, 709, 4663, 13, 51525, 51525, 639, 17312, 2715, 31472, 257, 3143, 2372, 295, 777, 1031, 8200, 28431, 13, 51751, 51751], "temperature": 0.0, "avg_logprob": -0.10927053894659486, "compression_ratio": 1.7523809523809524, "no_speech_prob": 7.295982868527062e-06}, {"id": 68, "seek": 34662, "start": 356.76, "end": 362.16, "text": " And you also get to see how vectorized code, such as using the dot function, can run much", "tokens": [50364, 1031, 8200, 41011, 13, 50469, 50469, 400, 291, 611, 536, 577, 281, 747, 264, 5893, 1674, 295, 732, 18875, 1228, 257, 1031, 8200, 2445, 1219, 50767, 50767, 5893, 13, 50871, 50871, 400, 291, 611, 483, 281, 536, 577, 8062, 1602, 3089, 11, 1270, 382, 1228, 264, 5893, 2445, 11, 393, 1190, 709, 51141, 51141, 4663, 813, 257, 337, 6367, 13, 51251, 51251, 682, 1186, 11, 291, 483, 281, 565, 341, 3089, 1803, 293, 4696, 536, 309, 1190, 709, 4663, 13, 51525, 51525, 639, 17312, 2715, 31472, 257, 3143, 2372, 295, 777, 1031, 8200, 28431, 13, 51751, 51751], "temperature": 0.0, "avg_logprob": -0.10927053894659486, "compression_ratio": 1.7523809523809524, "no_speech_prob": 7.295982868527062e-06}, {"id": 69, "seek": 34662, "start": 362.16, "end": 364.36, "text": " faster than a for loop.", "tokens": [50364, 1031, 8200, 41011, 13, 50469, 50469, 400, 291, 611, 536, 577, 281, 747, 264, 5893, 1674, 295, 732, 18875, 1228, 257, 1031, 8200, 2445, 1219, 50767, 50767, 5893, 13, 50871, 50871, 400, 291, 611, 483, 281, 536, 577, 8062, 1602, 3089, 11, 1270, 382, 1228, 264, 5893, 2445, 11, 393, 1190, 709, 51141, 51141, 4663, 813, 257, 337, 6367, 13, 51251, 51251, 682, 1186, 11, 291, 483, 281, 565, 341, 3089, 1803, 293, 4696, 536, 309, 1190, 709, 4663, 13, 51525, 51525, 639, 17312, 2715, 31472, 257, 3143, 2372, 295, 777, 1031, 8200, 28431, 13, 51751, 51751], "temperature": 0.0, "avg_logprob": -0.10927053894659486, "compression_ratio": 1.7523809523809524, "no_speech_prob": 7.295982868527062e-06}, {"id": 70, "seek": 34662, "start": 364.36, "end": 369.84000000000003, "text": " In fact, you get to time this code yourself and hopefully see it run much faster.", "tokens": [50364, 1031, 8200, 41011, 13, 50469, 50469, 400, 291, 611, 536, 577, 281, 747, 264, 5893, 1674, 295, 732, 18875, 1228, 257, 1031, 8200, 2445, 1219, 50767, 50767, 5893, 13, 50871, 50871, 400, 291, 611, 483, 281, 536, 577, 8062, 1602, 3089, 11, 1270, 382, 1228, 264, 5893, 2445, 11, 393, 1190, 709, 51141, 51141, 4663, 813, 257, 337, 6367, 13, 51251, 51251, 682, 1186, 11, 291, 483, 281, 565, 341, 3089, 1803, 293, 4696, 536, 309, 1190, 709, 4663, 13, 51525, 51525, 639, 17312, 2715, 31472, 257, 3143, 2372, 295, 777, 1031, 8200, 28431, 13, 51751, 51751], "temperature": 0.0, "avg_logprob": -0.10927053894659486, "compression_ratio": 1.7523809523809524, "no_speech_prob": 7.295982868527062e-06}, {"id": 71, "seek": 34662, "start": 369.84000000000003, "end": 374.36, "text": " This optional lab introduces a fair amount of new numpy syntax.", "tokens": [50364, 1031, 8200, 41011, 13, 50469, 50469, 400, 291, 611, 536, 577, 281, 747, 264, 5893, 1674, 295, 732, 18875, 1228, 257, 1031, 8200, 2445, 1219, 50767, 50767, 5893, 13, 50871, 50871, 400, 291, 611, 483, 281, 536, 577, 8062, 1602, 3089, 11, 1270, 382, 1228, 264, 5893, 2445, 11, 393, 1190, 709, 51141, 51141, 4663, 813, 257, 337, 6367, 13, 51251, 51251, 682, 1186, 11, 291, 483, 281, 565, 341, 3089, 1803, 293, 4696, 536, 309, 1190, 709, 4663, 13, 51525, 51525, 639, 17312, 2715, 31472, 257, 3143, 2372, 295, 777, 1031, 8200, 28431, 13, 51751, 51751], "temperature": 0.0, "avg_logprob": -0.10927053894659486, "compression_ratio": 1.7523809523809524, "no_speech_prob": 7.295982868527062e-06}, {"id": 72, "seek": 37436, "start": 374.36, "end": 379.04, "text": " So when you read through the optional lab, please don't feel like you have to understand", "tokens": [50364, 407, 562, 291, 1401, 807, 264, 17312, 2715, 11, 1767, 500, 380, 841, 411, 291, 362, 281, 1223, 50598, 50598, 439, 264, 3089, 558, 1314, 13, 50692, 50692, 583, 291, 393, 3155, 341, 21060, 293, 764, 309, 382, 257, 6408, 281, 574, 412, 562, 291, 434, 1364, 50910, 50910, 365, 1412, 12187, 294, 1031, 8200, 41011, 13, 51046, 51046, 407, 8882, 1720, 322, 12693, 341, 960, 322, 8062, 2144, 13, 51224, 51224, 509, 600, 3264, 472, 295, 264, 881, 1021, 293, 4420, 7512, 294, 18114, 3479, 51420, 51420, 2539, 14642, 13, 51502, 51502, 682, 264, 958, 960, 11, 321, 603, 829, 264, 5221, 295, 3866, 8213, 24590, 1214, 365, 8062, 2144, 51831, 51831], "temperature": 0.0, "avg_logprob": -0.06815806679103685, "compression_ratio": 1.6543624161073827, "no_speech_prob": 1.3709150152863003e-06}, {"id": 73, "seek": 37436, "start": 379.04, "end": 380.92, "text": " all the code right away.", "tokens": [50364, 407, 562, 291, 1401, 807, 264, 17312, 2715, 11, 1767, 500, 380, 841, 411, 291, 362, 281, 1223, 50598, 50598, 439, 264, 3089, 558, 1314, 13, 50692, 50692, 583, 291, 393, 3155, 341, 21060, 293, 764, 309, 382, 257, 6408, 281, 574, 412, 562, 291, 434, 1364, 50910, 50910, 365, 1412, 12187, 294, 1031, 8200, 41011, 13, 51046, 51046, 407, 8882, 1720, 322, 12693, 341, 960, 322, 8062, 2144, 13, 51224, 51224, 509, 600, 3264, 472, 295, 264, 881, 1021, 293, 4420, 7512, 294, 18114, 3479, 51420, 51420, 2539, 14642, 13, 51502, 51502, 682, 264, 958, 960, 11, 321, 603, 829, 264, 5221, 295, 3866, 8213, 24590, 1214, 365, 8062, 2144, 51831, 51831], "temperature": 0.0, "avg_logprob": -0.06815806679103685, "compression_ratio": 1.6543624161073827, "no_speech_prob": 1.3709150152863003e-06}, {"id": 74, "seek": 37436, "start": 380.92, "end": 385.28000000000003, "text": " But you can save this notebook and use it as a reference to look at when you're working", "tokens": [50364, 407, 562, 291, 1401, 807, 264, 17312, 2715, 11, 1767, 500, 380, 841, 411, 291, 362, 281, 1223, 50598, 50598, 439, 264, 3089, 558, 1314, 13, 50692, 50692, 583, 291, 393, 3155, 341, 21060, 293, 764, 309, 382, 257, 6408, 281, 574, 412, 562, 291, 434, 1364, 50910, 50910, 365, 1412, 12187, 294, 1031, 8200, 41011, 13, 51046, 51046, 407, 8882, 1720, 322, 12693, 341, 960, 322, 8062, 2144, 13, 51224, 51224, 509, 600, 3264, 472, 295, 264, 881, 1021, 293, 4420, 7512, 294, 18114, 3479, 51420, 51420, 2539, 14642, 13, 51502, 51502, 682, 264, 958, 960, 11, 321, 603, 829, 264, 5221, 295, 3866, 8213, 24590, 1214, 365, 8062, 2144, 51831, 51831], "temperature": 0.0, "avg_logprob": -0.06815806679103685, "compression_ratio": 1.6543624161073827, "no_speech_prob": 1.3709150152863003e-06}, {"id": 75, "seek": 37436, "start": 385.28000000000003, "end": 388.0, "text": " with data stored in numpy arrays.", "tokens": [50364, 407, 562, 291, 1401, 807, 264, 17312, 2715, 11, 1767, 500, 380, 841, 411, 291, 362, 281, 1223, 50598, 50598, 439, 264, 3089, 558, 1314, 13, 50692, 50692, 583, 291, 393, 3155, 341, 21060, 293, 764, 309, 382, 257, 6408, 281, 574, 412, 562, 291, 434, 1364, 50910, 50910, 365, 1412, 12187, 294, 1031, 8200, 41011, 13, 51046, 51046, 407, 8882, 1720, 322, 12693, 341, 960, 322, 8062, 2144, 13, 51224, 51224, 509, 600, 3264, 472, 295, 264, 881, 1021, 293, 4420, 7512, 294, 18114, 3479, 51420, 51420, 2539, 14642, 13, 51502, 51502, 682, 264, 958, 960, 11, 321, 603, 829, 264, 5221, 295, 3866, 8213, 24590, 1214, 365, 8062, 2144, 51831, 51831], "temperature": 0.0, "avg_logprob": -0.06815806679103685, "compression_ratio": 1.6543624161073827, "no_speech_prob": 1.3709150152863003e-06}, {"id": 76, "seek": 37436, "start": 388.0, "end": 391.56, "text": " So congrats on finishing this video on vectorization.", "tokens": [50364, 407, 562, 291, 1401, 807, 264, 17312, 2715, 11, 1767, 500, 380, 841, 411, 291, 362, 281, 1223, 50598, 50598, 439, 264, 3089, 558, 1314, 13, 50692, 50692, 583, 291, 393, 3155, 341, 21060, 293, 764, 309, 382, 257, 6408, 281, 574, 412, 562, 291, 434, 1364, 50910, 50910, 365, 1412, 12187, 294, 1031, 8200, 41011, 13, 51046, 51046, 407, 8882, 1720, 322, 12693, 341, 960, 322, 8062, 2144, 13, 51224, 51224, 509, 600, 3264, 472, 295, 264, 881, 1021, 293, 4420, 7512, 294, 18114, 3479, 51420, 51420, 2539, 14642, 13, 51502, 51502, 682, 264, 958, 960, 11, 321, 603, 829, 264, 5221, 295, 3866, 8213, 24590, 1214, 365, 8062, 2144, 51831, 51831], "temperature": 0.0, "avg_logprob": -0.06815806679103685, "compression_ratio": 1.6543624161073827, "no_speech_prob": 1.3709150152863003e-06}, {"id": 77, "seek": 37436, "start": 391.56, "end": 395.48, "text": " You've learned one of the most important and useful techniques in implementing machine", "tokens": [50364, 407, 562, 291, 1401, 807, 264, 17312, 2715, 11, 1767, 500, 380, 841, 411, 291, 362, 281, 1223, 50598, 50598, 439, 264, 3089, 558, 1314, 13, 50692, 50692, 583, 291, 393, 3155, 341, 21060, 293, 764, 309, 382, 257, 6408, 281, 574, 412, 562, 291, 434, 1364, 50910, 50910, 365, 1412, 12187, 294, 1031, 8200, 41011, 13, 51046, 51046, 407, 8882, 1720, 322, 12693, 341, 960, 322, 8062, 2144, 13, 51224, 51224, 509, 600, 3264, 472, 295, 264, 881, 1021, 293, 4420, 7512, 294, 18114, 3479, 51420, 51420, 2539, 14642, 13, 51502, 51502, 682, 264, 958, 960, 11, 321, 603, 829, 264, 5221, 295, 3866, 8213, 24590, 1214, 365, 8062, 2144, 51831, 51831], "temperature": 0.0, "avg_logprob": -0.06815806679103685, "compression_ratio": 1.6543624161073827, "no_speech_prob": 1.3709150152863003e-06}, {"id": 78, "seek": 37436, "start": 395.48, "end": 397.12, "text": " learning algorithms.", "tokens": [50364, 407, 562, 291, 1401, 807, 264, 17312, 2715, 11, 1767, 500, 380, 841, 411, 291, 362, 281, 1223, 50598, 50598, 439, 264, 3089, 558, 1314, 13, 50692, 50692, 583, 291, 393, 3155, 341, 21060, 293, 764, 309, 382, 257, 6408, 281, 574, 412, 562, 291, 434, 1364, 50910, 50910, 365, 1412, 12187, 294, 1031, 8200, 41011, 13, 51046, 51046, 407, 8882, 1720, 322, 12693, 341, 960, 322, 8062, 2144, 13, 51224, 51224, 509, 600, 3264, 472, 295, 264, 881, 1021, 293, 4420, 7512, 294, 18114, 3479, 51420, 51420, 2539, 14642, 13, 51502, 51502, 682, 264, 958, 960, 11, 321, 603, 829, 264, 5221, 295, 3866, 8213, 24590, 1214, 365, 8062, 2144, 51831, 51831], "temperature": 0.0, "avg_logprob": -0.06815806679103685, "compression_ratio": 1.6543624161073827, "no_speech_prob": 1.3709150152863003e-06}, {"id": 79, "seek": 37436, "start": 397.12, "end": 403.7, "text": " In the next video, we'll put the math of multiple linear regression together with vectorization", "tokens": [50364, 407, 562, 291, 1401, 807, 264, 17312, 2715, 11, 1767, 500, 380, 841, 411, 291, 362, 281, 1223, 50598, 50598, 439, 264, 3089, 558, 1314, 13, 50692, 50692, 583, 291, 393, 3155, 341, 21060, 293, 764, 309, 382, 257, 6408, 281, 574, 412, 562, 291, 434, 1364, 50910, 50910, 365, 1412, 12187, 294, 1031, 8200, 41011, 13, 51046, 51046, 407, 8882, 1720, 322, 12693, 341, 960, 322, 8062, 2144, 13, 51224, 51224, 509, 600, 3264, 472, 295, 264, 881, 1021, 293, 4420, 7512, 294, 18114, 3479, 51420, 51420, 2539, 14642, 13, 51502, 51502, 682, 264, 958, 960, 11, 321, 603, 829, 264, 5221, 295, 3866, 8213, 24590, 1214, 365, 8062, 2144, 51831, 51831], "temperature": 0.0, "avg_logprob": -0.06815806679103685, "compression_ratio": 1.6543624161073827, "no_speech_prob": 1.3709150152863003e-06}, {"id": 80, "seek": 40370, "start": 403.7, "end": 409.84, "text": " so that you really implement gradient descent for multiple linear regression with vectorization.", "tokens": [50364, 370, 300, 291, 534, 4445, 16235, 23475, 337, 3866, 8213, 24590, 365, 8062, 2144, 13, 50671, 50671, 961, 311, 352, 322, 281, 264, 958, 960, 13, 50743], "temperature": 0.0, "avg_logprob": -0.19520014729993096, "compression_ratio": 1.2095238095238094, "no_speech_prob": 8.033819904085249e-05}, {"id": 81, "seek": 40984, "start": 409.84, "end": 436.84, "text": " Let's go on to the next video.", "tokens": [50364, 961, 311, 352, 322, 281, 264, 958, 960, 13, 51714], "temperature": 0.0, "avg_logprob": -0.42313651243845624, "compression_ratio": 0.7894736842105263, "no_speech_prob": 0.00020569395564962178}], "language": "en", "video_id": "nRGG50GDNAA", "entity": "ML Specialization, Andrew Ng (2022)"}}
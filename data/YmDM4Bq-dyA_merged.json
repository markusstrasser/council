{"video_id": "YmDM4Bq-dyA", "title": "4.5 Neural Networks Model | Neural Network Layer --[Machine Learning | Andrew Ng]", "description": "Second Course:\nAdvanced Learning Algorithms.\n\n\nIf you liked the content please subscribe and put a little blue thumb.\nTake heart!", "author": "Machine Learning", "keywords": [], "channel_url": "https://www.youtube.com/channel/UClG5HEAJJFOavT_UolqYROQ", "length": 589, "views": 155, "publish_date": "11/04/2022", "timestamp": 1661817600, "entity": "ML Specialization, Andrew Ng (2022)", "transcript": {"text": " The fundamental building block of most modern neural networks is a layer of neurons. In this video, you learn how to construct a layer of neurons, and once you have that down, you'll be able to take those building blocks and put them together to form a large neural network. Let's take a look at how a layer of neurons works. Here's the example we had from the demand prediction example where we had four input features that were fed to this layer of three neurons in this hidden layer that then sends this output to this output layer with just one neuron. Let's zoom in to the hidden layer to look at its computations. This hidden layer inputs four numbers, and these four numbers are inputs to each of three neurons, and each of these three neurons is just implementing a little logistic regression unit or a little logistic regression function. Take this first neuron. It has two parameters, W and B, and in fact, to denote that this is the first hidden unit, I'm going to subscript this as W1B1, and what it does is it'll output some activation value A, which is G of W1 in a product of X plus B1, where this is the familiar Z value that you had learned about in logistic regression in the previous course, and G of Z is the familiar logistic function, one over one plus E to the negative Z, and so maybe this ends up being a number 0.3, and that's the activation value A of the first neuron. To denote that this is the first neuron, I'm also going to add a subscript A1 over here, and so A1 may be a number like 0.3. That's a 0.3 chance of this being highly affordable based on the input features. Now let's look at the second neuron. The second neuron has parameters W2 and B2, and this WB or W2B2 are the parameters of the second logistic unit. So it computes A2 equals the logistic function G applied to W2 dot product X plus B2, and this may be some other number, say 0.7, because in this example there's a 0.7 chance that we think the potential buyers will be aware of this t-shirt. And similarly, the third neuron has a third set of parameters, W3B3, and similarly computes an activation value A3 equals G of W3 dot product X plus B3, and that may be, say, 0.2. So in this example, these three neurons output 0.3, 0.7, and 0.2, and this vector of three numbers becomes the vector of activation values A that is then passed to the final output layer of this neural network. Now when you build neural networks with multiple layers, it will be useful to give the layers different numbers. So by convention, this layer is called layer one of the neural network, and this layer is called layer two of the neural network, and the input layer is also sometimes called layer zero, and today there are neural networks that can have dozens or even hundreds of layers. But in order to introduce notation to help us distinguish between the different layers, I'm going to use superscript square bracket one to index into different layers. So in particular, A superscript in square brackets one, I'm going to use as a notation to denote the output of layer one of this hidden layer of this neural network, and similarly, W1B1 here are the parameters of the first unit in layer one of the neural network, so I'm also going to add a superscript in square brackets one here, and W2B2 are the parameters of the second hidden unit or the second hidden neuron in layer one, and so those parameters are also denoted here, W superscript square bracket one, like so. And similarly, I can add superscript square brackets like so to denote that these are the activation values of the hidden units of layer one of this neural network. I know maybe this notation is getting a little bit cluttered, but the thing to remember is whenever you see this superscript square bracket one, that just refers to a quantity that is associated with layer one of the neural network, and if you see superscript square bracket two, that refers to a quantity associated with layer two of the neural network, and similarly for other layers as well, including layer three, layer four, and so on for neural networks with more layers. So that's the computation of layer one of this neural network. This output is this activation vector, A superscript square bracket one, and I'm going to copy this over here because this output, A1, becomes the input to layer two. So now let's zoom into the computation of layer two of this neural network, which is also the output layer. So the input to layer two is the output of layer one. So A1 is this vector 0.3, 0.7, 0.2 that we just computed on the previous part of the slide, and so because the output layer has just a single neuron, all it does is it computes a subscript one that is the output of its first and only neuron as G, the sigmoid function, applied to W subscript one in a product with A superscript square bracket one, so this is the input into this layer, and then plus B1. Here this is the quantity Z that you're familiar with, and G as before is the sigmoid function that you apply to this, and if this results in a number, say 0.84, then that becomes the output of this output layer of the neural network, and in this example, because the output layer has just a single neuron, this output is just a scalar, it's a single number rather than a vector of numbers. Sticking with our notational convention from before, we're going to use A superscript in square brackets two to denote the quantities associated with layer two of this neural network, so A superscript square bracket two is the output of this layer, and so I'm going to also copy this here as the final output of the neural network, and to make the notation consistent, you can also add these superscript square bracket twos to denote that these are the parameters and activation values associated with layer two of the neural network. Once the neural network has computed A2, there's one final optional step that you can choose to implement or not, which is if you want a binary prediction, one or zero, is this a top seller, yes or no, is you can take the number A superscript square brackets two, subscript one, and this is the number 0.84 that we computed, and threshold is at 0.5, so if it's greater than 0.5, you can predict y hat equals one, and if it's less than 0.5, then predict y hat equals zero, and we saw this thresholding as well when we learned about logistic regression in the first course of the specialization. So if you wish, this then gives you the final prediction y hat as either one or zero if you don't want just a probability of it being a top seller. So that's how a neural network works. Every layer inputs a vector of numbers and applies a bunch of logistic regression units to it and then computes another vector of numbers that then gets passed from layer to layer until you get the final output layer's computation, which is a prediction of the neural network that you can either threshold at 0.5 or not to come up with the final prediction, and with that, let's go on to use this foundation we've built now to look at some even more complex, even larger neural network models, and I hope that by seeing more examples, this concept of layers and how to put them together to build a neural network will become even clearer. So let's go on to the next video.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 8.68, "text": " The fundamental building block of most modern neural networks is a layer of neurons.", "tokens": [50364, 440, 8088, 2390, 3461, 295, 881, 4363, 18161, 9590, 307, 257, 4583, 295, 22027, 13, 50798, 50798, 682, 341, 960, 11, 291, 1466, 577, 281, 7690, 257, 4583, 295, 22027, 11, 293, 1564, 291, 362, 300, 51028, 51028, 760, 11, 291, 603, 312, 1075, 281, 747, 729, 2390, 8474, 293, 829, 552, 1214, 281, 1254, 257, 2416, 51260, 51260, 18161, 3209, 13, 51310, 51310, 961, 311, 747, 257, 574, 412, 577, 257, 4583, 295, 22027, 1985, 13, 51486, 51486, 1692, 311, 264, 1365, 321, 632, 490, 264, 4733, 17630, 1365, 689, 321, 632, 1451, 4846, 51782, 51782], "temperature": 0.0, "avg_logprob": -0.1443876208681049, "compression_ratio": 1.7982456140350878, "no_speech_prob": 0.014275327324867249}, {"id": 1, "seek": 0, "start": 8.68, "end": 13.280000000000001, "text": " In this video, you learn how to construct a layer of neurons, and once you have that", "tokens": [50364, 440, 8088, 2390, 3461, 295, 881, 4363, 18161, 9590, 307, 257, 4583, 295, 22027, 13, 50798, 50798, 682, 341, 960, 11, 291, 1466, 577, 281, 7690, 257, 4583, 295, 22027, 11, 293, 1564, 291, 362, 300, 51028, 51028, 760, 11, 291, 603, 312, 1075, 281, 747, 729, 2390, 8474, 293, 829, 552, 1214, 281, 1254, 257, 2416, 51260, 51260, 18161, 3209, 13, 51310, 51310, 961, 311, 747, 257, 574, 412, 577, 257, 4583, 295, 22027, 1985, 13, 51486, 51486, 1692, 311, 264, 1365, 321, 632, 490, 264, 4733, 17630, 1365, 689, 321, 632, 1451, 4846, 51782, 51782], "temperature": 0.0, "avg_logprob": -0.1443876208681049, "compression_ratio": 1.7982456140350878, "no_speech_prob": 0.014275327324867249}, {"id": 2, "seek": 0, "start": 13.280000000000001, "end": 17.92, "text": " down, you'll be able to take those building blocks and put them together to form a large", "tokens": [50364, 440, 8088, 2390, 3461, 295, 881, 4363, 18161, 9590, 307, 257, 4583, 295, 22027, 13, 50798, 50798, 682, 341, 960, 11, 291, 1466, 577, 281, 7690, 257, 4583, 295, 22027, 11, 293, 1564, 291, 362, 300, 51028, 51028, 760, 11, 291, 603, 312, 1075, 281, 747, 729, 2390, 8474, 293, 829, 552, 1214, 281, 1254, 257, 2416, 51260, 51260, 18161, 3209, 13, 51310, 51310, 961, 311, 747, 257, 574, 412, 577, 257, 4583, 295, 22027, 1985, 13, 51486, 51486, 1692, 311, 264, 1365, 321, 632, 490, 264, 4733, 17630, 1365, 689, 321, 632, 1451, 4846, 51782, 51782], "temperature": 0.0, "avg_logprob": -0.1443876208681049, "compression_ratio": 1.7982456140350878, "no_speech_prob": 0.014275327324867249}, {"id": 3, "seek": 0, "start": 17.92, "end": 18.92, "text": " neural network.", "tokens": [50364, 440, 8088, 2390, 3461, 295, 881, 4363, 18161, 9590, 307, 257, 4583, 295, 22027, 13, 50798, 50798, 682, 341, 960, 11, 291, 1466, 577, 281, 7690, 257, 4583, 295, 22027, 11, 293, 1564, 291, 362, 300, 51028, 51028, 760, 11, 291, 603, 312, 1075, 281, 747, 729, 2390, 8474, 293, 829, 552, 1214, 281, 1254, 257, 2416, 51260, 51260, 18161, 3209, 13, 51310, 51310, 961, 311, 747, 257, 574, 412, 577, 257, 4583, 295, 22027, 1985, 13, 51486, 51486, 1692, 311, 264, 1365, 321, 632, 490, 264, 4733, 17630, 1365, 689, 321, 632, 1451, 4846, 51782, 51782], "temperature": 0.0, "avg_logprob": -0.1443876208681049, "compression_ratio": 1.7982456140350878, "no_speech_prob": 0.014275327324867249}, {"id": 4, "seek": 0, "start": 18.92, "end": 22.44, "text": " Let's take a look at how a layer of neurons works.", "tokens": [50364, 440, 8088, 2390, 3461, 295, 881, 4363, 18161, 9590, 307, 257, 4583, 295, 22027, 13, 50798, 50798, 682, 341, 960, 11, 291, 1466, 577, 281, 7690, 257, 4583, 295, 22027, 11, 293, 1564, 291, 362, 300, 51028, 51028, 760, 11, 291, 603, 312, 1075, 281, 747, 729, 2390, 8474, 293, 829, 552, 1214, 281, 1254, 257, 2416, 51260, 51260, 18161, 3209, 13, 51310, 51310, 961, 311, 747, 257, 574, 412, 577, 257, 4583, 295, 22027, 1985, 13, 51486, 51486, 1692, 311, 264, 1365, 321, 632, 490, 264, 4733, 17630, 1365, 689, 321, 632, 1451, 4846, 51782, 51782], "temperature": 0.0, "avg_logprob": -0.1443876208681049, "compression_ratio": 1.7982456140350878, "no_speech_prob": 0.014275327324867249}, {"id": 5, "seek": 0, "start": 22.44, "end": 28.36, "text": " Here's the example we had from the demand prediction example where we had four input", "tokens": [50364, 440, 8088, 2390, 3461, 295, 881, 4363, 18161, 9590, 307, 257, 4583, 295, 22027, 13, 50798, 50798, 682, 341, 960, 11, 291, 1466, 577, 281, 7690, 257, 4583, 295, 22027, 11, 293, 1564, 291, 362, 300, 51028, 51028, 760, 11, 291, 603, 312, 1075, 281, 747, 729, 2390, 8474, 293, 829, 552, 1214, 281, 1254, 257, 2416, 51260, 51260, 18161, 3209, 13, 51310, 51310, 961, 311, 747, 257, 574, 412, 577, 257, 4583, 295, 22027, 1985, 13, 51486, 51486, 1692, 311, 264, 1365, 321, 632, 490, 264, 4733, 17630, 1365, 689, 321, 632, 1451, 4846, 51782, 51782], "temperature": 0.0, "avg_logprob": -0.1443876208681049, "compression_ratio": 1.7982456140350878, "no_speech_prob": 0.014275327324867249}, {"id": 6, "seek": 2836, "start": 28.36, "end": 35.92, "text": " features that were fed to this layer of three neurons in this hidden layer that then sends", "tokens": [50364, 4122, 300, 645, 4636, 281, 341, 4583, 295, 1045, 22027, 294, 341, 7633, 4583, 300, 550, 14790, 50742, 50742, 341, 5598, 281, 341, 5598, 4583, 365, 445, 472, 34090, 13, 50972, 50972, 961, 311, 8863, 294, 281, 264, 7633, 4583, 281, 574, 412, 1080, 2807, 763, 13, 51300, 51300, 639, 7633, 4583, 15743, 1451, 3547, 11, 293, 613, 1451, 3547, 366, 15743, 281, 1184, 295, 1045, 51587, 51587], "temperature": 0.0, "avg_logprob": -0.11539313452584403, "compression_ratio": 1.8170731707317074, "no_speech_prob": 4.399687531986274e-05}, {"id": 7, "seek": 2836, "start": 35.92, "end": 40.519999999999996, "text": " this output to this output layer with just one neuron.", "tokens": [50364, 4122, 300, 645, 4636, 281, 341, 4583, 295, 1045, 22027, 294, 341, 7633, 4583, 300, 550, 14790, 50742, 50742, 341, 5598, 281, 341, 5598, 4583, 365, 445, 472, 34090, 13, 50972, 50972, 961, 311, 8863, 294, 281, 264, 7633, 4583, 281, 574, 412, 1080, 2807, 763, 13, 51300, 51300, 639, 7633, 4583, 15743, 1451, 3547, 11, 293, 613, 1451, 3547, 366, 15743, 281, 1184, 295, 1045, 51587, 51587], "temperature": 0.0, "avg_logprob": -0.11539313452584403, "compression_ratio": 1.8170731707317074, "no_speech_prob": 4.399687531986274e-05}, {"id": 8, "seek": 2836, "start": 40.519999999999996, "end": 47.08, "text": " Let's zoom in to the hidden layer to look at its computations.", "tokens": [50364, 4122, 300, 645, 4636, 281, 341, 4583, 295, 1045, 22027, 294, 341, 7633, 4583, 300, 550, 14790, 50742, 50742, 341, 5598, 281, 341, 5598, 4583, 365, 445, 472, 34090, 13, 50972, 50972, 961, 311, 8863, 294, 281, 264, 7633, 4583, 281, 574, 412, 1080, 2807, 763, 13, 51300, 51300, 639, 7633, 4583, 15743, 1451, 3547, 11, 293, 613, 1451, 3547, 366, 15743, 281, 1184, 295, 1045, 51587, 51587], "temperature": 0.0, "avg_logprob": -0.11539313452584403, "compression_ratio": 1.8170731707317074, "no_speech_prob": 4.399687531986274e-05}, {"id": 9, "seek": 2836, "start": 47.08, "end": 52.82, "text": " This hidden layer inputs four numbers, and these four numbers are inputs to each of three", "tokens": [50364, 4122, 300, 645, 4636, 281, 341, 4583, 295, 1045, 22027, 294, 341, 7633, 4583, 300, 550, 14790, 50742, 50742, 341, 5598, 281, 341, 5598, 4583, 365, 445, 472, 34090, 13, 50972, 50972, 961, 311, 8863, 294, 281, 264, 7633, 4583, 281, 574, 412, 1080, 2807, 763, 13, 51300, 51300, 639, 7633, 4583, 15743, 1451, 3547, 11, 293, 613, 1451, 3547, 366, 15743, 281, 1184, 295, 1045, 51587, 51587], "temperature": 0.0, "avg_logprob": -0.11539313452584403, "compression_ratio": 1.8170731707317074, "no_speech_prob": 4.399687531986274e-05}, {"id": 10, "seek": 5282, "start": 52.82, "end": 61.08, "text": " neurons, and each of these three neurons is just implementing a little logistic regression", "tokens": [50364, 22027, 11, 293, 1184, 295, 613, 1045, 22027, 307, 445, 18114, 257, 707, 3565, 3142, 24590, 50777, 50777, 4985, 420, 257, 707, 3565, 3142, 24590, 2445, 13, 50983, 50983, 3664, 341, 700, 34090, 13, 51073, 51073, 467, 575, 732, 9834, 11, 343, 293, 363, 11, 293, 294, 1186, 11, 281, 45708, 300, 341, 307, 264, 700, 7633, 4985, 11, 51495, 51495], "temperature": 0.0, "avg_logprob": -0.1334517342703683, "compression_ratio": 1.6258064516129032, "no_speech_prob": 1.2410840099619236e-05}, {"id": 11, "seek": 5282, "start": 61.08, "end": 65.2, "text": " unit or a little logistic regression function.", "tokens": [50364, 22027, 11, 293, 1184, 295, 613, 1045, 22027, 307, 445, 18114, 257, 707, 3565, 3142, 24590, 50777, 50777, 4985, 420, 257, 707, 3565, 3142, 24590, 2445, 13, 50983, 50983, 3664, 341, 700, 34090, 13, 51073, 51073, 467, 575, 732, 9834, 11, 343, 293, 363, 11, 293, 294, 1186, 11, 281, 45708, 300, 341, 307, 264, 700, 7633, 4985, 11, 51495, 51495], "temperature": 0.0, "avg_logprob": -0.1334517342703683, "compression_ratio": 1.6258064516129032, "no_speech_prob": 1.2410840099619236e-05}, {"id": 12, "seek": 5282, "start": 65.2, "end": 67.0, "text": " Take this first neuron.", "tokens": [50364, 22027, 11, 293, 1184, 295, 613, 1045, 22027, 307, 445, 18114, 257, 707, 3565, 3142, 24590, 50777, 50777, 4985, 420, 257, 707, 3565, 3142, 24590, 2445, 13, 50983, 50983, 3664, 341, 700, 34090, 13, 51073, 51073, 467, 575, 732, 9834, 11, 343, 293, 363, 11, 293, 294, 1186, 11, 281, 45708, 300, 341, 307, 264, 700, 7633, 4985, 11, 51495, 51495], "temperature": 0.0, "avg_logprob": -0.1334517342703683, "compression_ratio": 1.6258064516129032, "no_speech_prob": 1.2410840099619236e-05}, {"id": 13, "seek": 5282, "start": 67.0, "end": 75.44, "text": " It has two parameters, W and B, and in fact, to denote that this is the first hidden unit,", "tokens": [50364, 22027, 11, 293, 1184, 295, 613, 1045, 22027, 307, 445, 18114, 257, 707, 3565, 3142, 24590, 50777, 50777, 4985, 420, 257, 707, 3565, 3142, 24590, 2445, 13, 50983, 50983, 3664, 341, 700, 34090, 13, 51073, 51073, 467, 575, 732, 9834, 11, 343, 293, 363, 11, 293, 294, 1186, 11, 281, 45708, 300, 341, 307, 264, 700, 7633, 4985, 11, 51495, 51495], "temperature": 0.0, "avg_logprob": -0.1334517342703683, "compression_ratio": 1.6258064516129032, "no_speech_prob": 1.2410840099619236e-05}, {"id": 14, "seek": 7544, "start": 75.44, "end": 83.52, "text": " I'm going to subscript this as W1B1, and what it does is it'll output some activation value", "tokens": [50364, 286, 478, 516, 281, 2325, 662, 341, 382, 343, 16, 33, 16, 11, 293, 437, 309, 775, 307, 309, 603, 5598, 512, 24433, 2158, 50768, 50768, 316, 11, 597, 307, 460, 295, 343, 16, 294, 257, 1674, 295, 1783, 1804, 363, 16, 11, 689, 341, 307, 264, 4963, 1176, 2158, 300, 51398, 51398, 291, 632, 3264, 466, 294, 3565, 3142, 24590, 294, 264, 3894, 1164, 11, 293, 460, 295, 1176, 307, 264, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.12301242978949296, "compression_ratio": 1.440217391304348, "no_speech_prob": 1.7777747416403145e-05}, {"id": 15, "seek": 7544, "start": 83.52, "end": 96.12, "text": " A, which is G of W1 in a product of X plus B1, where this is the familiar Z value that", "tokens": [50364, 286, 478, 516, 281, 2325, 662, 341, 382, 343, 16, 33, 16, 11, 293, 437, 309, 775, 307, 309, 603, 5598, 512, 24433, 2158, 50768, 50768, 316, 11, 597, 307, 460, 295, 343, 16, 294, 257, 1674, 295, 1783, 1804, 363, 16, 11, 689, 341, 307, 264, 4963, 1176, 2158, 300, 51398, 51398, 291, 632, 3264, 466, 294, 3565, 3142, 24590, 294, 264, 3894, 1164, 11, 293, 460, 295, 1176, 307, 264, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.12301242978949296, "compression_ratio": 1.440217391304348, "no_speech_prob": 1.7777747416403145e-05}, {"id": 16, "seek": 7544, "start": 96.12, "end": 104.16, "text": " you had learned about in logistic regression in the previous course, and G of Z is the", "tokens": [50364, 286, 478, 516, 281, 2325, 662, 341, 382, 343, 16, 33, 16, 11, 293, 437, 309, 775, 307, 309, 603, 5598, 512, 24433, 2158, 50768, 50768, 316, 11, 597, 307, 460, 295, 343, 16, 294, 257, 1674, 295, 1783, 1804, 363, 16, 11, 689, 341, 307, 264, 4963, 1176, 2158, 300, 51398, 51398, 291, 632, 3264, 466, 294, 3565, 3142, 24590, 294, 264, 3894, 1164, 11, 293, 460, 295, 1176, 307, 264, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.12301242978949296, "compression_ratio": 1.440217391304348, "no_speech_prob": 1.7777747416403145e-05}, {"id": 17, "seek": 10416, "start": 104.16, "end": 111.75999999999999, "text": " familiar logistic function, one over one plus E to the negative Z, and so maybe this ends", "tokens": [50364, 4963, 3565, 3142, 2445, 11, 472, 670, 472, 1804, 462, 281, 264, 3671, 1176, 11, 293, 370, 1310, 341, 5314, 50744, 50744, 493, 885, 257, 1230, 1958, 13, 18, 11, 293, 300, 311, 264, 24433, 2158, 316, 295, 264, 700, 34090, 13, 51118, 51118, 1407, 45708, 300, 341, 307, 264, 700, 34090, 11, 286, 478, 611, 516, 281, 909, 257, 2325, 662, 316, 16, 670, 510, 11, 51366, 51366, 293, 370, 316, 16, 815, 312, 257, 1230, 411, 1958, 13, 18, 13, 51488, 51488], "temperature": 0.0, "avg_logprob": -0.13767626119214435, "compression_ratio": 1.5287958115183247, "no_speech_prob": 2.332055146325729e-06}, {"id": 18, "seek": 10416, "start": 111.75999999999999, "end": 119.24, "text": " up being a number 0.3, and that's the activation value A of the first neuron.", "tokens": [50364, 4963, 3565, 3142, 2445, 11, 472, 670, 472, 1804, 462, 281, 264, 3671, 1176, 11, 293, 370, 1310, 341, 5314, 50744, 50744, 493, 885, 257, 1230, 1958, 13, 18, 11, 293, 300, 311, 264, 24433, 2158, 316, 295, 264, 700, 34090, 13, 51118, 51118, 1407, 45708, 300, 341, 307, 264, 700, 34090, 11, 286, 478, 611, 516, 281, 909, 257, 2325, 662, 316, 16, 670, 510, 11, 51366, 51366, 293, 370, 316, 16, 815, 312, 257, 1230, 411, 1958, 13, 18, 13, 51488, 51488], "temperature": 0.0, "avg_logprob": -0.13767626119214435, "compression_ratio": 1.5287958115183247, "no_speech_prob": 2.332055146325729e-06}, {"id": 19, "seek": 10416, "start": 119.24, "end": 124.19999999999999, "text": " To denote that this is the first neuron, I'm also going to add a subscript A1 over here,", "tokens": [50364, 4963, 3565, 3142, 2445, 11, 472, 670, 472, 1804, 462, 281, 264, 3671, 1176, 11, 293, 370, 1310, 341, 5314, 50744, 50744, 493, 885, 257, 1230, 1958, 13, 18, 11, 293, 300, 311, 264, 24433, 2158, 316, 295, 264, 700, 34090, 13, 51118, 51118, 1407, 45708, 300, 341, 307, 264, 700, 34090, 11, 286, 478, 611, 516, 281, 909, 257, 2325, 662, 316, 16, 670, 510, 11, 51366, 51366, 293, 370, 316, 16, 815, 312, 257, 1230, 411, 1958, 13, 18, 13, 51488, 51488], "temperature": 0.0, "avg_logprob": -0.13767626119214435, "compression_ratio": 1.5287958115183247, "no_speech_prob": 2.332055146325729e-06}, {"id": 20, "seek": 10416, "start": 124.19999999999999, "end": 126.64, "text": " and so A1 may be a number like 0.3.", "tokens": [50364, 4963, 3565, 3142, 2445, 11, 472, 670, 472, 1804, 462, 281, 264, 3671, 1176, 11, 293, 370, 1310, 341, 5314, 50744, 50744, 493, 885, 257, 1230, 1958, 13, 18, 11, 293, 300, 311, 264, 24433, 2158, 316, 295, 264, 700, 34090, 13, 51118, 51118, 1407, 45708, 300, 341, 307, 264, 700, 34090, 11, 286, 478, 611, 516, 281, 909, 257, 2325, 662, 316, 16, 670, 510, 11, 51366, 51366, 293, 370, 316, 16, 815, 312, 257, 1230, 411, 1958, 13, 18, 13, 51488, 51488], "temperature": 0.0, "avg_logprob": -0.13767626119214435, "compression_ratio": 1.5287958115183247, "no_speech_prob": 2.332055146325729e-06}, {"id": 21, "seek": 12664, "start": 126.64, "end": 134.24, "text": " That's a 0.3 chance of this being highly affordable based on the input features.", "tokens": [50364, 663, 311, 257, 1958, 13, 18, 2931, 295, 341, 885, 5405, 12028, 2361, 322, 264, 4846, 4122, 13, 50744, 50744, 823, 718, 311, 574, 412, 264, 1150, 34090, 13, 50846, 50846, 440, 1150, 34090, 575, 9834, 343, 17, 293, 363, 17, 11, 293, 341, 343, 33, 420, 343, 17, 33, 17, 366, 264, 9834, 295, 51386, 51386, 264, 1150, 3565, 3142, 4985, 13, 51506, 51506], "temperature": 0.0, "avg_logprob": -0.0947794629566705, "compression_ratio": 1.4679487179487178, "no_speech_prob": 3.3930878089449834e-06}, {"id": 22, "seek": 12664, "start": 134.24, "end": 136.28, "text": " Now let's look at the second neuron.", "tokens": [50364, 663, 311, 257, 1958, 13, 18, 2931, 295, 341, 885, 5405, 12028, 2361, 322, 264, 4846, 4122, 13, 50744, 50744, 823, 718, 311, 574, 412, 264, 1150, 34090, 13, 50846, 50846, 440, 1150, 34090, 575, 9834, 343, 17, 293, 363, 17, 11, 293, 341, 343, 33, 420, 343, 17, 33, 17, 366, 264, 9834, 295, 51386, 51386, 264, 1150, 3565, 3142, 4985, 13, 51506, 51506], "temperature": 0.0, "avg_logprob": -0.0947794629566705, "compression_ratio": 1.4679487179487178, "no_speech_prob": 3.3930878089449834e-06}, {"id": 23, "seek": 12664, "start": 136.28, "end": 147.08, "text": " The second neuron has parameters W2 and B2, and this WB or W2B2 are the parameters of", "tokens": [50364, 663, 311, 257, 1958, 13, 18, 2931, 295, 341, 885, 5405, 12028, 2361, 322, 264, 4846, 4122, 13, 50744, 50744, 823, 718, 311, 574, 412, 264, 1150, 34090, 13, 50846, 50846, 440, 1150, 34090, 575, 9834, 343, 17, 293, 363, 17, 11, 293, 341, 343, 33, 420, 343, 17, 33, 17, 366, 264, 9834, 295, 51386, 51386, 264, 1150, 3565, 3142, 4985, 13, 51506, 51506], "temperature": 0.0, "avg_logprob": -0.0947794629566705, "compression_ratio": 1.4679487179487178, "no_speech_prob": 3.3930878089449834e-06}, {"id": 24, "seek": 12664, "start": 147.08, "end": 149.48, "text": " the second logistic unit.", "tokens": [50364, 663, 311, 257, 1958, 13, 18, 2931, 295, 341, 885, 5405, 12028, 2361, 322, 264, 4846, 4122, 13, 50744, 50744, 823, 718, 311, 574, 412, 264, 1150, 34090, 13, 50846, 50846, 440, 1150, 34090, 575, 9834, 343, 17, 293, 363, 17, 11, 293, 341, 343, 33, 420, 343, 17, 33, 17, 366, 264, 9834, 295, 51386, 51386, 264, 1150, 3565, 3142, 4985, 13, 51506, 51506], "temperature": 0.0, "avg_logprob": -0.0947794629566705, "compression_ratio": 1.4679487179487178, "no_speech_prob": 3.3930878089449834e-06}, {"id": 25, "seek": 14948, "start": 149.48, "end": 159.95999999999998, "text": " So it computes A2 equals the logistic function G applied to W2 dot product X plus B2, and", "tokens": [50364, 407, 309, 715, 1819, 316, 17, 6915, 264, 3565, 3142, 2445, 460, 6456, 281, 343, 17, 5893, 1674, 1783, 1804, 363, 17, 11, 293, 50888, 50888, 341, 815, 312, 512, 661, 1230, 11, 584, 1958, 13, 22, 11, 570, 294, 341, 1365, 456, 311, 257, 1958, 13, 22, 2931, 300, 51260, 51260, 321, 519, 264, 3995, 23465, 486, 312, 3650, 295, 341, 256, 12, 15313, 13, 51526, 51526, 400, 14138, 11, 264, 2636, 34090, 575, 257, 2636, 992, 295, 9834, 11, 343, 18, 33, 18, 11, 293, 14138, 715, 1819, 51828, 51828], "temperature": 0.0, "avg_logprob": -0.11713878144609167, "compression_ratio": 1.4887892376681615, "no_speech_prob": 1.8162121477871551e-06}, {"id": 26, "seek": 14948, "start": 159.95999999999998, "end": 167.39999999999998, "text": " this may be some other number, say 0.7, because in this example there's a 0.7 chance that", "tokens": [50364, 407, 309, 715, 1819, 316, 17, 6915, 264, 3565, 3142, 2445, 460, 6456, 281, 343, 17, 5893, 1674, 1783, 1804, 363, 17, 11, 293, 50888, 50888, 341, 815, 312, 512, 661, 1230, 11, 584, 1958, 13, 22, 11, 570, 294, 341, 1365, 456, 311, 257, 1958, 13, 22, 2931, 300, 51260, 51260, 321, 519, 264, 3995, 23465, 486, 312, 3650, 295, 341, 256, 12, 15313, 13, 51526, 51526, 400, 14138, 11, 264, 2636, 34090, 575, 257, 2636, 992, 295, 9834, 11, 343, 18, 33, 18, 11, 293, 14138, 715, 1819, 51828, 51828], "temperature": 0.0, "avg_logprob": -0.11713878144609167, "compression_ratio": 1.4887892376681615, "no_speech_prob": 1.8162121477871551e-06}, {"id": 27, "seek": 14948, "start": 167.39999999999998, "end": 172.72, "text": " we think the potential buyers will be aware of this t-shirt.", "tokens": [50364, 407, 309, 715, 1819, 316, 17, 6915, 264, 3565, 3142, 2445, 460, 6456, 281, 343, 17, 5893, 1674, 1783, 1804, 363, 17, 11, 293, 50888, 50888, 341, 815, 312, 512, 661, 1230, 11, 584, 1958, 13, 22, 11, 570, 294, 341, 1365, 456, 311, 257, 1958, 13, 22, 2931, 300, 51260, 51260, 321, 519, 264, 3995, 23465, 486, 312, 3650, 295, 341, 256, 12, 15313, 13, 51526, 51526, 400, 14138, 11, 264, 2636, 34090, 575, 257, 2636, 992, 295, 9834, 11, 343, 18, 33, 18, 11, 293, 14138, 715, 1819, 51828, 51828], "temperature": 0.0, "avg_logprob": -0.11713878144609167, "compression_ratio": 1.4887892376681615, "no_speech_prob": 1.8162121477871551e-06}, {"id": 28, "seek": 14948, "start": 172.72, "end": 178.76, "text": " And similarly, the third neuron has a third set of parameters, W3B3, and similarly computes", "tokens": [50364, 407, 309, 715, 1819, 316, 17, 6915, 264, 3565, 3142, 2445, 460, 6456, 281, 343, 17, 5893, 1674, 1783, 1804, 363, 17, 11, 293, 50888, 50888, 341, 815, 312, 512, 661, 1230, 11, 584, 1958, 13, 22, 11, 570, 294, 341, 1365, 456, 311, 257, 1958, 13, 22, 2931, 300, 51260, 51260, 321, 519, 264, 3995, 23465, 486, 312, 3650, 295, 341, 256, 12, 15313, 13, 51526, 51526, 400, 14138, 11, 264, 2636, 34090, 575, 257, 2636, 992, 295, 9834, 11, 343, 18, 33, 18, 11, 293, 14138, 715, 1819, 51828, 51828], "temperature": 0.0, "avg_logprob": -0.11713878144609167, "compression_ratio": 1.4887892376681615, "no_speech_prob": 1.8162121477871551e-06}, {"id": 29, "seek": 17876, "start": 178.76, "end": 186.67999999999998, "text": " an activation value A3 equals G of W3 dot product X plus B3, and that may be, say, 0.2.", "tokens": [50364, 364, 24433, 2158, 316, 18, 6915, 460, 295, 343, 18, 5893, 1674, 1783, 1804, 363, 18, 11, 293, 300, 815, 312, 11, 584, 11, 1958, 13, 17, 13, 50760, 50760, 407, 294, 341, 1365, 11, 613, 1045, 22027, 5598, 1958, 13, 18, 11, 1958, 13, 22, 11, 293, 1958, 13, 17, 11, 293, 341, 8062, 295, 1045, 51173, 51173, 3547, 3643, 264, 8062, 295, 24433, 4190, 316, 300, 307, 550, 4678, 281, 264, 2572, 5598, 51718, 51718, 4583, 295, 341, 18161, 3209, 13, 51846, 51846], "temperature": 0.0, "avg_logprob": -0.0929647533372901, "compression_ratio": 1.5520833333333333, "no_speech_prob": 1.3496877500074334e-06}, {"id": 30, "seek": 17876, "start": 186.67999999999998, "end": 194.94, "text": " So in this example, these three neurons output 0.3, 0.7, and 0.2, and this vector of three", "tokens": [50364, 364, 24433, 2158, 316, 18, 6915, 460, 295, 343, 18, 5893, 1674, 1783, 1804, 363, 18, 11, 293, 300, 815, 312, 11, 584, 11, 1958, 13, 17, 13, 50760, 50760, 407, 294, 341, 1365, 11, 613, 1045, 22027, 5598, 1958, 13, 18, 11, 1958, 13, 22, 11, 293, 1958, 13, 17, 11, 293, 341, 8062, 295, 1045, 51173, 51173, 3547, 3643, 264, 8062, 295, 24433, 4190, 316, 300, 307, 550, 4678, 281, 264, 2572, 5598, 51718, 51718, 4583, 295, 341, 18161, 3209, 13, 51846, 51846], "temperature": 0.0, "avg_logprob": -0.0929647533372901, "compression_ratio": 1.5520833333333333, "no_speech_prob": 1.3496877500074334e-06}, {"id": 31, "seek": 17876, "start": 194.94, "end": 205.84, "text": " numbers becomes the vector of activation values A that is then passed to the final output", "tokens": [50364, 364, 24433, 2158, 316, 18, 6915, 460, 295, 343, 18, 5893, 1674, 1783, 1804, 363, 18, 11, 293, 300, 815, 312, 11, 584, 11, 1958, 13, 17, 13, 50760, 50760, 407, 294, 341, 1365, 11, 613, 1045, 22027, 5598, 1958, 13, 18, 11, 1958, 13, 22, 11, 293, 1958, 13, 17, 11, 293, 341, 8062, 295, 1045, 51173, 51173, 3547, 3643, 264, 8062, 295, 24433, 4190, 316, 300, 307, 550, 4678, 281, 264, 2572, 5598, 51718, 51718, 4583, 295, 341, 18161, 3209, 13, 51846, 51846], "temperature": 0.0, "avg_logprob": -0.0929647533372901, "compression_ratio": 1.5520833333333333, "no_speech_prob": 1.3496877500074334e-06}, {"id": 32, "seek": 17876, "start": 205.84, "end": 208.39999999999998, "text": " layer of this neural network.", "tokens": [50364, 364, 24433, 2158, 316, 18, 6915, 460, 295, 343, 18, 5893, 1674, 1783, 1804, 363, 18, 11, 293, 300, 815, 312, 11, 584, 11, 1958, 13, 17, 13, 50760, 50760, 407, 294, 341, 1365, 11, 613, 1045, 22027, 5598, 1958, 13, 18, 11, 1958, 13, 22, 11, 293, 1958, 13, 17, 11, 293, 341, 8062, 295, 1045, 51173, 51173, 3547, 3643, 264, 8062, 295, 24433, 4190, 316, 300, 307, 550, 4678, 281, 264, 2572, 5598, 51718, 51718, 4583, 295, 341, 18161, 3209, 13, 51846, 51846], "temperature": 0.0, "avg_logprob": -0.0929647533372901, "compression_ratio": 1.5520833333333333, "no_speech_prob": 1.3496877500074334e-06}, {"id": 33, "seek": 20840, "start": 208.4, "end": 214.12, "text": " Now when you build neural networks with multiple layers, it will be useful to give the layers", "tokens": [50364, 823, 562, 291, 1322, 18161, 9590, 365, 3866, 7914, 11, 309, 486, 312, 4420, 281, 976, 264, 7914, 50650, 50650, 819, 3547, 13, 50736, 50736, 407, 538, 10286, 11, 341, 4583, 307, 1219, 4583, 472, 295, 264, 18161, 3209, 11, 293, 341, 4583, 51124, 51124, 307, 1219, 4583, 732, 295, 264, 18161, 3209, 11, 293, 264, 4846, 4583, 307, 611, 2171, 1219, 51456, 51456, 4583, 4018, 11, 293, 965, 456, 366, 18161, 9590, 300, 393, 362, 18431, 420, 754, 6779, 295, 7914, 13, 51830, 51830], "temperature": 0.0, "avg_logprob": -0.12287153046706627, "compression_ratio": 1.9591836734693877, "no_speech_prob": 4.157271177973598e-06}, {"id": 34, "seek": 20840, "start": 214.12, "end": 215.84, "text": " different numbers.", "tokens": [50364, 823, 562, 291, 1322, 18161, 9590, 365, 3866, 7914, 11, 309, 486, 312, 4420, 281, 976, 264, 7914, 50650, 50650, 819, 3547, 13, 50736, 50736, 407, 538, 10286, 11, 341, 4583, 307, 1219, 4583, 472, 295, 264, 18161, 3209, 11, 293, 341, 4583, 51124, 51124, 307, 1219, 4583, 732, 295, 264, 18161, 3209, 11, 293, 264, 4846, 4583, 307, 611, 2171, 1219, 51456, 51456, 4583, 4018, 11, 293, 965, 456, 366, 18161, 9590, 300, 393, 362, 18431, 420, 754, 6779, 295, 7914, 13, 51830, 51830], "temperature": 0.0, "avg_logprob": -0.12287153046706627, "compression_ratio": 1.9591836734693877, "no_speech_prob": 4.157271177973598e-06}, {"id": 35, "seek": 20840, "start": 215.84, "end": 223.6, "text": " So by convention, this layer is called layer one of the neural network, and this layer", "tokens": [50364, 823, 562, 291, 1322, 18161, 9590, 365, 3866, 7914, 11, 309, 486, 312, 4420, 281, 976, 264, 7914, 50650, 50650, 819, 3547, 13, 50736, 50736, 407, 538, 10286, 11, 341, 4583, 307, 1219, 4583, 472, 295, 264, 18161, 3209, 11, 293, 341, 4583, 51124, 51124, 307, 1219, 4583, 732, 295, 264, 18161, 3209, 11, 293, 264, 4846, 4583, 307, 611, 2171, 1219, 51456, 51456, 4583, 4018, 11, 293, 965, 456, 366, 18161, 9590, 300, 393, 362, 18431, 420, 754, 6779, 295, 7914, 13, 51830, 51830], "temperature": 0.0, "avg_logprob": -0.12287153046706627, "compression_ratio": 1.9591836734693877, "no_speech_prob": 4.157271177973598e-06}, {"id": 36, "seek": 20840, "start": 223.6, "end": 230.24, "text": " is called layer two of the neural network, and the input layer is also sometimes called", "tokens": [50364, 823, 562, 291, 1322, 18161, 9590, 365, 3866, 7914, 11, 309, 486, 312, 4420, 281, 976, 264, 7914, 50650, 50650, 819, 3547, 13, 50736, 50736, 407, 538, 10286, 11, 341, 4583, 307, 1219, 4583, 472, 295, 264, 18161, 3209, 11, 293, 341, 4583, 51124, 51124, 307, 1219, 4583, 732, 295, 264, 18161, 3209, 11, 293, 264, 4846, 4583, 307, 611, 2171, 1219, 51456, 51456, 4583, 4018, 11, 293, 965, 456, 366, 18161, 9590, 300, 393, 362, 18431, 420, 754, 6779, 295, 7914, 13, 51830, 51830], "temperature": 0.0, "avg_logprob": -0.12287153046706627, "compression_ratio": 1.9591836734693877, "no_speech_prob": 4.157271177973598e-06}, {"id": 37, "seek": 20840, "start": 230.24, "end": 237.72, "text": " layer zero, and today there are neural networks that can have dozens or even hundreds of layers.", "tokens": [50364, 823, 562, 291, 1322, 18161, 9590, 365, 3866, 7914, 11, 309, 486, 312, 4420, 281, 976, 264, 7914, 50650, 50650, 819, 3547, 13, 50736, 50736, 407, 538, 10286, 11, 341, 4583, 307, 1219, 4583, 472, 295, 264, 18161, 3209, 11, 293, 341, 4583, 51124, 51124, 307, 1219, 4583, 732, 295, 264, 18161, 3209, 11, 293, 264, 4846, 4583, 307, 611, 2171, 1219, 51456, 51456, 4583, 4018, 11, 293, 965, 456, 366, 18161, 9590, 300, 393, 362, 18431, 420, 754, 6779, 295, 7914, 13, 51830, 51830], "temperature": 0.0, "avg_logprob": -0.12287153046706627, "compression_ratio": 1.9591836734693877, "no_speech_prob": 4.157271177973598e-06}, {"id": 38, "seek": 23772, "start": 237.72, "end": 243.76, "text": " But in order to introduce notation to help us distinguish between the different layers,", "tokens": [50364, 583, 294, 1668, 281, 5366, 24657, 281, 854, 505, 20206, 1296, 264, 819, 7914, 11, 50666, 50666, 286, 478, 516, 281, 764, 37906, 5944, 3732, 16904, 472, 281, 8186, 666, 819, 7914, 13, 51088, 51088, 407, 294, 1729, 11, 316, 37906, 5944, 294, 3732, 26179, 472, 11, 286, 478, 516, 281, 764, 382, 257, 24657, 51411, 51411, 281, 45708, 264, 5598, 295, 4583, 472, 295, 341, 7633, 4583, 295, 341, 18161, 3209, 11, 293, 14138, 11, 51792, 51792], "temperature": 0.0, "avg_logprob": -0.13754783868789672, "compression_ratio": 1.7575757575757576, "no_speech_prob": 8.939471626945306e-06}, {"id": 39, "seek": 23772, "start": 243.76, "end": 252.2, "text": " I'm going to use superscript square bracket one to index into different layers.", "tokens": [50364, 583, 294, 1668, 281, 5366, 24657, 281, 854, 505, 20206, 1296, 264, 819, 7914, 11, 50666, 50666, 286, 478, 516, 281, 764, 37906, 5944, 3732, 16904, 472, 281, 8186, 666, 819, 7914, 13, 51088, 51088, 407, 294, 1729, 11, 316, 37906, 5944, 294, 3732, 26179, 472, 11, 286, 478, 516, 281, 764, 382, 257, 24657, 51411, 51411, 281, 45708, 264, 5598, 295, 4583, 472, 295, 341, 7633, 4583, 295, 341, 18161, 3209, 11, 293, 14138, 11, 51792, 51792], "temperature": 0.0, "avg_logprob": -0.13754783868789672, "compression_ratio": 1.7575757575757576, "no_speech_prob": 8.939471626945306e-06}, {"id": 40, "seek": 23772, "start": 252.2, "end": 258.66, "text": " So in particular, A superscript in square brackets one, I'm going to use as a notation", "tokens": [50364, 583, 294, 1668, 281, 5366, 24657, 281, 854, 505, 20206, 1296, 264, 819, 7914, 11, 50666, 50666, 286, 478, 516, 281, 764, 37906, 5944, 3732, 16904, 472, 281, 8186, 666, 819, 7914, 13, 51088, 51088, 407, 294, 1729, 11, 316, 37906, 5944, 294, 3732, 26179, 472, 11, 286, 478, 516, 281, 764, 382, 257, 24657, 51411, 51411, 281, 45708, 264, 5598, 295, 4583, 472, 295, 341, 7633, 4583, 295, 341, 18161, 3209, 11, 293, 14138, 11, 51792, 51792], "temperature": 0.0, "avg_logprob": -0.13754783868789672, "compression_ratio": 1.7575757575757576, "no_speech_prob": 8.939471626945306e-06}, {"id": 41, "seek": 23772, "start": 258.66, "end": 266.28, "text": " to denote the output of layer one of this hidden layer of this neural network, and similarly,", "tokens": [50364, 583, 294, 1668, 281, 5366, 24657, 281, 854, 505, 20206, 1296, 264, 819, 7914, 11, 50666, 50666, 286, 478, 516, 281, 764, 37906, 5944, 3732, 16904, 472, 281, 8186, 666, 819, 7914, 13, 51088, 51088, 407, 294, 1729, 11, 316, 37906, 5944, 294, 3732, 26179, 472, 11, 286, 478, 516, 281, 764, 382, 257, 24657, 51411, 51411, 281, 45708, 264, 5598, 295, 4583, 472, 295, 341, 7633, 4583, 295, 341, 18161, 3209, 11, 293, 14138, 11, 51792, 51792], "temperature": 0.0, "avg_logprob": -0.13754783868789672, "compression_ratio": 1.7575757575757576, "no_speech_prob": 8.939471626945306e-06}, {"id": 42, "seek": 26628, "start": 266.28, "end": 273.35999999999996, "text": " W1B1 here are the parameters of the first unit in layer one of the neural network, so", "tokens": [50364, 343, 16, 33, 16, 510, 366, 264, 9834, 295, 264, 700, 4985, 294, 4583, 472, 295, 264, 18161, 3209, 11, 370, 50718, 50718, 286, 478, 611, 516, 281, 909, 257, 37906, 5944, 294, 3732, 26179, 472, 510, 11, 293, 343, 17, 33, 17, 366, 264, 9834, 51128, 51128, 295, 264, 1150, 7633, 4985, 420, 264, 1150, 7633, 34090, 294, 4583, 472, 11, 293, 370, 729, 9834, 51488, 51488, 366, 611, 1441, 23325, 510, 11, 343, 37906, 5944, 3732, 16904, 472, 11, 411, 370, 13, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.13182336633855646, "compression_ratio": 1.8876404494382022, "no_speech_prob": 1.6700618289178237e-05}, {"id": 43, "seek": 26628, "start": 273.35999999999996, "end": 281.55999999999995, "text": " I'm also going to add a superscript in square brackets one here, and W2B2 are the parameters", "tokens": [50364, 343, 16, 33, 16, 510, 366, 264, 9834, 295, 264, 700, 4985, 294, 4583, 472, 295, 264, 18161, 3209, 11, 370, 50718, 50718, 286, 478, 611, 516, 281, 909, 257, 37906, 5944, 294, 3732, 26179, 472, 510, 11, 293, 343, 17, 33, 17, 366, 264, 9834, 51128, 51128, 295, 264, 1150, 7633, 4985, 420, 264, 1150, 7633, 34090, 294, 4583, 472, 11, 293, 370, 729, 9834, 51488, 51488, 366, 611, 1441, 23325, 510, 11, 343, 37906, 5944, 3732, 16904, 472, 11, 411, 370, 13, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.13182336633855646, "compression_ratio": 1.8876404494382022, "no_speech_prob": 1.6700618289178237e-05}, {"id": 44, "seek": 26628, "start": 281.55999999999995, "end": 288.76, "text": " of the second hidden unit or the second hidden neuron in layer one, and so those parameters", "tokens": [50364, 343, 16, 33, 16, 510, 366, 264, 9834, 295, 264, 700, 4985, 294, 4583, 472, 295, 264, 18161, 3209, 11, 370, 50718, 50718, 286, 478, 611, 516, 281, 909, 257, 37906, 5944, 294, 3732, 26179, 472, 510, 11, 293, 343, 17, 33, 17, 366, 264, 9834, 51128, 51128, 295, 264, 1150, 7633, 4985, 420, 264, 1150, 7633, 34090, 294, 4583, 472, 11, 293, 370, 729, 9834, 51488, 51488, 366, 611, 1441, 23325, 510, 11, 343, 37906, 5944, 3732, 16904, 472, 11, 411, 370, 13, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.13182336633855646, "compression_ratio": 1.8876404494382022, "no_speech_prob": 1.6700618289178237e-05}, {"id": 45, "seek": 26628, "start": 288.76, "end": 294.96, "text": " are also denoted here, W superscript square bracket one, like so.", "tokens": [50364, 343, 16, 33, 16, 510, 366, 264, 9834, 295, 264, 700, 4985, 294, 4583, 472, 295, 264, 18161, 3209, 11, 370, 50718, 50718, 286, 478, 611, 516, 281, 909, 257, 37906, 5944, 294, 3732, 26179, 472, 510, 11, 293, 343, 17, 33, 17, 366, 264, 9834, 51128, 51128, 295, 264, 1150, 7633, 4985, 420, 264, 1150, 7633, 34090, 294, 4583, 472, 11, 293, 370, 729, 9834, 51488, 51488, 366, 611, 1441, 23325, 510, 11, 343, 37906, 5944, 3732, 16904, 472, 11, 411, 370, 13, 51798, 51798], "temperature": 0.0, "avg_logprob": -0.13182336633855646, "compression_ratio": 1.8876404494382022, "no_speech_prob": 1.6700618289178237e-05}, {"id": 46, "seek": 29496, "start": 294.96, "end": 300.68, "text": " And similarly, I can add superscript square brackets like so to denote that these are", "tokens": [50364, 400, 14138, 11, 286, 393, 909, 37906, 5944, 3732, 26179, 411, 370, 281, 45708, 300, 613, 366, 50650, 50650, 264, 24433, 4190, 295, 264, 7633, 6815, 295, 4583, 472, 295, 341, 18161, 3209, 13, 51056, 51056, 286, 458, 1310, 341, 24657, 307, 1242, 257, 707, 857, 40614, 292, 11, 457, 264, 551, 281, 1604, 307, 51378, 51378, 5699, 291, 536, 341, 37906, 5944, 3732, 16904, 472, 11, 300, 445, 14942, 281, 257, 11275, 300, 307, 51746, 51746], "temperature": 0.0, "avg_logprob": -0.06139208998861192, "compression_ratio": 1.681159420289855, "no_speech_prob": 4.4253383748582564e-06}, {"id": 47, "seek": 29496, "start": 300.68, "end": 308.79999999999995, "text": " the activation values of the hidden units of layer one of this neural network.", "tokens": [50364, 400, 14138, 11, 286, 393, 909, 37906, 5944, 3732, 26179, 411, 370, 281, 45708, 300, 613, 366, 50650, 50650, 264, 24433, 4190, 295, 264, 7633, 6815, 295, 4583, 472, 295, 341, 18161, 3209, 13, 51056, 51056, 286, 458, 1310, 341, 24657, 307, 1242, 257, 707, 857, 40614, 292, 11, 457, 264, 551, 281, 1604, 307, 51378, 51378, 5699, 291, 536, 341, 37906, 5944, 3732, 16904, 472, 11, 300, 445, 14942, 281, 257, 11275, 300, 307, 51746, 51746], "temperature": 0.0, "avg_logprob": -0.06139208998861192, "compression_ratio": 1.681159420289855, "no_speech_prob": 4.4253383748582564e-06}, {"id": 48, "seek": 29496, "start": 308.79999999999995, "end": 315.24, "text": " I know maybe this notation is getting a little bit cluttered, but the thing to remember is", "tokens": [50364, 400, 14138, 11, 286, 393, 909, 37906, 5944, 3732, 26179, 411, 370, 281, 45708, 300, 613, 366, 50650, 50650, 264, 24433, 4190, 295, 264, 7633, 6815, 295, 4583, 472, 295, 341, 18161, 3209, 13, 51056, 51056, 286, 458, 1310, 341, 24657, 307, 1242, 257, 707, 857, 40614, 292, 11, 457, 264, 551, 281, 1604, 307, 51378, 51378, 5699, 291, 536, 341, 37906, 5944, 3732, 16904, 472, 11, 300, 445, 14942, 281, 257, 11275, 300, 307, 51746, 51746], "temperature": 0.0, "avg_logprob": -0.06139208998861192, "compression_ratio": 1.681159420289855, "no_speech_prob": 4.4253383748582564e-06}, {"id": 49, "seek": 29496, "start": 315.24, "end": 322.59999999999997, "text": " whenever you see this superscript square bracket one, that just refers to a quantity that is", "tokens": [50364, 400, 14138, 11, 286, 393, 909, 37906, 5944, 3732, 26179, 411, 370, 281, 45708, 300, 613, 366, 50650, 50650, 264, 24433, 4190, 295, 264, 7633, 6815, 295, 4583, 472, 295, 341, 18161, 3209, 13, 51056, 51056, 286, 458, 1310, 341, 24657, 307, 1242, 257, 707, 857, 40614, 292, 11, 457, 264, 551, 281, 1604, 307, 51378, 51378, 5699, 291, 536, 341, 37906, 5944, 3732, 16904, 472, 11, 300, 445, 14942, 281, 257, 11275, 300, 307, 51746, 51746], "temperature": 0.0, "avg_logprob": -0.06139208998861192, "compression_ratio": 1.681159420289855, "no_speech_prob": 4.4253383748582564e-06}, {"id": 50, "seek": 32260, "start": 322.6, "end": 329.16, "text": " associated with layer one of the neural network, and if you see superscript square bracket", "tokens": [50364, 6615, 365, 4583, 472, 295, 264, 18161, 3209, 11, 293, 498, 291, 536, 37906, 5944, 3732, 16904, 50692, 50692, 732, 11, 300, 14942, 281, 257, 11275, 6615, 365, 4583, 732, 295, 264, 18161, 3209, 11, 293, 51018, 51018, 14138, 337, 661, 7914, 382, 731, 11, 3009, 4583, 1045, 11, 4583, 1451, 11, 293, 370, 322, 337, 18161, 51272, 51272, 9590, 365, 544, 7914, 13, 51376, 51376, 407, 300, 311, 264, 24903, 295, 4583, 472, 295, 341, 18161, 3209, 13, 51628, 51628], "temperature": 0.0, "avg_logprob": -0.11359430795692536, "compression_ratio": 1.913978494623656, "no_speech_prob": 7.453703005921852e-07}, {"id": 51, "seek": 32260, "start": 329.16, "end": 335.68, "text": " two, that refers to a quantity associated with layer two of the neural network, and", "tokens": [50364, 6615, 365, 4583, 472, 295, 264, 18161, 3209, 11, 293, 498, 291, 536, 37906, 5944, 3732, 16904, 50692, 50692, 732, 11, 300, 14942, 281, 257, 11275, 6615, 365, 4583, 732, 295, 264, 18161, 3209, 11, 293, 51018, 51018, 14138, 337, 661, 7914, 382, 731, 11, 3009, 4583, 1045, 11, 4583, 1451, 11, 293, 370, 322, 337, 18161, 51272, 51272, 9590, 365, 544, 7914, 13, 51376, 51376, 407, 300, 311, 264, 24903, 295, 4583, 472, 295, 341, 18161, 3209, 13, 51628, 51628], "temperature": 0.0, "avg_logprob": -0.11359430795692536, "compression_ratio": 1.913978494623656, "no_speech_prob": 7.453703005921852e-07}, {"id": 52, "seek": 32260, "start": 335.68, "end": 340.76000000000005, "text": " similarly for other layers as well, including layer three, layer four, and so on for neural", "tokens": [50364, 6615, 365, 4583, 472, 295, 264, 18161, 3209, 11, 293, 498, 291, 536, 37906, 5944, 3732, 16904, 50692, 50692, 732, 11, 300, 14942, 281, 257, 11275, 6615, 365, 4583, 732, 295, 264, 18161, 3209, 11, 293, 51018, 51018, 14138, 337, 661, 7914, 382, 731, 11, 3009, 4583, 1045, 11, 4583, 1451, 11, 293, 370, 322, 337, 18161, 51272, 51272, 9590, 365, 544, 7914, 13, 51376, 51376, 407, 300, 311, 264, 24903, 295, 4583, 472, 295, 341, 18161, 3209, 13, 51628, 51628], "temperature": 0.0, "avg_logprob": -0.11359430795692536, "compression_ratio": 1.913978494623656, "no_speech_prob": 7.453703005921852e-07}, {"id": 53, "seek": 32260, "start": 340.76000000000005, "end": 342.84000000000003, "text": " networks with more layers.", "tokens": [50364, 6615, 365, 4583, 472, 295, 264, 18161, 3209, 11, 293, 498, 291, 536, 37906, 5944, 3732, 16904, 50692, 50692, 732, 11, 300, 14942, 281, 257, 11275, 6615, 365, 4583, 732, 295, 264, 18161, 3209, 11, 293, 51018, 51018, 14138, 337, 661, 7914, 382, 731, 11, 3009, 4583, 1045, 11, 4583, 1451, 11, 293, 370, 322, 337, 18161, 51272, 51272, 9590, 365, 544, 7914, 13, 51376, 51376, 407, 300, 311, 264, 24903, 295, 4583, 472, 295, 341, 18161, 3209, 13, 51628, 51628], "temperature": 0.0, "avg_logprob": -0.11359430795692536, "compression_ratio": 1.913978494623656, "no_speech_prob": 7.453703005921852e-07}, {"id": 54, "seek": 32260, "start": 342.84000000000003, "end": 347.88, "text": " So that's the computation of layer one of this neural network.", "tokens": [50364, 6615, 365, 4583, 472, 295, 264, 18161, 3209, 11, 293, 498, 291, 536, 37906, 5944, 3732, 16904, 50692, 50692, 732, 11, 300, 14942, 281, 257, 11275, 6615, 365, 4583, 732, 295, 264, 18161, 3209, 11, 293, 51018, 51018, 14138, 337, 661, 7914, 382, 731, 11, 3009, 4583, 1045, 11, 4583, 1451, 11, 293, 370, 322, 337, 18161, 51272, 51272, 9590, 365, 544, 7914, 13, 51376, 51376, 407, 300, 311, 264, 24903, 295, 4583, 472, 295, 341, 18161, 3209, 13, 51628, 51628], "temperature": 0.0, "avg_logprob": -0.11359430795692536, "compression_ratio": 1.913978494623656, "no_speech_prob": 7.453703005921852e-07}, {"id": 55, "seek": 34788, "start": 347.88, "end": 355.6, "text": " This output is this activation vector, A superscript square bracket one, and I'm going to copy", "tokens": [50364, 639, 5598, 307, 341, 24433, 8062, 11, 316, 37906, 5944, 3732, 16904, 472, 11, 293, 286, 478, 516, 281, 5055, 50750, 50750, 341, 670, 510, 570, 341, 5598, 11, 316, 16, 11, 3643, 264, 4846, 281, 4583, 732, 13, 51172, 51172, 407, 586, 718, 311, 8863, 666, 264, 24903, 295, 4583, 732, 295, 341, 18161, 3209, 11, 597, 307, 51466, 51466, 611, 264, 5598, 4583, 13, 51600, 51600], "temperature": 0.0, "avg_logprob": -0.08202201298304966, "compression_ratio": 1.5222222222222221, "no_speech_prob": 6.540323738590814e-06}, {"id": 56, "seek": 34788, "start": 355.6, "end": 364.04, "text": " this over here because this output, A1, becomes the input to layer two.", "tokens": [50364, 639, 5598, 307, 341, 24433, 8062, 11, 316, 37906, 5944, 3732, 16904, 472, 11, 293, 286, 478, 516, 281, 5055, 50750, 50750, 341, 670, 510, 570, 341, 5598, 11, 316, 16, 11, 3643, 264, 4846, 281, 4583, 732, 13, 51172, 51172, 407, 586, 718, 311, 8863, 666, 264, 24903, 295, 4583, 732, 295, 341, 18161, 3209, 11, 597, 307, 51466, 51466, 611, 264, 5598, 4583, 13, 51600, 51600], "temperature": 0.0, "avg_logprob": -0.08202201298304966, "compression_ratio": 1.5222222222222221, "no_speech_prob": 6.540323738590814e-06}, {"id": 57, "seek": 34788, "start": 364.04, "end": 369.92, "text": " So now let's zoom into the computation of layer two of this neural network, which is", "tokens": [50364, 639, 5598, 307, 341, 24433, 8062, 11, 316, 37906, 5944, 3732, 16904, 472, 11, 293, 286, 478, 516, 281, 5055, 50750, 50750, 341, 670, 510, 570, 341, 5598, 11, 316, 16, 11, 3643, 264, 4846, 281, 4583, 732, 13, 51172, 51172, 407, 586, 718, 311, 8863, 666, 264, 24903, 295, 4583, 732, 295, 341, 18161, 3209, 11, 597, 307, 51466, 51466, 611, 264, 5598, 4583, 13, 51600, 51600], "temperature": 0.0, "avg_logprob": -0.08202201298304966, "compression_ratio": 1.5222222222222221, "no_speech_prob": 6.540323738590814e-06}, {"id": 58, "seek": 34788, "start": 369.92, "end": 372.6, "text": " also the output layer.", "tokens": [50364, 639, 5598, 307, 341, 24433, 8062, 11, 316, 37906, 5944, 3732, 16904, 472, 11, 293, 286, 478, 516, 281, 5055, 50750, 50750, 341, 670, 510, 570, 341, 5598, 11, 316, 16, 11, 3643, 264, 4846, 281, 4583, 732, 13, 51172, 51172, 407, 586, 718, 311, 8863, 666, 264, 24903, 295, 4583, 732, 295, 341, 18161, 3209, 11, 597, 307, 51466, 51466, 611, 264, 5598, 4583, 13, 51600, 51600], "temperature": 0.0, "avg_logprob": -0.08202201298304966, "compression_ratio": 1.5222222222222221, "no_speech_prob": 6.540323738590814e-06}, {"id": 59, "seek": 37260, "start": 372.6, "end": 378.48, "text": " So the input to layer two is the output of layer one.", "tokens": [50364, 407, 264, 4846, 281, 4583, 732, 307, 264, 5598, 295, 4583, 472, 13, 50658, 50658, 407, 316, 16, 307, 341, 8062, 1958, 13, 18, 11, 1958, 13, 22, 11, 1958, 13, 17, 300, 321, 445, 40610, 322, 264, 3894, 644, 295, 264, 51202, 51202, 4137, 11, 293, 370, 570, 264, 5598, 4583, 575, 445, 257, 2167, 34090, 11, 439, 309, 775, 307, 309, 715, 1819, 51630, 51630], "temperature": 0.0, "avg_logprob": -0.09229223278985507, "compression_ratio": 1.513157894736842, "no_speech_prob": 5.422151389211649e-06}, {"id": 60, "seek": 37260, "start": 378.48, "end": 389.36, "text": " So A1 is this vector 0.3, 0.7, 0.2 that we just computed on the previous part of the", "tokens": [50364, 407, 264, 4846, 281, 4583, 732, 307, 264, 5598, 295, 4583, 472, 13, 50658, 50658, 407, 316, 16, 307, 341, 8062, 1958, 13, 18, 11, 1958, 13, 22, 11, 1958, 13, 17, 300, 321, 445, 40610, 322, 264, 3894, 644, 295, 264, 51202, 51202, 4137, 11, 293, 370, 570, 264, 5598, 4583, 575, 445, 257, 2167, 34090, 11, 439, 309, 775, 307, 309, 715, 1819, 51630, 51630], "temperature": 0.0, "avg_logprob": -0.09229223278985507, "compression_ratio": 1.513157894736842, "no_speech_prob": 5.422151389211649e-06}, {"id": 61, "seek": 37260, "start": 389.36, "end": 397.92, "text": " slide, and so because the output layer has just a single neuron, all it does is it computes", "tokens": [50364, 407, 264, 4846, 281, 4583, 732, 307, 264, 5598, 295, 4583, 472, 13, 50658, 50658, 407, 316, 16, 307, 341, 8062, 1958, 13, 18, 11, 1958, 13, 22, 11, 1958, 13, 17, 300, 321, 445, 40610, 322, 264, 3894, 644, 295, 264, 51202, 51202, 4137, 11, 293, 370, 570, 264, 5598, 4583, 575, 445, 257, 2167, 34090, 11, 439, 309, 775, 307, 309, 715, 1819, 51630, 51630], "temperature": 0.0, "avg_logprob": -0.09229223278985507, "compression_ratio": 1.513157894736842, "no_speech_prob": 5.422151389211649e-06}, {"id": 62, "seek": 39792, "start": 397.92, "end": 405.6, "text": " a subscript one that is the output of its first and only neuron as G, the sigmoid function,", "tokens": [50364, 257, 2325, 662, 472, 300, 307, 264, 5598, 295, 1080, 700, 293, 787, 34090, 382, 460, 11, 264, 4556, 3280, 327, 2445, 11, 50748, 50748, 6456, 281, 343, 2325, 662, 472, 294, 257, 1674, 365, 316, 37906, 5944, 3732, 16904, 472, 11, 370, 341, 51088, 51088, 307, 264, 4846, 666, 341, 4583, 11, 293, 550, 1804, 363, 16, 13, 51386, 51386, 1692, 341, 307, 264, 11275, 1176, 300, 291, 434, 4963, 365, 11, 293, 460, 382, 949, 307, 264, 4556, 3280, 327, 2445, 51738, 51738], "temperature": 0.0, "avg_logprob": -0.14097061376462036, "compression_ratio": 1.6546391752577319, "no_speech_prob": 8.990860465019068e-07}, {"id": 63, "seek": 39792, "start": 405.6, "end": 412.40000000000003, "text": " applied to W subscript one in a product with A superscript square bracket one, so this", "tokens": [50364, 257, 2325, 662, 472, 300, 307, 264, 5598, 295, 1080, 700, 293, 787, 34090, 382, 460, 11, 264, 4556, 3280, 327, 2445, 11, 50748, 50748, 6456, 281, 343, 2325, 662, 472, 294, 257, 1674, 365, 316, 37906, 5944, 3732, 16904, 472, 11, 370, 341, 51088, 51088, 307, 264, 4846, 666, 341, 4583, 11, 293, 550, 1804, 363, 16, 13, 51386, 51386, 1692, 341, 307, 264, 11275, 1176, 300, 291, 434, 4963, 365, 11, 293, 460, 382, 949, 307, 264, 4556, 3280, 327, 2445, 51738, 51738], "temperature": 0.0, "avg_logprob": -0.14097061376462036, "compression_ratio": 1.6546391752577319, "no_speech_prob": 8.990860465019068e-07}, {"id": 64, "seek": 39792, "start": 412.40000000000003, "end": 418.36, "text": " is the input into this layer, and then plus B1.", "tokens": [50364, 257, 2325, 662, 472, 300, 307, 264, 5598, 295, 1080, 700, 293, 787, 34090, 382, 460, 11, 264, 4556, 3280, 327, 2445, 11, 50748, 50748, 6456, 281, 343, 2325, 662, 472, 294, 257, 1674, 365, 316, 37906, 5944, 3732, 16904, 472, 11, 370, 341, 51088, 51088, 307, 264, 4846, 666, 341, 4583, 11, 293, 550, 1804, 363, 16, 13, 51386, 51386, 1692, 341, 307, 264, 11275, 1176, 300, 291, 434, 4963, 365, 11, 293, 460, 382, 949, 307, 264, 4556, 3280, 327, 2445, 51738, 51738], "temperature": 0.0, "avg_logprob": -0.14097061376462036, "compression_ratio": 1.6546391752577319, "no_speech_prob": 8.990860465019068e-07}, {"id": 65, "seek": 39792, "start": 418.36, "end": 425.40000000000003, "text": " Here this is the quantity Z that you're familiar with, and G as before is the sigmoid function", "tokens": [50364, 257, 2325, 662, 472, 300, 307, 264, 5598, 295, 1080, 700, 293, 787, 34090, 382, 460, 11, 264, 4556, 3280, 327, 2445, 11, 50748, 50748, 6456, 281, 343, 2325, 662, 472, 294, 257, 1674, 365, 316, 37906, 5944, 3732, 16904, 472, 11, 370, 341, 51088, 51088, 307, 264, 4846, 666, 341, 4583, 11, 293, 550, 1804, 363, 16, 13, 51386, 51386, 1692, 341, 307, 264, 11275, 1176, 300, 291, 434, 4963, 365, 11, 293, 460, 382, 949, 307, 264, 4556, 3280, 327, 2445, 51738, 51738], "temperature": 0.0, "avg_logprob": -0.14097061376462036, "compression_ratio": 1.6546391752577319, "no_speech_prob": 8.990860465019068e-07}, {"id": 66, "seek": 42540, "start": 425.4, "end": 433.44, "text": " that you apply to this, and if this results in a number, say 0.84, then that becomes the", "tokens": [50364, 300, 291, 3079, 281, 341, 11, 293, 498, 341, 3542, 294, 257, 1230, 11, 584, 1958, 13, 25494, 11, 550, 300, 3643, 264, 50766, 50766, 5598, 295, 341, 5598, 4583, 295, 264, 18161, 3209, 11, 293, 294, 341, 1365, 11, 570, 264, 51108, 51108, 5598, 4583, 575, 445, 257, 2167, 34090, 11, 341, 5598, 307, 445, 257, 39684, 11, 309, 311, 257, 2167, 1230, 51386, 51386, 2831, 813, 257, 8062, 295, 3547, 13, 51526, 51526, 745, 10401, 365, 527, 406, 1478, 10286, 490, 949, 11, 321, 434, 516, 281, 764, 316, 37906, 5944, 294, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.10112576581993882, "compression_ratio": 1.6916299559471366, "no_speech_prob": 2.4060834675765363e-06}, {"id": 67, "seek": 42540, "start": 433.44, "end": 440.28, "text": " output of this output layer of the neural network, and in this example, because the", "tokens": [50364, 300, 291, 3079, 281, 341, 11, 293, 498, 341, 3542, 294, 257, 1230, 11, 584, 1958, 13, 25494, 11, 550, 300, 3643, 264, 50766, 50766, 5598, 295, 341, 5598, 4583, 295, 264, 18161, 3209, 11, 293, 294, 341, 1365, 11, 570, 264, 51108, 51108, 5598, 4583, 575, 445, 257, 2167, 34090, 11, 341, 5598, 307, 445, 257, 39684, 11, 309, 311, 257, 2167, 1230, 51386, 51386, 2831, 813, 257, 8062, 295, 3547, 13, 51526, 51526, 745, 10401, 365, 527, 406, 1478, 10286, 490, 949, 11, 321, 434, 516, 281, 764, 316, 37906, 5944, 294, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.10112576581993882, "compression_ratio": 1.6916299559471366, "no_speech_prob": 2.4060834675765363e-06}, {"id": 68, "seek": 42540, "start": 440.28, "end": 445.84, "text": " output layer has just a single neuron, this output is just a scalar, it's a single number", "tokens": [50364, 300, 291, 3079, 281, 341, 11, 293, 498, 341, 3542, 294, 257, 1230, 11, 584, 1958, 13, 25494, 11, 550, 300, 3643, 264, 50766, 50766, 5598, 295, 341, 5598, 4583, 295, 264, 18161, 3209, 11, 293, 294, 341, 1365, 11, 570, 264, 51108, 51108, 5598, 4583, 575, 445, 257, 2167, 34090, 11, 341, 5598, 307, 445, 257, 39684, 11, 309, 311, 257, 2167, 1230, 51386, 51386, 2831, 813, 257, 8062, 295, 3547, 13, 51526, 51526, 745, 10401, 365, 527, 406, 1478, 10286, 490, 949, 11, 321, 434, 516, 281, 764, 316, 37906, 5944, 294, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.10112576581993882, "compression_ratio": 1.6916299559471366, "no_speech_prob": 2.4060834675765363e-06}, {"id": 69, "seek": 42540, "start": 445.84, "end": 448.64, "text": " rather than a vector of numbers.", "tokens": [50364, 300, 291, 3079, 281, 341, 11, 293, 498, 341, 3542, 294, 257, 1230, 11, 584, 1958, 13, 25494, 11, 550, 300, 3643, 264, 50766, 50766, 5598, 295, 341, 5598, 4583, 295, 264, 18161, 3209, 11, 293, 294, 341, 1365, 11, 570, 264, 51108, 51108, 5598, 4583, 575, 445, 257, 2167, 34090, 11, 341, 5598, 307, 445, 257, 39684, 11, 309, 311, 257, 2167, 1230, 51386, 51386, 2831, 813, 257, 8062, 295, 3547, 13, 51526, 51526, 745, 10401, 365, 527, 406, 1478, 10286, 490, 949, 11, 321, 434, 516, 281, 764, 316, 37906, 5944, 294, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.10112576581993882, "compression_ratio": 1.6916299559471366, "no_speech_prob": 2.4060834675765363e-06}, {"id": 70, "seek": 42540, "start": 448.64, "end": 454.12, "text": " Sticking with our notational convention from before, we're going to use A superscript in", "tokens": [50364, 300, 291, 3079, 281, 341, 11, 293, 498, 341, 3542, 294, 257, 1230, 11, 584, 1958, 13, 25494, 11, 550, 300, 3643, 264, 50766, 50766, 5598, 295, 341, 5598, 4583, 295, 264, 18161, 3209, 11, 293, 294, 341, 1365, 11, 570, 264, 51108, 51108, 5598, 4583, 575, 445, 257, 2167, 34090, 11, 341, 5598, 307, 445, 257, 39684, 11, 309, 311, 257, 2167, 1230, 51386, 51386, 2831, 813, 257, 8062, 295, 3547, 13, 51526, 51526, 745, 10401, 365, 527, 406, 1478, 10286, 490, 949, 11, 321, 434, 516, 281, 764, 316, 37906, 5944, 294, 51800, 51800], "temperature": 0.0, "avg_logprob": -0.10112576581993882, "compression_ratio": 1.6916299559471366, "no_speech_prob": 2.4060834675765363e-06}, {"id": 71, "seek": 45412, "start": 454.12, "end": 460.72, "text": " square brackets two to denote the quantities associated with layer two of this neural network,", "tokens": [50364, 3732, 26179, 732, 281, 45708, 264, 22927, 6615, 365, 4583, 732, 295, 341, 18161, 3209, 11, 50694, 50694, 370, 316, 37906, 5944, 3732, 16904, 732, 307, 264, 5598, 295, 341, 4583, 11, 293, 370, 286, 478, 516, 281, 51036, 51036, 611, 5055, 341, 510, 382, 264, 2572, 5598, 295, 264, 18161, 3209, 11, 293, 281, 652, 264, 24657, 51442, 51442, 8398, 11, 291, 393, 611, 909, 613, 37906, 5944, 3732, 16904, 683, 329, 281, 45708, 300, 613, 366, 51750, 51750], "temperature": 0.0, "avg_logprob": -0.08917857960956853, "compression_ratio": 1.8894736842105264, "no_speech_prob": 6.540333743032534e-06}, {"id": 72, "seek": 45412, "start": 460.72, "end": 467.56, "text": " so A superscript square bracket two is the output of this layer, and so I'm going to", "tokens": [50364, 3732, 26179, 732, 281, 45708, 264, 22927, 6615, 365, 4583, 732, 295, 341, 18161, 3209, 11, 50694, 50694, 370, 316, 37906, 5944, 3732, 16904, 732, 307, 264, 5598, 295, 341, 4583, 11, 293, 370, 286, 478, 516, 281, 51036, 51036, 611, 5055, 341, 510, 382, 264, 2572, 5598, 295, 264, 18161, 3209, 11, 293, 281, 652, 264, 24657, 51442, 51442, 8398, 11, 291, 393, 611, 909, 613, 37906, 5944, 3732, 16904, 683, 329, 281, 45708, 300, 613, 366, 51750, 51750], "temperature": 0.0, "avg_logprob": -0.08917857960956853, "compression_ratio": 1.8894736842105264, "no_speech_prob": 6.540333743032534e-06}, {"id": 73, "seek": 45412, "start": 467.56, "end": 475.68, "text": " also copy this here as the final output of the neural network, and to make the notation", "tokens": [50364, 3732, 26179, 732, 281, 45708, 264, 22927, 6615, 365, 4583, 732, 295, 341, 18161, 3209, 11, 50694, 50694, 370, 316, 37906, 5944, 3732, 16904, 732, 307, 264, 5598, 295, 341, 4583, 11, 293, 370, 286, 478, 516, 281, 51036, 51036, 611, 5055, 341, 510, 382, 264, 2572, 5598, 295, 264, 18161, 3209, 11, 293, 281, 652, 264, 24657, 51442, 51442, 8398, 11, 291, 393, 611, 909, 613, 37906, 5944, 3732, 16904, 683, 329, 281, 45708, 300, 613, 366, 51750, 51750], "temperature": 0.0, "avg_logprob": -0.08917857960956853, "compression_ratio": 1.8894736842105264, "no_speech_prob": 6.540333743032534e-06}, {"id": 74, "seek": 45412, "start": 475.68, "end": 481.84000000000003, "text": " consistent, you can also add these superscript square bracket twos to denote that these are", "tokens": [50364, 3732, 26179, 732, 281, 45708, 264, 22927, 6615, 365, 4583, 732, 295, 341, 18161, 3209, 11, 50694, 50694, 370, 316, 37906, 5944, 3732, 16904, 732, 307, 264, 5598, 295, 341, 4583, 11, 293, 370, 286, 478, 516, 281, 51036, 51036, 611, 5055, 341, 510, 382, 264, 2572, 5598, 295, 264, 18161, 3209, 11, 293, 281, 652, 264, 24657, 51442, 51442, 8398, 11, 291, 393, 611, 909, 613, 37906, 5944, 3732, 16904, 683, 329, 281, 45708, 300, 613, 366, 51750, 51750], "temperature": 0.0, "avg_logprob": -0.08917857960956853, "compression_ratio": 1.8894736842105264, "no_speech_prob": 6.540333743032534e-06}, {"id": 75, "seek": 48184, "start": 481.84, "end": 489.4, "text": " the parameters and activation values associated with layer two of the neural network.", "tokens": [50364, 264, 9834, 293, 24433, 4190, 6615, 365, 4583, 732, 295, 264, 18161, 3209, 13, 50742, 50742, 3443, 264, 18161, 3209, 575, 40610, 316, 17, 11, 456, 311, 472, 2572, 17312, 1823, 300, 291, 393, 2826, 51050, 51050, 281, 4445, 420, 406, 11, 597, 307, 498, 291, 528, 257, 17434, 17630, 11, 472, 420, 4018, 11, 307, 341, 51408, 51408, 257, 1192, 23600, 11, 2086, 420, 572, 11, 307, 291, 393, 747, 264, 1230, 316, 37906, 5944, 3732, 26179, 732, 11, 51716, 51716], "temperature": 0.0, "avg_logprob": -0.11399716422671363, "compression_ratio": 1.579185520361991, "no_speech_prob": 2.3687671273364685e-06}, {"id": 76, "seek": 48184, "start": 489.4, "end": 495.56, "text": " Once the neural network has computed A2, there's one final optional step that you can choose", "tokens": [50364, 264, 9834, 293, 24433, 4190, 6615, 365, 4583, 732, 295, 264, 18161, 3209, 13, 50742, 50742, 3443, 264, 18161, 3209, 575, 40610, 316, 17, 11, 456, 311, 472, 2572, 17312, 1823, 300, 291, 393, 2826, 51050, 51050, 281, 4445, 420, 406, 11, 597, 307, 498, 291, 528, 257, 17434, 17630, 11, 472, 420, 4018, 11, 307, 341, 51408, 51408, 257, 1192, 23600, 11, 2086, 420, 572, 11, 307, 291, 393, 747, 264, 1230, 316, 37906, 5944, 3732, 26179, 732, 11, 51716, 51716], "temperature": 0.0, "avg_logprob": -0.11399716422671363, "compression_ratio": 1.579185520361991, "no_speech_prob": 2.3687671273364685e-06}, {"id": 77, "seek": 48184, "start": 495.56, "end": 502.71999999999997, "text": " to implement or not, which is if you want a binary prediction, one or zero, is this", "tokens": [50364, 264, 9834, 293, 24433, 4190, 6615, 365, 4583, 732, 295, 264, 18161, 3209, 13, 50742, 50742, 3443, 264, 18161, 3209, 575, 40610, 316, 17, 11, 456, 311, 472, 2572, 17312, 1823, 300, 291, 393, 2826, 51050, 51050, 281, 4445, 420, 406, 11, 597, 307, 498, 291, 528, 257, 17434, 17630, 11, 472, 420, 4018, 11, 307, 341, 51408, 51408, 257, 1192, 23600, 11, 2086, 420, 572, 11, 307, 291, 393, 747, 264, 1230, 316, 37906, 5944, 3732, 26179, 732, 11, 51716, 51716], "temperature": 0.0, "avg_logprob": -0.11399716422671363, "compression_ratio": 1.579185520361991, "no_speech_prob": 2.3687671273364685e-06}, {"id": 78, "seek": 48184, "start": 502.71999999999997, "end": 508.88, "text": " a top seller, yes or no, is you can take the number A superscript square brackets two,", "tokens": [50364, 264, 9834, 293, 24433, 4190, 6615, 365, 4583, 732, 295, 264, 18161, 3209, 13, 50742, 50742, 3443, 264, 18161, 3209, 575, 40610, 316, 17, 11, 456, 311, 472, 2572, 17312, 1823, 300, 291, 393, 2826, 51050, 51050, 281, 4445, 420, 406, 11, 597, 307, 498, 291, 528, 257, 17434, 17630, 11, 472, 420, 4018, 11, 307, 341, 51408, 51408, 257, 1192, 23600, 11, 2086, 420, 572, 11, 307, 291, 393, 747, 264, 1230, 316, 37906, 5944, 3732, 26179, 732, 11, 51716, 51716], "temperature": 0.0, "avg_logprob": -0.11399716422671363, "compression_ratio": 1.579185520361991, "no_speech_prob": 2.3687671273364685e-06}, {"id": 79, "seek": 50888, "start": 508.88, "end": 518.04, "text": " subscript one, and this is the number 0.84 that we computed, and threshold is at 0.5,", "tokens": [50364, 2325, 662, 472, 11, 293, 341, 307, 264, 1230, 1958, 13, 25494, 300, 321, 40610, 11, 293, 14678, 307, 412, 1958, 13, 20, 11, 50822, 50822, 370, 498, 309, 311, 5044, 813, 1958, 13, 20, 11, 291, 393, 6069, 288, 2385, 6915, 472, 11, 293, 498, 309, 311, 1570, 813, 1958, 13, 20, 11, 51084, 51084, 550, 6069, 288, 2385, 6915, 4018, 11, 293, 321, 1866, 341, 14678, 278, 382, 731, 562, 321, 3264, 51362, 51362, 466, 3565, 3142, 24590, 294, 264, 700, 1164, 295, 264, 2121, 2144, 13, 51582, 51582, 407, 498, 291, 3172, 11, 341, 550, 2709, 291, 264, 2572, 17630, 288, 2385, 382, 2139, 472, 420, 4018, 498, 51850, 51850], "temperature": 0.0, "avg_logprob": -0.13229379239289657, "compression_ratio": 1.774468085106383, "no_speech_prob": 4.264638482709415e-05}, {"id": 80, "seek": 50888, "start": 518.04, "end": 523.28, "text": " so if it's greater than 0.5, you can predict y hat equals one, and if it's less than 0.5,", "tokens": [50364, 2325, 662, 472, 11, 293, 341, 307, 264, 1230, 1958, 13, 25494, 300, 321, 40610, 11, 293, 14678, 307, 412, 1958, 13, 20, 11, 50822, 50822, 370, 498, 309, 311, 5044, 813, 1958, 13, 20, 11, 291, 393, 6069, 288, 2385, 6915, 472, 11, 293, 498, 309, 311, 1570, 813, 1958, 13, 20, 11, 51084, 51084, 550, 6069, 288, 2385, 6915, 4018, 11, 293, 321, 1866, 341, 14678, 278, 382, 731, 562, 321, 3264, 51362, 51362, 466, 3565, 3142, 24590, 294, 264, 700, 1164, 295, 264, 2121, 2144, 13, 51582, 51582, 407, 498, 291, 3172, 11, 341, 550, 2709, 291, 264, 2572, 17630, 288, 2385, 382, 2139, 472, 420, 4018, 498, 51850, 51850], "temperature": 0.0, "avg_logprob": -0.13229379239289657, "compression_ratio": 1.774468085106383, "no_speech_prob": 4.264638482709415e-05}, {"id": 81, "seek": 50888, "start": 523.28, "end": 528.84, "text": " then predict y hat equals zero, and we saw this thresholding as well when we learned", "tokens": [50364, 2325, 662, 472, 11, 293, 341, 307, 264, 1230, 1958, 13, 25494, 300, 321, 40610, 11, 293, 14678, 307, 412, 1958, 13, 20, 11, 50822, 50822, 370, 498, 309, 311, 5044, 813, 1958, 13, 20, 11, 291, 393, 6069, 288, 2385, 6915, 472, 11, 293, 498, 309, 311, 1570, 813, 1958, 13, 20, 11, 51084, 51084, 550, 6069, 288, 2385, 6915, 4018, 11, 293, 321, 1866, 341, 14678, 278, 382, 731, 562, 321, 3264, 51362, 51362, 466, 3565, 3142, 24590, 294, 264, 700, 1164, 295, 264, 2121, 2144, 13, 51582, 51582, 407, 498, 291, 3172, 11, 341, 550, 2709, 291, 264, 2572, 17630, 288, 2385, 382, 2139, 472, 420, 4018, 498, 51850, 51850], "temperature": 0.0, "avg_logprob": -0.13229379239289657, "compression_ratio": 1.774468085106383, "no_speech_prob": 4.264638482709415e-05}, {"id": 82, "seek": 50888, "start": 528.84, "end": 533.24, "text": " about logistic regression in the first course of the specialization.", "tokens": [50364, 2325, 662, 472, 11, 293, 341, 307, 264, 1230, 1958, 13, 25494, 300, 321, 40610, 11, 293, 14678, 307, 412, 1958, 13, 20, 11, 50822, 50822, 370, 498, 309, 311, 5044, 813, 1958, 13, 20, 11, 291, 393, 6069, 288, 2385, 6915, 472, 11, 293, 498, 309, 311, 1570, 813, 1958, 13, 20, 11, 51084, 51084, 550, 6069, 288, 2385, 6915, 4018, 11, 293, 321, 1866, 341, 14678, 278, 382, 731, 562, 321, 3264, 51362, 51362, 466, 3565, 3142, 24590, 294, 264, 700, 1164, 295, 264, 2121, 2144, 13, 51582, 51582, 407, 498, 291, 3172, 11, 341, 550, 2709, 291, 264, 2572, 17630, 288, 2385, 382, 2139, 472, 420, 4018, 498, 51850, 51850], "temperature": 0.0, "avg_logprob": -0.13229379239289657, "compression_ratio": 1.774468085106383, "no_speech_prob": 4.264638482709415e-05}, {"id": 83, "seek": 50888, "start": 533.24, "end": 538.6, "text": " So if you wish, this then gives you the final prediction y hat as either one or zero if", "tokens": [50364, 2325, 662, 472, 11, 293, 341, 307, 264, 1230, 1958, 13, 25494, 300, 321, 40610, 11, 293, 14678, 307, 412, 1958, 13, 20, 11, 50822, 50822, 370, 498, 309, 311, 5044, 813, 1958, 13, 20, 11, 291, 393, 6069, 288, 2385, 6915, 472, 11, 293, 498, 309, 311, 1570, 813, 1958, 13, 20, 11, 51084, 51084, 550, 6069, 288, 2385, 6915, 4018, 11, 293, 321, 1866, 341, 14678, 278, 382, 731, 562, 321, 3264, 51362, 51362, 466, 3565, 3142, 24590, 294, 264, 700, 1164, 295, 264, 2121, 2144, 13, 51582, 51582, 407, 498, 291, 3172, 11, 341, 550, 2709, 291, 264, 2572, 17630, 288, 2385, 382, 2139, 472, 420, 4018, 498, 51850, 51850], "temperature": 0.0, "avg_logprob": -0.13229379239289657, "compression_ratio": 1.774468085106383, "no_speech_prob": 4.264638482709415e-05}, {"id": 84, "seek": 53860, "start": 538.6, "end": 542.4, "text": " you don't want just a probability of it being a top seller.", "tokens": [50364, 291, 500, 380, 528, 445, 257, 8482, 295, 309, 885, 257, 1192, 23600, 13, 50554, 50554, 407, 300, 311, 577, 257, 18161, 3209, 1985, 13, 50674, 50674, 2048, 4583, 15743, 257, 8062, 295, 3547, 293, 13165, 257, 3840, 295, 3565, 3142, 24590, 6815, 50918, 50918, 281, 309, 293, 550, 715, 1819, 1071, 8062, 295, 3547, 300, 550, 2170, 4678, 490, 4583, 281, 51189, 51189, 4583, 1826, 291, 483, 264, 2572, 5598, 4583, 311, 24903, 11, 597, 307, 257, 17630, 295, 264, 51462, 51462, 18161, 3209, 300, 291, 393, 2139, 14678, 412, 1958, 13, 20, 420, 406, 281, 808, 493, 365, 264, 2572, 17630, 11, 51828, 51828], "temperature": 0.0, "avg_logprob": -0.10329779872187862, "compression_ratio": 1.7234848484848484, "no_speech_prob": 1.1189305268999306e-06}, {"id": 85, "seek": 53860, "start": 542.4, "end": 544.8000000000001, "text": " So that's how a neural network works.", "tokens": [50364, 291, 500, 380, 528, 445, 257, 8482, 295, 309, 885, 257, 1192, 23600, 13, 50554, 50554, 407, 300, 311, 577, 257, 18161, 3209, 1985, 13, 50674, 50674, 2048, 4583, 15743, 257, 8062, 295, 3547, 293, 13165, 257, 3840, 295, 3565, 3142, 24590, 6815, 50918, 50918, 281, 309, 293, 550, 715, 1819, 1071, 8062, 295, 3547, 300, 550, 2170, 4678, 490, 4583, 281, 51189, 51189, 4583, 1826, 291, 483, 264, 2572, 5598, 4583, 311, 24903, 11, 597, 307, 257, 17630, 295, 264, 51462, 51462, 18161, 3209, 300, 291, 393, 2139, 14678, 412, 1958, 13, 20, 420, 406, 281, 808, 493, 365, 264, 2572, 17630, 11, 51828, 51828], "temperature": 0.0, "avg_logprob": -0.10329779872187862, "compression_ratio": 1.7234848484848484, "no_speech_prob": 1.1189305268999306e-06}, {"id": 86, "seek": 53860, "start": 544.8000000000001, "end": 549.6800000000001, "text": " Every layer inputs a vector of numbers and applies a bunch of logistic regression units", "tokens": [50364, 291, 500, 380, 528, 445, 257, 8482, 295, 309, 885, 257, 1192, 23600, 13, 50554, 50554, 407, 300, 311, 577, 257, 18161, 3209, 1985, 13, 50674, 50674, 2048, 4583, 15743, 257, 8062, 295, 3547, 293, 13165, 257, 3840, 295, 3565, 3142, 24590, 6815, 50918, 50918, 281, 309, 293, 550, 715, 1819, 1071, 8062, 295, 3547, 300, 550, 2170, 4678, 490, 4583, 281, 51189, 51189, 4583, 1826, 291, 483, 264, 2572, 5598, 4583, 311, 24903, 11, 597, 307, 257, 17630, 295, 264, 51462, 51462, 18161, 3209, 300, 291, 393, 2139, 14678, 412, 1958, 13, 20, 420, 406, 281, 808, 493, 365, 264, 2572, 17630, 11, 51828, 51828], "temperature": 0.0, "avg_logprob": -0.10329779872187862, "compression_ratio": 1.7234848484848484, "no_speech_prob": 1.1189305268999306e-06}, {"id": 87, "seek": 53860, "start": 549.6800000000001, "end": 555.1, "text": " to it and then computes another vector of numbers that then gets passed from layer to", "tokens": [50364, 291, 500, 380, 528, 445, 257, 8482, 295, 309, 885, 257, 1192, 23600, 13, 50554, 50554, 407, 300, 311, 577, 257, 18161, 3209, 1985, 13, 50674, 50674, 2048, 4583, 15743, 257, 8062, 295, 3547, 293, 13165, 257, 3840, 295, 3565, 3142, 24590, 6815, 50918, 50918, 281, 309, 293, 550, 715, 1819, 1071, 8062, 295, 3547, 300, 550, 2170, 4678, 490, 4583, 281, 51189, 51189, 4583, 1826, 291, 483, 264, 2572, 5598, 4583, 311, 24903, 11, 597, 307, 257, 17630, 295, 264, 51462, 51462, 18161, 3209, 300, 291, 393, 2139, 14678, 412, 1958, 13, 20, 420, 406, 281, 808, 493, 365, 264, 2572, 17630, 11, 51828, 51828], "temperature": 0.0, "avg_logprob": -0.10329779872187862, "compression_ratio": 1.7234848484848484, "no_speech_prob": 1.1189305268999306e-06}, {"id": 88, "seek": 53860, "start": 555.1, "end": 560.5600000000001, "text": " layer until you get the final output layer's computation, which is a prediction of the", "tokens": [50364, 291, 500, 380, 528, 445, 257, 8482, 295, 309, 885, 257, 1192, 23600, 13, 50554, 50554, 407, 300, 311, 577, 257, 18161, 3209, 1985, 13, 50674, 50674, 2048, 4583, 15743, 257, 8062, 295, 3547, 293, 13165, 257, 3840, 295, 3565, 3142, 24590, 6815, 50918, 50918, 281, 309, 293, 550, 715, 1819, 1071, 8062, 295, 3547, 300, 550, 2170, 4678, 490, 4583, 281, 51189, 51189, 4583, 1826, 291, 483, 264, 2572, 5598, 4583, 311, 24903, 11, 597, 307, 257, 17630, 295, 264, 51462, 51462, 18161, 3209, 300, 291, 393, 2139, 14678, 412, 1958, 13, 20, 420, 406, 281, 808, 493, 365, 264, 2572, 17630, 11, 51828, 51828], "temperature": 0.0, "avg_logprob": -0.10329779872187862, "compression_ratio": 1.7234848484848484, "no_speech_prob": 1.1189305268999306e-06}, {"id": 89, "seek": 53860, "start": 560.5600000000001, "end": 567.88, "text": " neural network that you can either threshold at 0.5 or not to come up with the final prediction,", "tokens": [50364, 291, 500, 380, 528, 445, 257, 8482, 295, 309, 885, 257, 1192, 23600, 13, 50554, 50554, 407, 300, 311, 577, 257, 18161, 3209, 1985, 13, 50674, 50674, 2048, 4583, 15743, 257, 8062, 295, 3547, 293, 13165, 257, 3840, 295, 3565, 3142, 24590, 6815, 50918, 50918, 281, 309, 293, 550, 715, 1819, 1071, 8062, 295, 3547, 300, 550, 2170, 4678, 490, 4583, 281, 51189, 51189, 4583, 1826, 291, 483, 264, 2572, 5598, 4583, 311, 24903, 11, 597, 307, 257, 17630, 295, 264, 51462, 51462, 18161, 3209, 300, 291, 393, 2139, 14678, 412, 1958, 13, 20, 420, 406, 281, 808, 493, 365, 264, 2572, 17630, 11, 51828, 51828], "temperature": 0.0, "avg_logprob": -0.10329779872187862, "compression_ratio": 1.7234848484848484, "no_speech_prob": 1.1189305268999306e-06}, {"id": 90, "seek": 56788, "start": 567.88, "end": 573.4, "text": " and with that, let's go on to use this foundation we've built now to look at some even more", "tokens": [50364, 293, 365, 300, 11, 718, 311, 352, 322, 281, 764, 341, 7030, 321, 600, 3094, 586, 281, 574, 412, 512, 754, 544, 50640, 50640, 3997, 11, 754, 4833, 18161, 3209, 5245, 11, 293, 286, 1454, 300, 538, 2577, 544, 5110, 11, 341, 50974, 50974, 3410, 295, 7914, 293, 577, 281, 829, 552, 1214, 281, 1322, 257, 18161, 3209, 486, 1813, 754, 51254, 51254, 26131, 13, 51320, 51320, 407, 718, 311, 352, 322, 281, 264, 958, 960, 13, 51424], "temperature": 0.0, "avg_logprob": -0.1549614667892456, "compression_ratio": 1.6269430051813472, "no_speech_prob": 1.3412133739620913e-05}, {"id": 91, "seek": 56788, "start": 573.4, "end": 580.08, "text": " complex, even larger neural network models, and I hope that by seeing more examples, this", "tokens": [50364, 293, 365, 300, 11, 718, 311, 352, 322, 281, 764, 341, 7030, 321, 600, 3094, 586, 281, 574, 412, 512, 754, 544, 50640, 50640, 3997, 11, 754, 4833, 18161, 3209, 5245, 11, 293, 286, 1454, 300, 538, 2577, 544, 5110, 11, 341, 50974, 50974, 3410, 295, 7914, 293, 577, 281, 829, 552, 1214, 281, 1322, 257, 18161, 3209, 486, 1813, 754, 51254, 51254, 26131, 13, 51320, 51320, 407, 718, 311, 352, 322, 281, 264, 958, 960, 13, 51424], "temperature": 0.0, "avg_logprob": -0.1549614667892456, "compression_ratio": 1.6269430051813472, "no_speech_prob": 1.3412133739620913e-05}, {"id": 92, "seek": 56788, "start": 580.08, "end": 585.68, "text": " concept of layers and how to put them together to build a neural network will become even", "tokens": [50364, 293, 365, 300, 11, 718, 311, 352, 322, 281, 764, 341, 7030, 321, 600, 3094, 586, 281, 574, 412, 512, 754, 544, 50640, 50640, 3997, 11, 754, 4833, 18161, 3209, 5245, 11, 293, 286, 1454, 300, 538, 2577, 544, 5110, 11, 341, 50974, 50974, 3410, 295, 7914, 293, 577, 281, 829, 552, 1214, 281, 1322, 257, 18161, 3209, 486, 1813, 754, 51254, 51254, 26131, 13, 51320, 51320, 407, 718, 311, 352, 322, 281, 264, 958, 960, 13, 51424], "temperature": 0.0, "avg_logprob": -0.1549614667892456, "compression_ratio": 1.6269430051813472, "no_speech_prob": 1.3412133739620913e-05}, {"id": 93, "seek": 56788, "start": 585.68, "end": 587.0, "text": " clearer.", "tokens": [50364, 293, 365, 300, 11, 718, 311, 352, 322, 281, 764, 341, 7030, 321, 600, 3094, 586, 281, 574, 412, 512, 754, 544, 50640, 50640, 3997, 11, 754, 4833, 18161, 3209, 5245, 11, 293, 286, 1454, 300, 538, 2577, 544, 5110, 11, 341, 50974, 50974, 3410, 295, 7914, 293, 577, 281, 829, 552, 1214, 281, 1322, 257, 18161, 3209, 486, 1813, 754, 51254, 51254, 26131, 13, 51320, 51320, 407, 718, 311, 352, 322, 281, 264, 958, 960, 13, 51424], "temperature": 0.0, "avg_logprob": -0.1549614667892456, "compression_ratio": 1.6269430051813472, "no_speech_prob": 1.3412133739620913e-05}, {"id": 94, "seek": 58700, "start": 587.0, "end": 598.64, "text": " So let's go on to the next video.", "tokens": [50364, 407, 718, 311, 352, 322, 281, 264, 958, 960, 13, 50946], "temperature": 0.0, "avg_logprob": -0.4281798509451059, "compression_ratio": 0.8048780487804879, "no_speech_prob": 0.0003960506001021713}], "language": "en", "video_id": "YmDM4Bq-dyA", "entity": "ML Specialization, Andrew Ng (2022)"}}
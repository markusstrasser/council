{"video_id": "m7xcF9jXLpc", "title": "4.17 Vectorization (optional) | Matrix multiplication code-- [Machine Learning - Andrew Ng]", "description": "Second Course:\nAdvanced Learning Algorithms.\n\n\nIf you liked the content please subscribe and put a little blue thumb.\nTake heart!", "author": "Machine Learning", "keywords": [], "channel_url": "https://www.youtube.com/channel/UClG5HEAJJFOavT_UolqYROQ", "length": 401, "views": 93, "publish_date": "11/04/2022", "timestamp": 1661385600, "entity": "ML Specialization, Andrew Ng (2022)", "transcript": {"text": " So, without further ado, let's jump into the vectorized implementation of a neural network. We'll look at the code that you have seen in an earlier video, and hopefully, MatMul, that is that matrix multiplication calculation, will make more sense. Let's jump in. So you saw previously how you can take the matrix A and compute A transpose times W, resulting in this matrix here, Z. In code, if this is the matrix A, this is a numpy array with the elements corresponding to what I wrote on top, then A transpose, which I'm going to write as A T, is going to be this matrix here, with, again, the columns of A now laid out in rows instead. And by the way, instead of setting up A T this way, another way to compute A T in numpy array would be to write A T equals A dot T. That's the transpose function that takes the columns of the matrix and lays them on the side. In code, here's how you initialize the matrix W, this is another 2D numpy array. And then to compute Z equals A transpose times W, you would write Z equals NP dot MatMul A T comma W. And that will compute this matrix Z over here, giving you this result down here. And by the way, if you read others' code, sometimes you see Z equals A T and then the at symbol W. This is an alternative way of calling the MatMul function, although I find using NP dot MatMul to be clearer. And so in the code you see in this class, we just use the MatMul function like this, rather than this at symbol. So let's look at what a vectorized implementation of what prop looks like. I'm going to set A transpose to be equal to the input feature values 217. So these are just the usual input feature values, 200 degrees, roasting coffee for 17 minutes. So this is a 1 by 2 matrix, and I'm going to take the parameters W1, W2, and W3 and stack them in columns like this to form this matrix capital W. And the values b1, b2, b3, I'm going to put into a 1 by 3 matrix that is this matrix B as follows. And it turns out that if you were to compute Z equals A transpose W plus B, that will result in these three numbers. And that's computed by taking the input feature values and multiplying that by the first column and then adding B to get 165. Taking these feature values, dot producting with the second column that is a weights W2 and adding B2 to get negative 531. And these feature values dot product with the weights W3 plus B3 to get 900. Feel free to pause the video if you wish to double check these calculations, but this gives you the values of Z11, Z12, and Z13. And then finally, if the function G applies the sigmoid function to these three numbers element-wise, that this applies the sigmoid function to 165, to negative 531, and to 900, then you end up with A equals G of this matrix Z ends up being 101. And it's 101 because sigmoid of 165 is so close to 1 that, you know, up to numerical round off is basically 1 and these are basically 0 and 1. Now let's look at how you implement this in code. A transpose is equal to this, is this 1 by 2 array of 217. The matrix W is this 2 by 3 matrix and B is this 1 by 3 matrix. And so the way you can implement for prop in the layer is dense input A transpose WB is equal to Z equals matmul A transpose times W plus B. So that just implements this line of code. And then A out, that is the output of this layer, is equal to G, the activation function applied element-wise to this matrix Z. And you return A out and that gives you this value. In case you're comparing the slide with the slides a few videos back, there was just one little difference, which was by convention, the way this is implemented in TensorFlow, rather than calling this variable Xt, we call it just A and rather than calling this variable At, we were calling it An, which is why this too is a correct implementation of the code. And there is a convention in TensorFlow that individual examples are actually laid out in rows in the matrix X, rather than in the matrix X transpose, which is why the code implementation actually looks like this in TensorFlow. But this explains why with just a few lines of code, you can implement for prop in the neural network and moreover get a huge speed bonus because matmul matrix multiplication can be done very efficiently using fast hardware. And get a huge bonus because modern computers are very good at implementing matrix multiplication such as matmul efficiently. That's the last video of this week. Thanks for sticking with me all the way through the end of these optional videos. For the rest of this week, I hope you also take a look at the quizzes and the practice labs and also the optional labs to exercise this material even more deeply. You now know how to do inference and for prop in a neural network, which I think is really cool. So congratulations. After you have gone through the quizzes in the labs, please also come back and in the next week, we'll look at how to actually train a neural network. So I look forward to seeing you next week.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 7.28, "text": " So, without further ado, let's jump into the vectorized implementation of a neural network.", "tokens": [50364, 407, 11, 1553, 3052, 22450, 11, 718, 311, 3012, 666, 264, 8062, 1602, 11420, 295, 257, 18161, 3209, 13, 50728, 50728, 492, 603, 574, 412, 264, 3089, 300, 291, 362, 1612, 294, 364, 3071, 960, 11, 293, 4696, 11, 6789, 44, 425, 11, 50970, 50970, 300, 307, 300, 8141, 27290, 17108, 11, 486, 652, 544, 2020, 13, 51178, 51178, 961, 311, 3012, 294, 13, 51228, 51228, 407, 291, 1866, 8046, 577, 291, 393, 747, 264, 8141, 316, 293, 14722, 316, 25167, 1413, 343, 11, 51536, 51536, 16505, 294, 341, 8141, 510, 11, 1176, 13, 51752, 51752], "temperature": 0.0, "avg_logprob": -0.2093497879651128, "compression_ratio": 1.5614754098360655, "no_speech_prob": 0.007343924138695002}, {"id": 1, "seek": 0, "start": 7.28, "end": 12.120000000000001, "text": " We'll look at the code that you have seen in an earlier video, and hopefully, MatMul,", "tokens": [50364, 407, 11, 1553, 3052, 22450, 11, 718, 311, 3012, 666, 264, 8062, 1602, 11420, 295, 257, 18161, 3209, 13, 50728, 50728, 492, 603, 574, 412, 264, 3089, 300, 291, 362, 1612, 294, 364, 3071, 960, 11, 293, 4696, 11, 6789, 44, 425, 11, 50970, 50970, 300, 307, 300, 8141, 27290, 17108, 11, 486, 652, 544, 2020, 13, 51178, 51178, 961, 311, 3012, 294, 13, 51228, 51228, 407, 291, 1866, 8046, 577, 291, 393, 747, 264, 8141, 316, 293, 14722, 316, 25167, 1413, 343, 11, 51536, 51536, 16505, 294, 341, 8141, 510, 11, 1176, 13, 51752, 51752], "temperature": 0.0, "avg_logprob": -0.2093497879651128, "compression_ratio": 1.5614754098360655, "no_speech_prob": 0.007343924138695002}, {"id": 2, "seek": 0, "start": 12.120000000000001, "end": 16.28, "text": " that is that matrix multiplication calculation, will make more sense.", "tokens": [50364, 407, 11, 1553, 3052, 22450, 11, 718, 311, 3012, 666, 264, 8062, 1602, 11420, 295, 257, 18161, 3209, 13, 50728, 50728, 492, 603, 574, 412, 264, 3089, 300, 291, 362, 1612, 294, 364, 3071, 960, 11, 293, 4696, 11, 6789, 44, 425, 11, 50970, 50970, 300, 307, 300, 8141, 27290, 17108, 11, 486, 652, 544, 2020, 13, 51178, 51178, 961, 311, 3012, 294, 13, 51228, 51228, 407, 291, 1866, 8046, 577, 291, 393, 747, 264, 8141, 316, 293, 14722, 316, 25167, 1413, 343, 11, 51536, 51536, 16505, 294, 341, 8141, 510, 11, 1176, 13, 51752, 51752], "temperature": 0.0, "avg_logprob": -0.2093497879651128, "compression_ratio": 1.5614754098360655, "no_speech_prob": 0.007343924138695002}, {"id": 3, "seek": 0, "start": 16.28, "end": 17.28, "text": " Let's jump in.", "tokens": [50364, 407, 11, 1553, 3052, 22450, 11, 718, 311, 3012, 666, 264, 8062, 1602, 11420, 295, 257, 18161, 3209, 13, 50728, 50728, 492, 603, 574, 412, 264, 3089, 300, 291, 362, 1612, 294, 364, 3071, 960, 11, 293, 4696, 11, 6789, 44, 425, 11, 50970, 50970, 300, 307, 300, 8141, 27290, 17108, 11, 486, 652, 544, 2020, 13, 51178, 51178, 961, 311, 3012, 294, 13, 51228, 51228, 407, 291, 1866, 8046, 577, 291, 393, 747, 264, 8141, 316, 293, 14722, 316, 25167, 1413, 343, 11, 51536, 51536, 16505, 294, 341, 8141, 510, 11, 1176, 13, 51752, 51752], "temperature": 0.0, "avg_logprob": -0.2093497879651128, "compression_ratio": 1.5614754098360655, "no_speech_prob": 0.007343924138695002}, {"id": 4, "seek": 0, "start": 17.28, "end": 23.44, "text": " So you saw previously how you can take the matrix A and compute A transpose times W,", "tokens": [50364, 407, 11, 1553, 3052, 22450, 11, 718, 311, 3012, 666, 264, 8062, 1602, 11420, 295, 257, 18161, 3209, 13, 50728, 50728, 492, 603, 574, 412, 264, 3089, 300, 291, 362, 1612, 294, 364, 3071, 960, 11, 293, 4696, 11, 6789, 44, 425, 11, 50970, 50970, 300, 307, 300, 8141, 27290, 17108, 11, 486, 652, 544, 2020, 13, 51178, 51178, 961, 311, 3012, 294, 13, 51228, 51228, 407, 291, 1866, 8046, 577, 291, 393, 747, 264, 8141, 316, 293, 14722, 316, 25167, 1413, 343, 11, 51536, 51536, 16505, 294, 341, 8141, 510, 11, 1176, 13, 51752, 51752], "temperature": 0.0, "avg_logprob": -0.2093497879651128, "compression_ratio": 1.5614754098360655, "no_speech_prob": 0.007343924138695002}, {"id": 5, "seek": 0, "start": 23.44, "end": 27.76, "text": " resulting in this matrix here, Z.", "tokens": [50364, 407, 11, 1553, 3052, 22450, 11, 718, 311, 3012, 666, 264, 8062, 1602, 11420, 295, 257, 18161, 3209, 13, 50728, 50728, 492, 603, 574, 412, 264, 3089, 300, 291, 362, 1612, 294, 364, 3071, 960, 11, 293, 4696, 11, 6789, 44, 425, 11, 50970, 50970, 300, 307, 300, 8141, 27290, 17108, 11, 486, 652, 544, 2020, 13, 51178, 51178, 961, 311, 3012, 294, 13, 51228, 51228, 407, 291, 1866, 8046, 577, 291, 393, 747, 264, 8141, 316, 293, 14722, 316, 25167, 1413, 343, 11, 51536, 51536, 16505, 294, 341, 8141, 510, 11, 1176, 13, 51752, 51752], "temperature": 0.0, "avg_logprob": -0.2093497879651128, "compression_ratio": 1.5614754098360655, "no_speech_prob": 0.007343924138695002}, {"id": 6, "seek": 2776, "start": 27.76, "end": 35.120000000000005, "text": " In code, if this is the matrix A, this is a numpy array with the elements corresponding", "tokens": [50364, 682, 3089, 11, 498, 341, 307, 264, 8141, 316, 11, 341, 307, 257, 1031, 8200, 10225, 365, 264, 4959, 11760, 50732, 50732, 281, 437, 286, 4114, 322, 1192, 11, 550, 316, 25167, 11, 597, 286, 478, 516, 281, 2464, 382, 316, 314, 11, 307, 516, 51010, 51010, 281, 312, 341, 8141, 510, 11, 365, 11, 797, 11, 264, 13766, 295, 316, 586, 9897, 484, 294, 13241, 2602, 13, 51464, 51464, 400, 538, 264, 636, 11, 2602, 295, 3287, 493, 316, 314, 341, 636, 11, 1071, 636, 281, 14722, 316, 314, 294, 1031, 8200, 51832, 51832], "temperature": 0.0, "avg_logprob": -0.1306101513892105, "compression_ratio": 1.6333333333333333, "no_speech_prob": 3.218999336240813e-05}, {"id": 7, "seek": 2776, "start": 35.120000000000005, "end": 40.68, "text": " to what I wrote on top, then A transpose, which I'm going to write as A T, is going", "tokens": [50364, 682, 3089, 11, 498, 341, 307, 264, 8141, 316, 11, 341, 307, 257, 1031, 8200, 10225, 365, 264, 4959, 11760, 50732, 50732, 281, 437, 286, 4114, 322, 1192, 11, 550, 316, 25167, 11, 597, 286, 478, 516, 281, 2464, 382, 316, 314, 11, 307, 516, 51010, 51010, 281, 312, 341, 8141, 510, 11, 365, 11, 797, 11, 264, 13766, 295, 316, 586, 9897, 484, 294, 13241, 2602, 13, 51464, 51464, 400, 538, 264, 636, 11, 2602, 295, 3287, 493, 316, 314, 341, 636, 11, 1071, 636, 281, 14722, 316, 314, 294, 1031, 8200, 51832, 51832], "temperature": 0.0, "avg_logprob": -0.1306101513892105, "compression_ratio": 1.6333333333333333, "no_speech_prob": 3.218999336240813e-05}, {"id": 8, "seek": 2776, "start": 40.68, "end": 49.760000000000005, "text": " to be this matrix here, with, again, the columns of A now laid out in rows instead.", "tokens": [50364, 682, 3089, 11, 498, 341, 307, 264, 8141, 316, 11, 341, 307, 257, 1031, 8200, 10225, 365, 264, 4959, 11760, 50732, 50732, 281, 437, 286, 4114, 322, 1192, 11, 550, 316, 25167, 11, 597, 286, 478, 516, 281, 2464, 382, 316, 314, 11, 307, 516, 51010, 51010, 281, 312, 341, 8141, 510, 11, 365, 11, 797, 11, 264, 13766, 295, 316, 586, 9897, 484, 294, 13241, 2602, 13, 51464, 51464, 400, 538, 264, 636, 11, 2602, 295, 3287, 493, 316, 314, 341, 636, 11, 1071, 636, 281, 14722, 316, 314, 294, 1031, 8200, 51832, 51832], "temperature": 0.0, "avg_logprob": -0.1306101513892105, "compression_ratio": 1.6333333333333333, "no_speech_prob": 3.218999336240813e-05}, {"id": 9, "seek": 2776, "start": 49.760000000000005, "end": 57.120000000000005, "text": " And by the way, instead of setting up A T this way, another way to compute A T in numpy", "tokens": [50364, 682, 3089, 11, 498, 341, 307, 264, 8141, 316, 11, 341, 307, 257, 1031, 8200, 10225, 365, 264, 4959, 11760, 50732, 50732, 281, 437, 286, 4114, 322, 1192, 11, 550, 316, 25167, 11, 597, 286, 478, 516, 281, 2464, 382, 316, 314, 11, 307, 516, 51010, 51010, 281, 312, 341, 8141, 510, 11, 365, 11, 797, 11, 264, 13766, 295, 316, 586, 9897, 484, 294, 13241, 2602, 13, 51464, 51464, 400, 538, 264, 636, 11, 2602, 295, 3287, 493, 316, 314, 341, 636, 11, 1071, 636, 281, 14722, 316, 314, 294, 1031, 8200, 51832, 51832], "temperature": 0.0, "avg_logprob": -0.1306101513892105, "compression_ratio": 1.6333333333333333, "no_speech_prob": 3.218999336240813e-05}, {"id": 10, "seek": 5712, "start": 57.12, "end": 61.599999999999994, "text": " array would be to write A T equals A dot T.", "tokens": [50364, 10225, 576, 312, 281, 2464, 316, 314, 6915, 316, 5893, 314, 13, 50588, 50588, 663, 311, 264, 25167, 2445, 300, 2516, 264, 13766, 295, 264, 8141, 293, 32714, 552, 322, 264, 50830, 50830, 1252, 13, 50880, 50880, 682, 3089, 11, 510, 311, 577, 291, 5883, 1125, 264, 8141, 343, 11, 341, 307, 1071, 568, 35, 1031, 8200, 10225, 13, 51276, 51276, 400, 550, 281, 14722, 1176, 6915, 316, 25167, 1413, 343, 11, 291, 576, 2464, 1176, 6915, 38611, 5893, 6789, 44, 425, 51736, 51736], "temperature": 0.0, "avg_logprob": -0.19788633390914562, "compression_ratio": 1.5049019607843137, "no_speech_prob": 5.4220136007643305e-06}, {"id": 11, "seek": 5712, "start": 61.599999999999994, "end": 66.44, "text": " That's the transpose function that takes the columns of the matrix and lays them on the", "tokens": [50364, 10225, 576, 312, 281, 2464, 316, 314, 6915, 316, 5893, 314, 13, 50588, 50588, 663, 311, 264, 25167, 2445, 300, 2516, 264, 13766, 295, 264, 8141, 293, 32714, 552, 322, 264, 50830, 50830, 1252, 13, 50880, 50880, 682, 3089, 11, 510, 311, 577, 291, 5883, 1125, 264, 8141, 343, 11, 341, 307, 1071, 568, 35, 1031, 8200, 10225, 13, 51276, 51276, 400, 550, 281, 14722, 1176, 6915, 316, 25167, 1413, 343, 11, 291, 576, 2464, 1176, 6915, 38611, 5893, 6789, 44, 425, 51736, 51736], "temperature": 0.0, "avg_logprob": -0.19788633390914562, "compression_ratio": 1.5049019607843137, "no_speech_prob": 5.4220136007643305e-06}, {"id": 12, "seek": 5712, "start": 66.44, "end": 67.44, "text": " side.", "tokens": [50364, 10225, 576, 312, 281, 2464, 316, 314, 6915, 316, 5893, 314, 13, 50588, 50588, 663, 311, 264, 25167, 2445, 300, 2516, 264, 13766, 295, 264, 8141, 293, 32714, 552, 322, 264, 50830, 50830, 1252, 13, 50880, 50880, 682, 3089, 11, 510, 311, 577, 291, 5883, 1125, 264, 8141, 343, 11, 341, 307, 1071, 568, 35, 1031, 8200, 10225, 13, 51276, 51276, 400, 550, 281, 14722, 1176, 6915, 316, 25167, 1413, 343, 11, 291, 576, 2464, 1176, 6915, 38611, 5893, 6789, 44, 425, 51736, 51736], "temperature": 0.0, "avg_logprob": -0.19788633390914562, "compression_ratio": 1.5049019607843137, "no_speech_prob": 5.4220136007643305e-06}, {"id": 13, "seek": 5712, "start": 67.44, "end": 75.36, "text": " In code, here's how you initialize the matrix W, this is another 2D numpy array.", "tokens": [50364, 10225, 576, 312, 281, 2464, 316, 314, 6915, 316, 5893, 314, 13, 50588, 50588, 663, 311, 264, 25167, 2445, 300, 2516, 264, 13766, 295, 264, 8141, 293, 32714, 552, 322, 264, 50830, 50830, 1252, 13, 50880, 50880, 682, 3089, 11, 510, 311, 577, 291, 5883, 1125, 264, 8141, 343, 11, 341, 307, 1071, 568, 35, 1031, 8200, 10225, 13, 51276, 51276, 400, 550, 281, 14722, 1176, 6915, 316, 25167, 1413, 343, 11, 291, 576, 2464, 1176, 6915, 38611, 5893, 6789, 44, 425, 51736, 51736], "temperature": 0.0, "avg_logprob": -0.19788633390914562, "compression_ratio": 1.5049019607843137, "no_speech_prob": 5.4220136007643305e-06}, {"id": 14, "seek": 5712, "start": 75.36, "end": 84.56, "text": " And then to compute Z equals A transpose times W, you would write Z equals NP dot MatMul", "tokens": [50364, 10225, 576, 312, 281, 2464, 316, 314, 6915, 316, 5893, 314, 13, 50588, 50588, 663, 311, 264, 25167, 2445, 300, 2516, 264, 13766, 295, 264, 8141, 293, 32714, 552, 322, 264, 50830, 50830, 1252, 13, 50880, 50880, 682, 3089, 11, 510, 311, 577, 291, 5883, 1125, 264, 8141, 343, 11, 341, 307, 1071, 568, 35, 1031, 8200, 10225, 13, 51276, 51276, 400, 550, 281, 14722, 1176, 6915, 316, 25167, 1413, 343, 11, 291, 576, 2464, 1176, 6915, 38611, 5893, 6789, 44, 425, 51736, 51736], "temperature": 0.0, "avg_logprob": -0.19788633390914562, "compression_ratio": 1.5049019607843137, "no_speech_prob": 5.4220136007643305e-06}, {"id": 15, "seek": 8456, "start": 84.56, "end": 95.64, "text": " A T comma W. And that will compute this matrix Z over here, giving you this result down here.", "tokens": [50364, 316, 314, 22117, 343, 13, 400, 300, 486, 14722, 341, 8141, 1176, 670, 510, 11, 2902, 291, 341, 1874, 760, 510, 13, 50918, 50918, 400, 538, 264, 636, 11, 498, 291, 1401, 2357, 6, 3089, 11, 2171, 291, 536, 1176, 6915, 316, 314, 293, 550, 264, 51244, 51244, 412, 5986, 343, 13, 639, 307, 364, 8535, 636, 295, 5141, 264, 6789, 44, 425, 2445, 11, 4878, 286, 915, 51622, 51622, 1228, 38611, 5893, 6789, 44, 425, 281, 312, 26131, 13, 51774, 51774], "temperature": 0.0, "avg_logprob": -0.1327662127358573, "compression_ratio": 1.473170731707317, "no_speech_prob": 2.1907658265263308e-06}, {"id": 16, "seek": 8456, "start": 95.64, "end": 102.16, "text": " And by the way, if you read others' code, sometimes you see Z equals A T and then the", "tokens": [50364, 316, 314, 22117, 343, 13, 400, 300, 486, 14722, 341, 8141, 1176, 670, 510, 11, 2902, 291, 341, 1874, 760, 510, 13, 50918, 50918, 400, 538, 264, 636, 11, 498, 291, 1401, 2357, 6, 3089, 11, 2171, 291, 536, 1176, 6915, 316, 314, 293, 550, 264, 51244, 51244, 412, 5986, 343, 13, 639, 307, 364, 8535, 636, 295, 5141, 264, 6789, 44, 425, 2445, 11, 4878, 286, 915, 51622, 51622, 1228, 38611, 5893, 6789, 44, 425, 281, 312, 26131, 13, 51774, 51774], "temperature": 0.0, "avg_logprob": -0.1327662127358573, "compression_ratio": 1.473170731707317, "no_speech_prob": 2.1907658265263308e-06}, {"id": 17, "seek": 8456, "start": 102.16, "end": 109.72, "text": " at symbol W. This is an alternative way of calling the MatMul function, although I find", "tokens": [50364, 316, 314, 22117, 343, 13, 400, 300, 486, 14722, 341, 8141, 1176, 670, 510, 11, 2902, 291, 341, 1874, 760, 510, 13, 50918, 50918, 400, 538, 264, 636, 11, 498, 291, 1401, 2357, 6, 3089, 11, 2171, 291, 536, 1176, 6915, 316, 314, 293, 550, 264, 51244, 51244, 412, 5986, 343, 13, 639, 307, 364, 8535, 636, 295, 5141, 264, 6789, 44, 425, 2445, 11, 4878, 286, 915, 51622, 51622, 1228, 38611, 5893, 6789, 44, 425, 281, 312, 26131, 13, 51774, 51774], "temperature": 0.0, "avg_logprob": -0.1327662127358573, "compression_ratio": 1.473170731707317, "no_speech_prob": 2.1907658265263308e-06}, {"id": 18, "seek": 8456, "start": 109.72, "end": 112.76, "text": " using NP dot MatMul to be clearer.", "tokens": [50364, 316, 314, 22117, 343, 13, 400, 300, 486, 14722, 341, 8141, 1176, 670, 510, 11, 2902, 291, 341, 1874, 760, 510, 13, 50918, 50918, 400, 538, 264, 636, 11, 498, 291, 1401, 2357, 6, 3089, 11, 2171, 291, 536, 1176, 6915, 316, 314, 293, 550, 264, 51244, 51244, 412, 5986, 343, 13, 639, 307, 364, 8535, 636, 295, 5141, 264, 6789, 44, 425, 2445, 11, 4878, 286, 915, 51622, 51622, 1228, 38611, 5893, 6789, 44, 425, 281, 312, 26131, 13, 51774, 51774], "temperature": 0.0, "avg_logprob": -0.1327662127358573, "compression_ratio": 1.473170731707317, "no_speech_prob": 2.1907658265263308e-06}, {"id": 19, "seek": 11276, "start": 112.76, "end": 116.60000000000001, "text": " And so in the code you see in this class, we just use the MatMul function like this,", "tokens": [50364, 400, 370, 294, 264, 3089, 291, 536, 294, 341, 1508, 11, 321, 445, 764, 264, 6789, 44, 425, 2445, 411, 341, 11, 50556, 50556, 2831, 813, 341, 412, 5986, 13, 50690, 50690, 407, 718, 311, 574, 412, 437, 257, 8062, 1602, 11420, 295, 437, 2365, 1542, 411, 13, 50936, 50936, 286, 478, 516, 281, 992, 316, 25167, 281, 312, 2681, 281, 264, 4846, 4111, 4190, 5080, 22, 13, 51310, 51310, 407, 613, 366, 445, 264, 7713, 4846, 4111, 4190, 11, 2331, 5310, 11, 45227, 4982, 337, 3282, 51614, 51614, 2077, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.16380317085667662, "compression_ratio": 1.575221238938053, "no_speech_prob": 3.089453912252793e-06}, {"id": 20, "seek": 11276, "start": 116.60000000000001, "end": 119.28, "text": " rather than this at symbol.", "tokens": [50364, 400, 370, 294, 264, 3089, 291, 536, 294, 341, 1508, 11, 321, 445, 764, 264, 6789, 44, 425, 2445, 411, 341, 11, 50556, 50556, 2831, 813, 341, 412, 5986, 13, 50690, 50690, 407, 718, 311, 574, 412, 437, 257, 8062, 1602, 11420, 295, 437, 2365, 1542, 411, 13, 50936, 50936, 286, 478, 516, 281, 992, 316, 25167, 281, 312, 2681, 281, 264, 4846, 4111, 4190, 5080, 22, 13, 51310, 51310, 407, 613, 366, 445, 264, 7713, 4846, 4111, 4190, 11, 2331, 5310, 11, 45227, 4982, 337, 3282, 51614, 51614, 2077, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.16380317085667662, "compression_ratio": 1.575221238938053, "no_speech_prob": 3.089453912252793e-06}, {"id": 21, "seek": 11276, "start": 119.28, "end": 124.2, "text": " So let's look at what a vectorized implementation of what prop looks like.", "tokens": [50364, 400, 370, 294, 264, 3089, 291, 536, 294, 341, 1508, 11, 321, 445, 764, 264, 6789, 44, 425, 2445, 411, 341, 11, 50556, 50556, 2831, 813, 341, 412, 5986, 13, 50690, 50690, 407, 718, 311, 574, 412, 437, 257, 8062, 1602, 11420, 295, 437, 2365, 1542, 411, 13, 50936, 50936, 286, 478, 516, 281, 992, 316, 25167, 281, 312, 2681, 281, 264, 4846, 4111, 4190, 5080, 22, 13, 51310, 51310, 407, 613, 366, 445, 264, 7713, 4846, 4111, 4190, 11, 2331, 5310, 11, 45227, 4982, 337, 3282, 51614, 51614, 2077, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.16380317085667662, "compression_ratio": 1.575221238938053, "no_speech_prob": 3.089453912252793e-06}, {"id": 22, "seek": 11276, "start": 124.2, "end": 131.68, "text": " I'm going to set A transpose to be equal to the input feature values 217.", "tokens": [50364, 400, 370, 294, 264, 3089, 291, 536, 294, 341, 1508, 11, 321, 445, 764, 264, 6789, 44, 425, 2445, 411, 341, 11, 50556, 50556, 2831, 813, 341, 412, 5986, 13, 50690, 50690, 407, 718, 311, 574, 412, 437, 257, 8062, 1602, 11420, 295, 437, 2365, 1542, 411, 13, 50936, 50936, 286, 478, 516, 281, 992, 316, 25167, 281, 312, 2681, 281, 264, 4846, 4111, 4190, 5080, 22, 13, 51310, 51310, 407, 613, 366, 445, 264, 7713, 4846, 4111, 4190, 11, 2331, 5310, 11, 45227, 4982, 337, 3282, 51614, 51614, 2077, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.16380317085667662, "compression_ratio": 1.575221238938053, "no_speech_prob": 3.089453912252793e-06}, {"id": 23, "seek": 11276, "start": 131.68, "end": 137.76, "text": " So these are just the usual input feature values, 200 degrees, roasting coffee for 17", "tokens": [50364, 400, 370, 294, 264, 3089, 291, 536, 294, 341, 1508, 11, 321, 445, 764, 264, 6789, 44, 425, 2445, 411, 341, 11, 50556, 50556, 2831, 813, 341, 412, 5986, 13, 50690, 50690, 407, 718, 311, 574, 412, 437, 257, 8062, 1602, 11420, 295, 437, 2365, 1542, 411, 13, 50936, 50936, 286, 478, 516, 281, 992, 316, 25167, 281, 312, 2681, 281, 264, 4846, 4111, 4190, 5080, 22, 13, 51310, 51310, 407, 613, 366, 445, 264, 7713, 4846, 4111, 4190, 11, 2331, 5310, 11, 45227, 4982, 337, 3282, 51614, 51614, 2077, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.16380317085667662, "compression_ratio": 1.575221238938053, "no_speech_prob": 3.089453912252793e-06}, {"id": 24, "seek": 11276, "start": 137.76, "end": 138.76, "text": " minutes.", "tokens": [50364, 400, 370, 294, 264, 3089, 291, 536, 294, 341, 1508, 11, 321, 445, 764, 264, 6789, 44, 425, 2445, 411, 341, 11, 50556, 50556, 2831, 813, 341, 412, 5986, 13, 50690, 50690, 407, 718, 311, 574, 412, 437, 257, 8062, 1602, 11420, 295, 437, 2365, 1542, 411, 13, 50936, 50936, 286, 478, 516, 281, 992, 316, 25167, 281, 312, 2681, 281, 264, 4846, 4111, 4190, 5080, 22, 13, 51310, 51310, 407, 613, 366, 445, 264, 7713, 4846, 4111, 4190, 11, 2331, 5310, 11, 45227, 4982, 337, 3282, 51614, 51614, 2077, 13, 51664, 51664], "temperature": 0.0, "avg_logprob": -0.16380317085667662, "compression_ratio": 1.575221238938053, "no_speech_prob": 3.089453912252793e-06}, {"id": 25, "seek": 13876, "start": 138.76, "end": 147.72, "text": " So this is a 1 by 2 matrix, and I'm going to take the parameters W1, W2, and W3 and", "tokens": [50364, 407, 341, 307, 257, 502, 538, 568, 8141, 11, 293, 286, 478, 516, 281, 747, 264, 9834, 343, 16, 11, 343, 17, 11, 293, 343, 18, 293, 50812, 50812, 8630, 552, 294, 13766, 411, 341, 281, 1254, 341, 8141, 4238, 343, 13, 400, 264, 4190, 272, 16, 11, 272, 17, 11, 272, 18, 11, 51276, 51276, 286, 478, 516, 281, 829, 666, 257, 502, 538, 805, 8141, 300, 307, 341, 8141, 363, 382, 10002, 13, 51610, 51610], "temperature": 0.0, "avg_logprob": -0.13774905627286887, "compression_ratio": 1.4939024390243902, "no_speech_prob": 2.668674278538674e-05}, {"id": 26, "seek": 13876, "start": 147.72, "end": 157.0, "text": " stack them in columns like this to form this matrix capital W. And the values b1, b2, b3,", "tokens": [50364, 407, 341, 307, 257, 502, 538, 568, 8141, 11, 293, 286, 478, 516, 281, 747, 264, 9834, 343, 16, 11, 343, 17, 11, 293, 343, 18, 293, 50812, 50812, 8630, 552, 294, 13766, 411, 341, 281, 1254, 341, 8141, 4238, 343, 13, 400, 264, 4190, 272, 16, 11, 272, 17, 11, 272, 18, 11, 51276, 51276, 286, 478, 516, 281, 829, 666, 257, 502, 538, 805, 8141, 300, 307, 341, 8141, 363, 382, 10002, 13, 51610, 51610], "temperature": 0.0, "avg_logprob": -0.13774905627286887, "compression_ratio": 1.4939024390243902, "no_speech_prob": 2.668674278538674e-05}, {"id": 27, "seek": 13876, "start": 157.0, "end": 163.68, "text": " I'm going to put into a 1 by 3 matrix that is this matrix B as follows.", "tokens": [50364, 407, 341, 307, 257, 502, 538, 568, 8141, 11, 293, 286, 478, 516, 281, 747, 264, 9834, 343, 16, 11, 343, 17, 11, 293, 343, 18, 293, 50812, 50812, 8630, 552, 294, 13766, 411, 341, 281, 1254, 341, 8141, 4238, 343, 13, 400, 264, 4190, 272, 16, 11, 272, 17, 11, 272, 18, 11, 51276, 51276, 286, 478, 516, 281, 829, 666, 257, 502, 538, 805, 8141, 300, 307, 341, 8141, 363, 382, 10002, 13, 51610, 51610], "temperature": 0.0, "avg_logprob": -0.13774905627286887, "compression_ratio": 1.4939024390243902, "no_speech_prob": 2.668674278538674e-05}, {"id": 28, "seek": 16368, "start": 163.68, "end": 172.04000000000002, "text": " And it turns out that if you were to compute Z equals A transpose W plus B, that will result", "tokens": [50364, 400, 309, 4523, 484, 300, 498, 291, 645, 281, 14722, 1176, 6915, 316, 25167, 343, 1804, 363, 11, 300, 486, 1874, 50782, 50782, 294, 613, 1045, 3547, 13, 50922, 50922, 400, 300, 311, 40610, 538, 1940, 264, 4846, 4111, 4190, 293, 30955, 300, 538, 264, 700, 7738, 51310, 51310, 293, 550, 5127, 363, 281, 483, 3165, 20, 13, 51548, 51548, 17837, 613, 4111, 4190, 11, 5893, 1674, 278, 365, 264, 1150, 7738, 300, 307, 257, 17443, 343, 17, 51826, 51826], "temperature": 0.0, "avg_logprob": -0.13642156414869355, "compression_ratio": 1.5492957746478873, "no_speech_prob": 1.2605813935806509e-05}, {"id": 29, "seek": 16368, "start": 172.04000000000002, "end": 174.84, "text": " in these three numbers.", "tokens": [50364, 400, 309, 4523, 484, 300, 498, 291, 645, 281, 14722, 1176, 6915, 316, 25167, 343, 1804, 363, 11, 300, 486, 1874, 50782, 50782, 294, 613, 1045, 3547, 13, 50922, 50922, 400, 300, 311, 40610, 538, 1940, 264, 4846, 4111, 4190, 293, 30955, 300, 538, 264, 700, 7738, 51310, 51310, 293, 550, 5127, 363, 281, 483, 3165, 20, 13, 51548, 51548, 17837, 613, 4111, 4190, 11, 5893, 1674, 278, 365, 264, 1150, 7738, 300, 307, 257, 17443, 343, 17, 51826, 51826], "temperature": 0.0, "avg_logprob": -0.13642156414869355, "compression_ratio": 1.5492957746478873, "no_speech_prob": 1.2605813935806509e-05}, {"id": 30, "seek": 16368, "start": 174.84, "end": 182.60000000000002, "text": " And that's computed by taking the input feature values and multiplying that by the first column", "tokens": [50364, 400, 309, 4523, 484, 300, 498, 291, 645, 281, 14722, 1176, 6915, 316, 25167, 343, 1804, 363, 11, 300, 486, 1874, 50782, 50782, 294, 613, 1045, 3547, 13, 50922, 50922, 400, 300, 311, 40610, 538, 1940, 264, 4846, 4111, 4190, 293, 30955, 300, 538, 264, 700, 7738, 51310, 51310, 293, 550, 5127, 363, 281, 483, 3165, 20, 13, 51548, 51548, 17837, 613, 4111, 4190, 11, 5893, 1674, 278, 365, 264, 1150, 7738, 300, 307, 257, 17443, 343, 17, 51826, 51826], "temperature": 0.0, "avg_logprob": -0.13642156414869355, "compression_ratio": 1.5492957746478873, "no_speech_prob": 1.2605813935806509e-05}, {"id": 31, "seek": 16368, "start": 182.60000000000002, "end": 187.36, "text": " and then adding B to get 165.", "tokens": [50364, 400, 309, 4523, 484, 300, 498, 291, 645, 281, 14722, 1176, 6915, 316, 25167, 343, 1804, 363, 11, 300, 486, 1874, 50782, 50782, 294, 613, 1045, 3547, 13, 50922, 50922, 400, 300, 311, 40610, 538, 1940, 264, 4846, 4111, 4190, 293, 30955, 300, 538, 264, 700, 7738, 51310, 51310, 293, 550, 5127, 363, 281, 483, 3165, 20, 13, 51548, 51548, 17837, 613, 4111, 4190, 11, 5893, 1674, 278, 365, 264, 1150, 7738, 300, 307, 257, 17443, 343, 17, 51826, 51826], "temperature": 0.0, "avg_logprob": -0.13642156414869355, "compression_ratio": 1.5492957746478873, "no_speech_prob": 1.2605813935806509e-05}, {"id": 32, "seek": 16368, "start": 187.36, "end": 192.92000000000002, "text": " Taking these feature values, dot producting with the second column that is a weights W2", "tokens": [50364, 400, 309, 4523, 484, 300, 498, 291, 645, 281, 14722, 1176, 6915, 316, 25167, 343, 1804, 363, 11, 300, 486, 1874, 50782, 50782, 294, 613, 1045, 3547, 13, 50922, 50922, 400, 300, 311, 40610, 538, 1940, 264, 4846, 4111, 4190, 293, 30955, 300, 538, 264, 700, 7738, 51310, 51310, 293, 550, 5127, 363, 281, 483, 3165, 20, 13, 51548, 51548, 17837, 613, 4111, 4190, 11, 5893, 1674, 278, 365, 264, 1150, 7738, 300, 307, 257, 17443, 343, 17, 51826, 51826], "temperature": 0.0, "avg_logprob": -0.13642156414869355, "compression_ratio": 1.5492957746478873, "no_speech_prob": 1.2605813935806509e-05}, {"id": 33, "seek": 19292, "start": 192.92, "end": 196.51999999999998, "text": " and adding B2 to get negative 531.", "tokens": [50364, 293, 5127, 363, 17, 281, 483, 3671, 1025, 12967, 13, 50544, 50544, 400, 613, 4111, 4190, 5893, 1674, 365, 264, 17443, 343, 18, 1804, 363, 18, 281, 483, 22016, 13, 50966, 50966, 14113, 1737, 281, 10465, 264, 960, 498, 291, 3172, 281, 3834, 1520, 613, 20448, 11, 457, 341, 51136, 51136, 2709, 291, 264, 4190, 295, 1176, 5348, 11, 1176, 4762, 11, 293, 1176, 7668, 13, 51566, 51566], "temperature": 0.0, "avg_logprob": -0.11919582911900112, "compression_ratio": 1.3559322033898304, "no_speech_prob": 5.594197773461929e-06}, {"id": 34, "seek": 19292, "start": 196.51999999999998, "end": 204.95999999999998, "text": " And these feature values dot product with the weights W3 plus B3 to get 900.", "tokens": [50364, 293, 5127, 363, 17, 281, 483, 3671, 1025, 12967, 13, 50544, 50544, 400, 613, 4111, 4190, 5893, 1674, 365, 264, 17443, 343, 18, 1804, 363, 18, 281, 483, 22016, 13, 50966, 50966, 14113, 1737, 281, 10465, 264, 960, 498, 291, 3172, 281, 3834, 1520, 613, 20448, 11, 457, 341, 51136, 51136, 2709, 291, 264, 4190, 295, 1176, 5348, 11, 1176, 4762, 11, 293, 1176, 7668, 13, 51566, 51566], "temperature": 0.0, "avg_logprob": -0.11919582911900112, "compression_ratio": 1.3559322033898304, "no_speech_prob": 5.594197773461929e-06}, {"id": 35, "seek": 19292, "start": 204.95999999999998, "end": 208.35999999999999, "text": " Feel free to pause the video if you wish to double check these calculations, but this", "tokens": [50364, 293, 5127, 363, 17, 281, 483, 3671, 1025, 12967, 13, 50544, 50544, 400, 613, 4111, 4190, 5893, 1674, 365, 264, 17443, 343, 18, 1804, 363, 18, 281, 483, 22016, 13, 50966, 50966, 14113, 1737, 281, 10465, 264, 960, 498, 291, 3172, 281, 3834, 1520, 613, 20448, 11, 457, 341, 51136, 51136, 2709, 291, 264, 4190, 295, 1176, 5348, 11, 1176, 4762, 11, 293, 1176, 7668, 13, 51566, 51566], "temperature": 0.0, "avg_logprob": -0.11919582911900112, "compression_ratio": 1.3559322033898304, "no_speech_prob": 5.594197773461929e-06}, {"id": 36, "seek": 19292, "start": 208.35999999999999, "end": 216.95999999999998, "text": " gives you the values of Z11, Z12, and Z13.", "tokens": [50364, 293, 5127, 363, 17, 281, 483, 3671, 1025, 12967, 13, 50544, 50544, 400, 613, 4111, 4190, 5893, 1674, 365, 264, 17443, 343, 18, 1804, 363, 18, 281, 483, 22016, 13, 50966, 50966, 14113, 1737, 281, 10465, 264, 960, 498, 291, 3172, 281, 3834, 1520, 613, 20448, 11, 457, 341, 51136, 51136, 2709, 291, 264, 4190, 295, 1176, 5348, 11, 1176, 4762, 11, 293, 1176, 7668, 13, 51566, 51566], "temperature": 0.0, "avg_logprob": -0.11919582911900112, "compression_ratio": 1.3559322033898304, "no_speech_prob": 5.594197773461929e-06}, {"id": 37, "seek": 21696, "start": 216.96, "end": 223.20000000000002, "text": " And then finally, if the function G applies the sigmoid function to these three numbers", "tokens": [50364, 400, 550, 2721, 11, 498, 264, 2445, 460, 13165, 264, 4556, 3280, 327, 2445, 281, 613, 1045, 3547, 50676, 50676, 4478, 12, 3711, 11, 300, 341, 13165, 264, 4556, 3280, 327, 2445, 281, 3165, 20, 11, 281, 3671, 1025, 12967, 11, 293, 281, 22016, 11, 51000, 51000, 550, 291, 917, 493, 365, 316, 6915, 460, 295, 341, 8141, 1176, 5314, 493, 885, 21055, 13, 51382, 51382, 400, 309, 311, 21055, 570, 4556, 3280, 327, 295, 3165, 20, 307, 370, 1998, 281, 502, 300, 11, 291, 458, 11, 493, 281, 29054, 51660, 51660], "temperature": 0.0, "avg_logprob": -0.1641931229449333, "compression_ratio": 1.6176470588235294, "no_speech_prob": 7.889005246397574e-06}, {"id": 38, "seek": 21696, "start": 223.20000000000002, "end": 229.68, "text": " element-wise, that this applies the sigmoid function to 165, to negative 531, and to 900,", "tokens": [50364, 400, 550, 2721, 11, 498, 264, 2445, 460, 13165, 264, 4556, 3280, 327, 2445, 281, 613, 1045, 3547, 50676, 50676, 4478, 12, 3711, 11, 300, 341, 13165, 264, 4556, 3280, 327, 2445, 281, 3165, 20, 11, 281, 3671, 1025, 12967, 11, 293, 281, 22016, 11, 51000, 51000, 550, 291, 917, 493, 365, 316, 6915, 460, 295, 341, 8141, 1176, 5314, 493, 885, 21055, 13, 51382, 51382, 400, 309, 311, 21055, 570, 4556, 3280, 327, 295, 3165, 20, 307, 370, 1998, 281, 502, 300, 11, 291, 458, 11, 493, 281, 29054, 51660, 51660], "temperature": 0.0, "avg_logprob": -0.1641931229449333, "compression_ratio": 1.6176470588235294, "no_speech_prob": 7.889005246397574e-06}, {"id": 39, "seek": 21696, "start": 229.68, "end": 237.32, "text": " then you end up with A equals G of this matrix Z ends up being 101.", "tokens": [50364, 400, 550, 2721, 11, 498, 264, 2445, 460, 13165, 264, 4556, 3280, 327, 2445, 281, 613, 1045, 3547, 50676, 50676, 4478, 12, 3711, 11, 300, 341, 13165, 264, 4556, 3280, 327, 2445, 281, 3165, 20, 11, 281, 3671, 1025, 12967, 11, 293, 281, 22016, 11, 51000, 51000, 550, 291, 917, 493, 365, 316, 6915, 460, 295, 341, 8141, 1176, 5314, 493, 885, 21055, 13, 51382, 51382, 400, 309, 311, 21055, 570, 4556, 3280, 327, 295, 3165, 20, 307, 370, 1998, 281, 502, 300, 11, 291, 458, 11, 493, 281, 29054, 51660, 51660], "temperature": 0.0, "avg_logprob": -0.1641931229449333, "compression_ratio": 1.6176470588235294, "no_speech_prob": 7.889005246397574e-06}, {"id": 40, "seek": 21696, "start": 237.32, "end": 242.88, "text": " And it's 101 because sigmoid of 165 is so close to 1 that, you know, up to numerical", "tokens": [50364, 400, 550, 2721, 11, 498, 264, 2445, 460, 13165, 264, 4556, 3280, 327, 2445, 281, 613, 1045, 3547, 50676, 50676, 4478, 12, 3711, 11, 300, 341, 13165, 264, 4556, 3280, 327, 2445, 281, 3165, 20, 11, 281, 3671, 1025, 12967, 11, 293, 281, 22016, 11, 51000, 51000, 550, 291, 917, 493, 365, 316, 6915, 460, 295, 341, 8141, 1176, 5314, 493, 885, 21055, 13, 51382, 51382, 400, 309, 311, 21055, 570, 4556, 3280, 327, 295, 3165, 20, 307, 370, 1998, 281, 502, 300, 11, 291, 458, 11, 493, 281, 29054, 51660, 51660], "temperature": 0.0, "avg_logprob": -0.1641931229449333, "compression_ratio": 1.6176470588235294, "no_speech_prob": 7.889005246397574e-06}, {"id": 41, "seek": 24288, "start": 242.88, "end": 247.48, "text": " round off is basically 1 and these are basically 0 and 1.", "tokens": [50364, 3098, 766, 307, 1936, 502, 293, 613, 366, 1936, 1958, 293, 502, 13, 50594, 50594, 823, 718, 311, 574, 412, 577, 291, 4445, 341, 294, 3089, 13, 50760, 50760, 316, 25167, 307, 2681, 281, 341, 11, 307, 341, 502, 538, 568, 10225, 295, 5080, 22, 13, 51086, 51086, 440, 8141, 343, 307, 341, 568, 538, 805, 8141, 293, 363, 307, 341, 502, 538, 805, 8141, 13, 51498, 51498, 400, 370, 264, 636, 291, 393, 4445, 337, 2365, 294, 264, 4583, 307, 18011, 4846, 316, 25167, 343, 33, 51848, 51848], "temperature": 0.0, "avg_logprob": -0.18776120196331988, "compression_ratio": 1.6666666666666667, "no_speech_prob": 1.012958546198206e-05}, {"id": 42, "seek": 24288, "start": 247.48, "end": 250.79999999999998, "text": " Now let's look at how you implement this in code.", "tokens": [50364, 3098, 766, 307, 1936, 502, 293, 613, 366, 1936, 1958, 293, 502, 13, 50594, 50594, 823, 718, 311, 574, 412, 577, 291, 4445, 341, 294, 3089, 13, 50760, 50760, 316, 25167, 307, 2681, 281, 341, 11, 307, 341, 502, 538, 568, 10225, 295, 5080, 22, 13, 51086, 51086, 440, 8141, 343, 307, 341, 568, 538, 805, 8141, 293, 363, 307, 341, 502, 538, 805, 8141, 13, 51498, 51498, 400, 370, 264, 636, 291, 393, 4445, 337, 2365, 294, 264, 4583, 307, 18011, 4846, 316, 25167, 343, 33, 51848, 51848], "temperature": 0.0, "avg_logprob": -0.18776120196331988, "compression_ratio": 1.6666666666666667, "no_speech_prob": 1.012958546198206e-05}, {"id": 43, "seek": 24288, "start": 250.79999999999998, "end": 257.32, "text": " A transpose is equal to this, is this 1 by 2 array of 217.", "tokens": [50364, 3098, 766, 307, 1936, 502, 293, 613, 366, 1936, 1958, 293, 502, 13, 50594, 50594, 823, 718, 311, 574, 412, 577, 291, 4445, 341, 294, 3089, 13, 50760, 50760, 316, 25167, 307, 2681, 281, 341, 11, 307, 341, 502, 538, 568, 10225, 295, 5080, 22, 13, 51086, 51086, 440, 8141, 343, 307, 341, 568, 538, 805, 8141, 293, 363, 307, 341, 502, 538, 805, 8141, 13, 51498, 51498, 400, 370, 264, 636, 291, 393, 4445, 337, 2365, 294, 264, 4583, 307, 18011, 4846, 316, 25167, 343, 33, 51848, 51848], "temperature": 0.0, "avg_logprob": -0.18776120196331988, "compression_ratio": 1.6666666666666667, "no_speech_prob": 1.012958546198206e-05}, {"id": 44, "seek": 24288, "start": 257.32, "end": 265.56, "text": " The matrix W is this 2 by 3 matrix and B is this 1 by 3 matrix.", "tokens": [50364, 3098, 766, 307, 1936, 502, 293, 613, 366, 1936, 1958, 293, 502, 13, 50594, 50594, 823, 718, 311, 574, 412, 577, 291, 4445, 341, 294, 3089, 13, 50760, 50760, 316, 25167, 307, 2681, 281, 341, 11, 307, 341, 502, 538, 568, 10225, 295, 5080, 22, 13, 51086, 51086, 440, 8141, 343, 307, 341, 568, 538, 805, 8141, 293, 363, 307, 341, 502, 538, 805, 8141, 13, 51498, 51498, 400, 370, 264, 636, 291, 393, 4445, 337, 2365, 294, 264, 4583, 307, 18011, 4846, 316, 25167, 343, 33, 51848, 51848], "temperature": 0.0, "avg_logprob": -0.18776120196331988, "compression_ratio": 1.6666666666666667, "no_speech_prob": 1.012958546198206e-05}, {"id": 45, "seek": 24288, "start": 265.56, "end": 272.56, "text": " And so the way you can implement for prop in the layer is dense input A transpose WB", "tokens": [50364, 3098, 766, 307, 1936, 502, 293, 613, 366, 1936, 1958, 293, 502, 13, 50594, 50594, 823, 718, 311, 574, 412, 577, 291, 4445, 341, 294, 3089, 13, 50760, 50760, 316, 25167, 307, 2681, 281, 341, 11, 307, 341, 502, 538, 568, 10225, 295, 5080, 22, 13, 51086, 51086, 440, 8141, 343, 307, 341, 568, 538, 805, 8141, 293, 363, 307, 341, 502, 538, 805, 8141, 13, 51498, 51498, 400, 370, 264, 636, 291, 393, 4445, 337, 2365, 294, 264, 4583, 307, 18011, 4846, 316, 25167, 343, 33, 51848, 51848], "temperature": 0.0, "avg_logprob": -0.18776120196331988, "compression_ratio": 1.6666666666666667, "no_speech_prob": 1.012958546198206e-05}, {"id": 46, "seek": 27256, "start": 272.56, "end": 278.4, "text": " is equal to Z equals matmul A transpose times W plus B.", "tokens": [50364, 307, 2681, 281, 1176, 6915, 3803, 76, 425, 316, 25167, 1413, 343, 1804, 363, 13, 50656, 50656, 407, 300, 445, 704, 17988, 341, 1622, 295, 3089, 13, 50840, 50840, 400, 550, 316, 484, 11, 300, 307, 264, 5598, 295, 341, 4583, 11, 307, 2681, 281, 460, 11, 264, 24433, 2445, 51228, 51228, 6456, 4478, 12, 3711, 281, 341, 8141, 1176, 13, 51464, 51464, 400, 291, 2736, 316, 484, 293, 300, 2709, 291, 341, 2158, 13, 51718, 51718], "temperature": 0.0, "avg_logprob": -0.13294462614421604, "compression_ratio": 1.5359116022099448, "no_speech_prob": 8.664502274768893e-06}, {"id": 47, "seek": 27256, "start": 278.4, "end": 282.08, "text": " So that just implements this line of code.", "tokens": [50364, 307, 2681, 281, 1176, 6915, 3803, 76, 425, 316, 25167, 1413, 343, 1804, 363, 13, 50656, 50656, 407, 300, 445, 704, 17988, 341, 1622, 295, 3089, 13, 50840, 50840, 400, 550, 316, 484, 11, 300, 307, 264, 5598, 295, 341, 4583, 11, 307, 2681, 281, 460, 11, 264, 24433, 2445, 51228, 51228, 6456, 4478, 12, 3711, 281, 341, 8141, 1176, 13, 51464, 51464, 400, 291, 2736, 316, 484, 293, 300, 2709, 291, 341, 2158, 13, 51718, 51718], "temperature": 0.0, "avg_logprob": -0.13294462614421604, "compression_ratio": 1.5359116022099448, "no_speech_prob": 8.664502274768893e-06}, {"id": 48, "seek": 27256, "start": 282.08, "end": 289.84000000000003, "text": " And then A out, that is the output of this layer, is equal to G, the activation function", "tokens": [50364, 307, 2681, 281, 1176, 6915, 3803, 76, 425, 316, 25167, 1413, 343, 1804, 363, 13, 50656, 50656, 407, 300, 445, 704, 17988, 341, 1622, 295, 3089, 13, 50840, 50840, 400, 550, 316, 484, 11, 300, 307, 264, 5598, 295, 341, 4583, 11, 307, 2681, 281, 460, 11, 264, 24433, 2445, 51228, 51228, 6456, 4478, 12, 3711, 281, 341, 8141, 1176, 13, 51464, 51464, 400, 291, 2736, 316, 484, 293, 300, 2709, 291, 341, 2158, 13, 51718, 51718], "temperature": 0.0, "avg_logprob": -0.13294462614421604, "compression_ratio": 1.5359116022099448, "no_speech_prob": 8.664502274768893e-06}, {"id": 49, "seek": 27256, "start": 289.84000000000003, "end": 294.56, "text": " applied element-wise to this matrix Z.", "tokens": [50364, 307, 2681, 281, 1176, 6915, 3803, 76, 425, 316, 25167, 1413, 343, 1804, 363, 13, 50656, 50656, 407, 300, 445, 704, 17988, 341, 1622, 295, 3089, 13, 50840, 50840, 400, 550, 316, 484, 11, 300, 307, 264, 5598, 295, 341, 4583, 11, 307, 2681, 281, 460, 11, 264, 24433, 2445, 51228, 51228, 6456, 4478, 12, 3711, 281, 341, 8141, 1176, 13, 51464, 51464, 400, 291, 2736, 316, 484, 293, 300, 2709, 291, 341, 2158, 13, 51718, 51718], "temperature": 0.0, "avg_logprob": -0.13294462614421604, "compression_ratio": 1.5359116022099448, "no_speech_prob": 8.664502274768893e-06}, {"id": 50, "seek": 27256, "start": 294.56, "end": 299.64, "text": " And you return A out and that gives you this value.", "tokens": [50364, 307, 2681, 281, 1176, 6915, 3803, 76, 425, 316, 25167, 1413, 343, 1804, 363, 13, 50656, 50656, 407, 300, 445, 704, 17988, 341, 1622, 295, 3089, 13, 50840, 50840, 400, 550, 316, 484, 11, 300, 307, 264, 5598, 295, 341, 4583, 11, 307, 2681, 281, 460, 11, 264, 24433, 2445, 51228, 51228, 6456, 4478, 12, 3711, 281, 341, 8141, 1176, 13, 51464, 51464, 400, 291, 2736, 316, 484, 293, 300, 2709, 291, 341, 2158, 13, 51718, 51718], "temperature": 0.0, "avg_logprob": -0.13294462614421604, "compression_ratio": 1.5359116022099448, "no_speech_prob": 8.664502274768893e-06}, {"id": 51, "seek": 29964, "start": 299.64, "end": 304.65999999999997, "text": " In case you're comparing the slide with the slides a few videos back, there was just one", "tokens": [50364, 682, 1389, 291, 434, 15763, 264, 4137, 365, 264, 9788, 257, 1326, 2145, 646, 11, 456, 390, 445, 472, 50615, 50615, 707, 2649, 11, 597, 390, 538, 10286, 11, 264, 636, 341, 307, 12270, 294, 37624, 11, 50910, 50910, 2831, 813, 5141, 341, 7006, 1783, 83, 11, 321, 818, 309, 445, 316, 293, 2831, 813, 5141, 341, 7006, 51236, 51236, 1711, 11, 321, 645, 5141, 309, 1107, 11, 597, 307, 983, 341, 886, 307, 257, 3006, 11420, 295, 264, 3089, 13, 51654, 51654], "temperature": 0.0, "avg_logprob": -0.17268238067626954, "compression_ratio": 1.751219512195122, "no_speech_prob": 1.1478519809315912e-05}, {"id": 52, "seek": 29964, "start": 304.65999999999997, "end": 310.56, "text": " little difference, which was by convention, the way this is implemented in TensorFlow,", "tokens": [50364, 682, 1389, 291, 434, 15763, 264, 4137, 365, 264, 9788, 257, 1326, 2145, 646, 11, 456, 390, 445, 472, 50615, 50615, 707, 2649, 11, 597, 390, 538, 10286, 11, 264, 636, 341, 307, 12270, 294, 37624, 11, 50910, 50910, 2831, 813, 5141, 341, 7006, 1783, 83, 11, 321, 818, 309, 445, 316, 293, 2831, 813, 5141, 341, 7006, 51236, 51236, 1711, 11, 321, 645, 5141, 309, 1107, 11, 597, 307, 983, 341, 886, 307, 257, 3006, 11420, 295, 264, 3089, 13, 51654, 51654], "temperature": 0.0, "avg_logprob": -0.17268238067626954, "compression_ratio": 1.751219512195122, "no_speech_prob": 1.1478519809315912e-05}, {"id": 53, "seek": 29964, "start": 310.56, "end": 317.08, "text": " rather than calling this variable Xt, we call it just A and rather than calling this variable", "tokens": [50364, 682, 1389, 291, 434, 15763, 264, 4137, 365, 264, 9788, 257, 1326, 2145, 646, 11, 456, 390, 445, 472, 50615, 50615, 707, 2649, 11, 597, 390, 538, 10286, 11, 264, 636, 341, 307, 12270, 294, 37624, 11, 50910, 50910, 2831, 813, 5141, 341, 7006, 1783, 83, 11, 321, 818, 309, 445, 316, 293, 2831, 813, 5141, 341, 7006, 51236, 51236, 1711, 11, 321, 645, 5141, 309, 1107, 11, 597, 307, 983, 341, 886, 307, 257, 3006, 11420, 295, 264, 3089, 13, 51654, 51654], "temperature": 0.0, "avg_logprob": -0.17268238067626954, "compression_ratio": 1.751219512195122, "no_speech_prob": 1.1478519809315912e-05}, {"id": 54, "seek": 29964, "start": 317.08, "end": 325.44, "text": " At, we were calling it An, which is why this too is a correct implementation of the code.", "tokens": [50364, 682, 1389, 291, 434, 15763, 264, 4137, 365, 264, 9788, 257, 1326, 2145, 646, 11, 456, 390, 445, 472, 50615, 50615, 707, 2649, 11, 597, 390, 538, 10286, 11, 264, 636, 341, 307, 12270, 294, 37624, 11, 50910, 50910, 2831, 813, 5141, 341, 7006, 1783, 83, 11, 321, 818, 309, 445, 316, 293, 2831, 813, 5141, 341, 7006, 51236, 51236, 1711, 11, 321, 645, 5141, 309, 1107, 11, 597, 307, 983, 341, 886, 307, 257, 3006, 11420, 295, 264, 3089, 13, 51654, 51654], "temperature": 0.0, "avg_logprob": -0.17268238067626954, "compression_ratio": 1.751219512195122, "no_speech_prob": 1.1478519809315912e-05}, {"id": 55, "seek": 32544, "start": 325.44, "end": 331.64, "text": " And there is a convention in TensorFlow that individual examples are actually laid out", "tokens": [50364, 400, 456, 307, 257, 10286, 294, 37624, 300, 2609, 5110, 366, 767, 9897, 484, 50674, 50674, 294, 13241, 294, 264, 8141, 1783, 11, 2831, 813, 294, 264, 8141, 1783, 25167, 11, 597, 307, 983, 264, 3089, 50984, 50984, 11420, 767, 1542, 411, 341, 294, 37624, 13, 51146, 51146, 583, 341, 13948, 983, 365, 445, 257, 1326, 3876, 295, 3089, 11, 291, 393, 4445, 337, 2365, 294, 264, 51402, 51402, 18161, 3209, 293, 544, 3570, 483, 257, 2603, 3073, 10882, 570, 3803, 76, 425, 8141, 27290, 51761, 51761], "temperature": 0.0, "avg_logprob": -0.14416884304432387, "compression_ratio": 1.675, "no_speech_prob": 1.4593543937735376e-06}, {"id": 56, "seek": 32544, "start": 331.64, "end": 337.84, "text": " in rows in the matrix X, rather than in the matrix X transpose, which is why the code", "tokens": [50364, 400, 456, 307, 257, 10286, 294, 37624, 300, 2609, 5110, 366, 767, 9897, 484, 50674, 50674, 294, 13241, 294, 264, 8141, 1783, 11, 2831, 813, 294, 264, 8141, 1783, 25167, 11, 597, 307, 983, 264, 3089, 50984, 50984, 11420, 767, 1542, 411, 341, 294, 37624, 13, 51146, 51146, 583, 341, 13948, 983, 365, 445, 257, 1326, 3876, 295, 3089, 11, 291, 393, 4445, 337, 2365, 294, 264, 51402, 51402, 18161, 3209, 293, 544, 3570, 483, 257, 2603, 3073, 10882, 570, 3803, 76, 425, 8141, 27290, 51761, 51761], "temperature": 0.0, "avg_logprob": -0.14416884304432387, "compression_ratio": 1.675, "no_speech_prob": 1.4593543937735376e-06}, {"id": 57, "seek": 32544, "start": 337.84, "end": 341.08, "text": " implementation actually looks like this in TensorFlow.", "tokens": [50364, 400, 456, 307, 257, 10286, 294, 37624, 300, 2609, 5110, 366, 767, 9897, 484, 50674, 50674, 294, 13241, 294, 264, 8141, 1783, 11, 2831, 813, 294, 264, 8141, 1783, 25167, 11, 597, 307, 983, 264, 3089, 50984, 50984, 11420, 767, 1542, 411, 341, 294, 37624, 13, 51146, 51146, 583, 341, 13948, 983, 365, 445, 257, 1326, 3876, 295, 3089, 11, 291, 393, 4445, 337, 2365, 294, 264, 51402, 51402, 18161, 3209, 293, 544, 3570, 483, 257, 2603, 3073, 10882, 570, 3803, 76, 425, 8141, 27290, 51761, 51761], "temperature": 0.0, "avg_logprob": -0.14416884304432387, "compression_ratio": 1.675, "no_speech_prob": 1.4593543937735376e-06}, {"id": 58, "seek": 32544, "start": 341.08, "end": 346.2, "text": " But this explains why with just a few lines of code, you can implement for prop in the", "tokens": [50364, 400, 456, 307, 257, 10286, 294, 37624, 300, 2609, 5110, 366, 767, 9897, 484, 50674, 50674, 294, 13241, 294, 264, 8141, 1783, 11, 2831, 813, 294, 264, 8141, 1783, 25167, 11, 597, 307, 983, 264, 3089, 50984, 50984, 11420, 767, 1542, 411, 341, 294, 37624, 13, 51146, 51146, 583, 341, 13948, 983, 365, 445, 257, 1326, 3876, 295, 3089, 11, 291, 393, 4445, 337, 2365, 294, 264, 51402, 51402, 18161, 3209, 293, 544, 3570, 483, 257, 2603, 3073, 10882, 570, 3803, 76, 425, 8141, 27290, 51761, 51761], "temperature": 0.0, "avg_logprob": -0.14416884304432387, "compression_ratio": 1.675, "no_speech_prob": 1.4593543937735376e-06}, {"id": 59, "seek": 32544, "start": 346.2, "end": 353.38, "text": " neural network and moreover get a huge speed bonus because matmul matrix multiplication", "tokens": [50364, 400, 456, 307, 257, 10286, 294, 37624, 300, 2609, 5110, 366, 767, 9897, 484, 50674, 50674, 294, 13241, 294, 264, 8141, 1783, 11, 2831, 813, 294, 264, 8141, 1783, 25167, 11, 597, 307, 983, 264, 3089, 50984, 50984, 11420, 767, 1542, 411, 341, 294, 37624, 13, 51146, 51146, 583, 341, 13948, 983, 365, 445, 257, 1326, 3876, 295, 3089, 11, 291, 393, 4445, 337, 2365, 294, 264, 51402, 51402, 18161, 3209, 293, 544, 3570, 483, 257, 2603, 3073, 10882, 570, 3803, 76, 425, 8141, 27290, 51761, 51761], "temperature": 0.0, "avg_logprob": -0.14416884304432387, "compression_ratio": 1.675, "no_speech_prob": 1.4593543937735376e-06}, {"id": 60, "seek": 35338, "start": 353.38, "end": 358.54, "text": " can be done very efficiently using fast hardware.", "tokens": [50364, 393, 312, 1096, 588, 19621, 1228, 2370, 8837, 13, 50622, 50622, 400, 483, 257, 2603, 10882, 570, 4363, 10807, 366, 588, 665, 412, 18114, 8141, 27290, 50898, 50898, 1270, 382, 3803, 76, 425, 19621, 13, 51031, 51031, 663, 311, 264, 1036, 960, 295, 341, 1243, 13, 51143, 51143, 2561, 337, 13465, 365, 385, 439, 264, 636, 807, 264, 917, 295, 613, 17312, 2145, 13, 51379, 51379, 1171, 264, 1472, 295, 341, 1243, 11, 286, 1454, 291, 611, 747, 257, 574, 412, 264, 48955, 293, 264, 3124, 51581, 51581, 20339, 293, 611, 264, 17312, 20339, 281, 5380, 341, 2527, 754, 544, 8760, 13, 51847, 51847], "temperature": 0.0, "avg_logprob": -0.11589453355321344, "compression_ratio": 1.6764705882352942, "no_speech_prob": 2.6686435376177542e-05}, {"id": 61, "seek": 35338, "start": 358.54, "end": 364.06, "text": " And get a huge bonus because modern computers are very good at implementing matrix multiplication", "tokens": [50364, 393, 312, 1096, 588, 19621, 1228, 2370, 8837, 13, 50622, 50622, 400, 483, 257, 2603, 10882, 570, 4363, 10807, 366, 588, 665, 412, 18114, 8141, 27290, 50898, 50898, 1270, 382, 3803, 76, 425, 19621, 13, 51031, 51031, 663, 311, 264, 1036, 960, 295, 341, 1243, 13, 51143, 51143, 2561, 337, 13465, 365, 385, 439, 264, 636, 807, 264, 917, 295, 613, 17312, 2145, 13, 51379, 51379, 1171, 264, 1472, 295, 341, 1243, 11, 286, 1454, 291, 611, 747, 257, 574, 412, 264, 48955, 293, 264, 3124, 51581, 51581, 20339, 293, 611, 264, 17312, 20339, 281, 5380, 341, 2527, 754, 544, 8760, 13, 51847, 51847], "temperature": 0.0, "avg_logprob": -0.11589453355321344, "compression_ratio": 1.6764705882352942, "no_speech_prob": 2.6686435376177542e-05}, {"id": 62, "seek": 35338, "start": 364.06, "end": 366.71999999999997, "text": " such as matmul efficiently.", "tokens": [50364, 393, 312, 1096, 588, 19621, 1228, 2370, 8837, 13, 50622, 50622, 400, 483, 257, 2603, 10882, 570, 4363, 10807, 366, 588, 665, 412, 18114, 8141, 27290, 50898, 50898, 1270, 382, 3803, 76, 425, 19621, 13, 51031, 51031, 663, 311, 264, 1036, 960, 295, 341, 1243, 13, 51143, 51143, 2561, 337, 13465, 365, 385, 439, 264, 636, 807, 264, 917, 295, 613, 17312, 2145, 13, 51379, 51379, 1171, 264, 1472, 295, 341, 1243, 11, 286, 1454, 291, 611, 747, 257, 574, 412, 264, 48955, 293, 264, 3124, 51581, 51581, 20339, 293, 611, 264, 17312, 20339, 281, 5380, 341, 2527, 754, 544, 8760, 13, 51847, 51847], "temperature": 0.0, "avg_logprob": -0.11589453355321344, "compression_ratio": 1.6764705882352942, "no_speech_prob": 2.6686435376177542e-05}, {"id": 63, "seek": 35338, "start": 366.71999999999997, "end": 368.96, "text": " That's the last video of this week.", "tokens": [50364, 393, 312, 1096, 588, 19621, 1228, 2370, 8837, 13, 50622, 50622, 400, 483, 257, 2603, 10882, 570, 4363, 10807, 366, 588, 665, 412, 18114, 8141, 27290, 50898, 50898, 1270, 382, 3803, 76, 425, 19621, 13, 51031, 51031, 663, 311, 264, 1036, 960, 295, 341, 1243, 13, 51143, 51143, 2561, 337, 13465, 365, 385, 439, 264, 636, 807, 264, 917, 295, 613, 17312, 2145, 13, 51379, 51379, 1171, 264, 1472, 295, 341, 1243, 11, 286, 1454, 291, 611, 747, 257, 574, 412, 264, 48955, 293, 264, 3124, 51581, 51581, 20339, 293, 611, 264, 17312, 20339, 281, 5380, 341, 2527, 754, 544, 8760, 13, 51847, 51847], "temperature": 0.0, "avg_logprob": -0.11589453355321344, "compression_ratio": 1.6764705882352942, "no_speech_prob": 2.6686435376177542e-05}, {"id": 64, "seek": 35338, "start": 368.96, "end": 373.68, "text": " Thanks for sticking with me all the way through the end of these optional videos.", "tokens": [50364, 393, 312, 1096, 588, 19621, 1228, 2370, 8837, 13, 50622, 50622, 400, 483, 257, 2603, 10882, 570, 4363, 10807, 366, 588, 665, 412, 18114, 8141, 27290, 50898, 50898, 1270, 382, 3803, 76, 425, 19621, 13, 51031, 51031, 663, 311, 264, 1036, 960, 295, 341, 1243, 13, 51143, 51143, 2561, 337, 13465, 365, 385, 439, 264, 636, 807, 264, 917, 295, 613, 17312, 2145, 13, 51379, 51379, 1171, 264, 1472, 295, 341, 1243, 11, 286, 1454, 291, 611, 747, 257, 574, 412, 264, 48955, 293, 264, 3124, 51581, 51581, 20339, 293, 611, 264, 17312, 20339, 281, 5380, 341, 2527, 754, 544, 8760, 13, 51847, 51847], "temperature": 0.0, "avg_logprob": -0.11589453355321344, "compression_ratio": 1.6764705882352942, "no_speech_prob": 2.6686435376177542e-05}, {"id": 65, "seek": 35338, "start": 373.68, "end": 377.71999999999997, "text": " For the rest of this week, I hope you also take a look at the quizzes and the practice", "tokens": [50364, 393, 312, 1096, 588, 19621, 1228, 2370, 8837, 13, 50622, 50622, 400, 483, 257, 2603, 10882, 570, 4363, 10807, 366, 588, 665, 412, 18114, 8141, 27290, 50898, 50898, 1270, 382, 3803, 76, 425, 19621, 13, 51031, 51031, 663, 311, 264, 1036, 960, 295, 341, 1243, 13, 51143, 51143, 2561, 337, 13465, 365, 385, 439, 264, 636, 807, 264, 917, 295, 613, 17312, 2145, 13, 51379, 51379, 1171, 264, 1472, 295, 341, 1243, 11, 286, 1454, 291, 611, 747, 257, 574, 412, 264, 48955, 293, 264, 3124, 51581, 51581, 20339, 293, 611, 264, 17312, 20339, 281, 5380, 341, 2527, 754, 544, 8760, 13, 51847, 51847], "temperature": 0.0, "avg_logprob": -0.11589453355321344, "compression_ratio": 1.6764705882352942, "no_speech_prob": 2.6686435376177542e-05}, {"id": 66, "seek": 35338, "start": 377.71999999999997, "end": 383.04, "text": " labs and also the optional labs to exercise this material even more deeply.", "tokens": [50364, 393, 312, 1096, 588, 19621, 1228, 2370, 8837, 13, 50622, 50622, 400, 483, 257, 2603, 10882, 570, 4363, 10807, 366, 588, 665, 412, 18114, 8141, 27290, 50898, 50898, 1270, 382, 3803, 76, 425, 19621, 13, 51031, 51031, 663, 311, 264, 1036, 960, 295, 341, 1243, 13, 51143, 51143, 2561, 337, 13465, 365, 385, 439, 264, 636, 807, 264, 917, 295, 613, 17312, 2145, 13, 51379, 51379, 1171, 264, 1472, 295, 341, 1243, 11, 286, 1454, 291, 611, 747, 257, 574, 412, 264, 48955, 293, 264, 3124, 51581, 51581, 20339, 293, 611, 264, 17312, 20339, 281, 5380, 341, 2527, 754, 544, 8760, 13, 51847, 51847], "temperature": 0.0, "avg_logprob": -0.11589453355321344, "compression_ratio": 1.6764705882352942, "no_speech_prob": 2.6686435376177542e-05}, {"id": 67, "seek": 38304, "start": 383.04, "end": 387.40000000000003, "text": " You now know how to do inference and for prop in a neural network, which I think is really", "tokens": [50364, 509, 586, 458, 577, 281, 360, 38253, 293, 337, 2365, 294, 257, 18161, 3209, 11, 597, 286, 519, 307, 534, 50582, 50582, 1627, 13, 50632, 50632, 407, 13568, 13, 50682, 50682, 2381, 291, 362, 2780, 807, 264, 48955, 294, 264, 20339, 11, 1767, 611, 808, 646, 293, 294, 264, 50922, 50922, 958, 1243, 11, 321, 603, 574, 412, 577, 281, 767, 3847, 257, 18161, 3209, 13, 51116, 51116, 407, 286, 574, 2128, 281, 2577, 291, 958, 1243, 13, 51252], "temperature": 0.0, "avg_logprob": -0.17390322979585623, "compression_ratio": 1.5656565656565657, "no_speech_prob": 2.463744931446854e-05}, {"id": 68, "seek": 38304, "start": 387.40000000000003, "end": 388.40000000000003, "text": " cool.", "tokens": [50364, 509, 586, 458, 577, 281, 360, 38253, 293, 337, 2365, 294, 257, 18161, 3209, 11, 597, 286, 519, 307, 534, 50582, 50582, 1627, 13, 50632, 50632, 407, 13568, 13, 50682, 50682, 2381, 291, 362, 2780, 807, 264, 48955, 294, 264, 20339, 11, 1767, 611, 808, 646, 293, 294, 264, 50922, 50922, 958, 1243, 11, 321, 603, 574, 412, 577, 281, 767, 3847, 257, 18161, 3209, 13, 51116, 51116, 407, 286, 574, 2128, 281, 2577, 291, 958, 1243, 13, 51252], "temperature": 0.0, "avg_logprob": -0.17390322979585623, "compression_ratio": 1.5656565656565657, "no_speech_prob": 2.463744931446854e-05}, {"id": 69, "seek": 38304, "start": 388.40000000000003, "end": 389.40000000000003, "text": " So congratulations.", "tokens": [50364, 509, 586, 458, 577, 281, 360, 38253, 293, 337, 2365, 294, 257, 18161, 3209, 11, 597, 286, 519, 307, 534, 50582, 50582, 1627, 13, 50632, 50632, 407, 13568, 13, 50682, 50682, 2381, 291, 362, 2780, 807, 264, 48955, 294, 264, 20339, 11, 1767, 611, 808, 646, 293, 294, 264, 50922, 50922, 958, 1243, 11, 321, 603, 574, 412, 577, 281, 767, 3847, 257, 18161, 3209, 13, 51116, 51116, 407, 286, 574, 2128, 281, 2577, 291, 958, 1243, 13, 51252], "temperature": 0.0, "avg_logprob": -0.17390322979585623, "compression_ratio": 1.5656565656565657, "no_speech_prob": 2.463744931446854e-05}, {"id": 70, "seek": 38304, "start": 389.40000000000003, "end": 394.20000000000005, "text": " After you have gone through the quizzes in the labs, please also come back and in the", "tokens": [50364, 509, 586, 458, 577, 281, 360, 38253, 293, 337, 2365, 294, 257, 18161, 3209, 11, 597, 286, 519, 307, 534, 50582, 50582, 1627, 13, 50632, 50632, 407, 13568, 13, 50682, 50682, 2381, 291, 362, 2780, 807, 264, 48955, 294, 264, 20339, 11, 1767, 611, 808, 646, 293, 294, 264, 50922, 50922, 958, 1243, 11, 321, 603, 574, 412, 577, 281, 767, 3847, 257, 18161, 3209, 13, 51116, 51116, 407, 286, 574, 2128, 281, 2577, 291, 958, 1243, 13, 51252], "temperature": 0.0, "avg_logprob": -0.17390322979585623, "compression_ratio": 1.5656565656565657, "no_speech_prob": 2.463744931446854e-05}, {"id": 71, "seek": 38304, "start": 394.20000000000005, "end": 398.08000000000004, "text": " next week, we'll look at how to actually train a neural network.", "tokens": [50364, 509, 586, 458, 577, 281, 360, 38253, 293, 337, 2365, 294, 257, 18161, 3209, 11, 597, 286, 519, 307, 534, 50582, 50582, 1627, 13, 50632, 50632, 407, 13568, 13, 50682, 50682, 2381, 291, 362, 2780, 807, 264, 48955, 294, 264, 20339, 11, 1767, 611, 808, 646, 293, 294, 264, 50922, 50922, 958, 1243, 11, 321, 603, 574, 412, 577, 281, 767, 3847, 257, 18161, 3209, 13, 51116, 51116, 407, 286, 574, 2128, 281, 2577, 291, 958, 1243, 13, 51252], "temperature": 0.0, "avg_logprob": -0.17390322979585623, "compression_ratio": 1.5656565656565657, "no_speech_prob": 2.463744931446854e-05}, {"id": 72, "seek": 39808, "start": 398.08, "end": 413.91999999999996, "text": " So I look forward to seeing you next week.", "tokens": [50364, 407, 286, 574, 2128, 281, 2577, 291, 958, 1243, 13, 51156], "temperature": 0.0, "avg_logprob": -0.40163106184739333, "compression_ratio": 0.84, "no_speech_prob": 6.218965427251533e-05}], "language": "en", "video_id": "m7xcF9jXLpc", "entity": "ML Specialization, Andrew Ng (2022)"}}
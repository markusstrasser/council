{"video_id": "pzxxgEZkdLM", "title": "5.7 Multiclass Classification  | Softmax --[Machine Learning | Andrew Ng]", "description": "Second Course:\nAdvanced Learning Algorithms.\n\n\nIf you liked the content please subscribe and put a little blue thumb.\nTake heart!", "author": "Machine Learning", "keywords": [], "channel_url": "https://www.youtube.com/channel/UClG5HEAJJFOavT_UolqYROQ", "length": 692, "views": 100, "publish_date": "11/04/2022", "timestamp": 1661472000, "entity": "ML Specialization, Andrew Ng (2022)", "transcript": {"text": " The softmax regression algorithm is a generalization of logistic regression, which is a binary classification algorithm to the multi-cost classification context. Let's take a look at how it works. Recall that logistic regression applies when y can take on two possible output values, either 0 or 1. And the way it computes its output is, you would first calculate z equals w dot product with x plus b, and then you would compute what I'm going to call here a equals g of z, which is a sigmoid function applied to z. And we interpreted this as logistic regression's estimate of the probability of y being equal to 1, given those input features x. Now, quick quiz question. If the probability of y equals 1 is 0.71, then what is the probability that y is equal to 0? Well, the chance of y being 1 and the chance of y being 0, they've got to add up to 1, right? So there's a 71% chance of it being 1. There has to be a 29% or a 0.29 chance of it being equal to 0. So to embellish logistic regression a little bit in order to set us up for the generalization to softmax regression, I'm going to think of logistic regression as actually computing two numbers. First, a 1, which is this quantity that we had previously of the chance of y being equal to 1, given x, and second, I'm going to think of logistic regression as also computing a 2, which is 1 minus this, which is just the chance of y being equal to 0, given the input features x. And so a 1 and a 2, of course, have to add up to 1. Let's now generalize this to softmax regression. And I'm going to do this with a concrete example of when y can take on four possible outputs. So y can take on the values 1, 2, 3, or 4. Here's what softmax regression will do. It will compute z1 as w1 dot product with x plus b1, and then z2 equals w2 dot product with x plus b2, and so on for z3 and z4. Here w1, w2, w3, w4, as well as b1, b2, b3, b4, these are the parameters of softmax regression. Next, here's the formula for softmax regression. We'll compute a1 equals e to the z1 divided by e to the z1 plus e to the z2 plus e to the z3 plus e to the z4. And a1 will be interpreted as the average estimate of the chance of y being equal to 1, given the input features x. Then the formula for softmax regression will compute a2 equals e to the z2 divided by the same denominator, e to the z1 plus e to the z2 plus e to the z3 plus e to the z4, and will interpret a2 as the average estimate of the chance that y is equal to 2, given the input features x. And similarly for a3, where here the numerator is now e to the z3 divided by the same denominator, that's the estimated chance of y being equal to 3, and similarly a4 takes on this expression. Whereas on the left, we wrote down the specification for the logistic regression model, these equations on the right are our specification for the softmax regression model. It has parameters w1 through w4 and b1 through b4, and if you can learn appropriate choices for all these parameters, then this gives you a way of predicting what's the chance of y being 1, 2, 3 or 4, given a set of input features x. Quick quiz, let's say you run softmax regression on a new input x, and you find that a1 is 0.30, a2 is 0.20, a3 is 0.15. What do you think a4 will be? Why don't you take a look at this quiz and see if you can figure out the right answer. So you might have realized that because the chance of y taking on the values of 1, 2, 3 or 4, they have to add up to 1, a4, the chance of y being equal to 4, has to be 0.15. So 0.35, which is 1 minus 0.3 minus 0.2 minus 0.15. So here I wrote down the formulas for softmax regression in the case of 4 possible outputs, and let's now write down the formula for the general case for softmax regression. In the general case, y can take on n possible values, so y can be 1, 2, 3 and so on up to n. In that case, softmax regression will compute zj equals wj dot product with x plus bj, where now the parameters of softmax regression are w1, w2 through wn, as well as b1, b2 through bn. And then finally it will compute aj equals e to the zj divided by sum from k equals 1 to n of e to the z sub k. Well here I'm using another variable k to index the summation, because here j refers to a specific fixed number like j equals 1. aj is interpreted as the model's estimate that y is equal to j given the input features x. And notice that by construction of this formula, if you add up a1, a2 all the way through an, these numbers always will end up adding up to 1. So we specified how you would compute the softmax regression model. And I won't prove it in this video, but it turns out that if you apply softmax regression with n equals 2, so there are only two possible output classes, then softmax regression ends up computing basically the same thing as logistic regression. The parameters end up being a little bit different, but it ends up reducing to a logistic regression model. But that's why the softmax regression model is a generalization of logistic regression. Having defined how softmax regression computes its outputs, let's now take a look at how to specify the cost function for softmax regression. Recall for logistic regression, this is what we had. We said z is equal to this, and then I wrote earlier that a1 is g of z, it was interpreted as the probability that y is equal to 1. And we also wrote a2 is the probability that y is equal to clause 0. So previously we had written the loss of logistic regression as negative y log a1 minus 1 minus y log 1 minus a1. But 1 minus a1 is also equal to just a2, because a2 is 1 minus a1 according to this expression over here. So I can rewrite or simplify the loss for logistic regression a little bit to be negative y log a1 minus 1 minus y log of a2. And in other words, the loss if y is equal to 1 is negative log a1, and if y is equal to 0, then the loss is negative log a2. And then same as before, the cost function for all the parameters in the model is the average loss, average over the entire training set. So that was the cost function for logistic regression. Let's write down the cost function that is conventionally used for softmax regression. Recall that these are the equations we use for softmax regression. The loss we're going to use for softmax regression is just this. The loss for if the algorithm outputs a1 through an, and the ground truth label is y, is if y equals 1, the loss is negative log a1, so it's negative log of the probability that it thought y was equal to 1. Or if y is equal to 2, then the loss I'm going to define as negative log a2. So if y is equal to 2, the loss of the algorithm on this example is negative log of the probability it thought y was equal to 2. And so on all the way down to if y is equal to n, then the loss is negative log of an. And to illustrate what this is doing, if y is equal to j, then the loss is negative log of aj, and that's what this function looks like. Negative log of aj is a curve that looks like this. And so if aj was very close to 1, then you'd be on this part of the curve and the loss would be very small. But if it thought, say, aj had only a 50% chance, then the loss gets a little bit bigger. And the smaller aj is, the bigger the loss. And so this incentivizes the algorithm to make aj as large as possible, as close to 1 as possible, because whatever the actual value y was, you want the algorithm to say, hopefully, that the chance of y being that value was pretty large. Notice that in this loss function, y in each training example can take on only one value, and so you end up computing this negative log of aj only for one value of aj, which is whatever was the actual value of y equals j in that particular training example. For example, if y was equal to 2, you end up computing negative log of a2, but not any of the other negative log of a1 or the other terms here. So that's the form of the model, as well as the cost function for softmax regression. And if you were to train this model, you can start to build multi-class classification algorithms. And what we'd like to do next is take this softmax regression model and fit it into a neural network so that you're going to do something even better, which is to train a neural network for multi-class classification. Let's go through that in the next video.", "segments": [{"id": 0, "seek": 0, "start": 0.0, "end": 8.48, "text": " The softmax regression algorithm is a generalization of logistic regression, which is a binary", "tokens": [50364, 440, 2787, 41167, 24590, 9284, 307, 257, 2674, 2144, 295, 3565, 3142, 24590, 11, 597, 307, 257, 17434, 50788, 50788, 21538, 9284, 281, 264, 4825, 12, 27718, 21538, 4319, 13, 51014, 51014, 961, 311, 747, 257, 574, 412, 577, 309, 1985, 13, 51174, 51174, 9647, 336, 300, 3565, 3142, 24590, 13165, 562, 288, 393, 747, 322, 732, 1944, 5598, 4190, 11, 51538, 51538, 2139, 1958, 420, 502, 13, 51686, 51686], "temperature": 0.0, "avg_logprob": -0.2396829922993978, "compression_ratio": 1.6108108108108108, "no_speech_prob": 0.010324439033865929}, {"id": 1, "seek": 0, "start": 8.48, "end": 13.0, "text": " classification algorithm to the multi-cost classification context.", "tokens": [50364, 440, 2787, 41167, 24590, 9284, 307, 257, 2674, 2144, 295, 3565, 3142, 24590, 11, 597, 307, 257, 17434, 50788, 50788, 21538, 9284, 281, 264, 4825, 12, 27718, 21538, 4319, 13, 51014, 51014, 961, 311, 747, 257, 574, 412, 577, 309, 1985, 13, 51174, 51174, 9647, 336, 300, 3565, 3142, 24590, 13165, 562, 288, 393, 747, 322, 732, 1944, 5598, 4190, 11, 51538, 51538, 2139, 1958, 420, 502, 13, 51686, 51686], "temperature": 0.0, "avg_logprob": -0.2396829922993978, "compression_ratio": 1.6108108108108108, "no_speech_prob": 0.010324439033865929}, {"id": 2, "seek": 0, "start": 13.0, "end": 16.2, "text": " Let's take a look at how it works.", "tokens": [50364, 440, 2787, 41167, 24590, 9284, 307, 257, 2674, 2144, 295, 3565, 3142, 24590, 11, 597, 307, 257, 17434, 50788, 50788, 21538, 9284, 281, 264, 4825, 12, 27718, 21538, 4319, 13, 51014, 51014, 961, 311, 747, 257, 574, 412, 577, 309, 1985, 13, 51174, 51174, 9647, 336, 300, 3565, 3142, 24590, 13165, 562, 288, 393, 747, 322, 732, 1944, 5598, 4190, 11, 51538, 51538, 2139, 1958, 420, 502, 13, 51686, 51686], "temperature": 0.0, "avg_logprob": -0.2396829922993978, "compression_ratio": 1.6108108108108108, "no_speech_prob": 0.010324439033865929}, {"id": 3, "seek": 0, "start": 16.2, "end": 23.48, "text": " Recall that logistic regression applies when y can take on two possible output values,", "tokens": [50364, 440, 2787, 41167, 24590, 9284, 307, 257, 2674, 2144, 295, 3565, 3142, 24590, 11, 597, 307, 257, 17434, 50788, 50788, 21538, 9284, 281, 264, 4825, 12, 27718, 21538, 4319, 13, 51014, 51014, 961, 311, 747, 257, 574, 412, 577, 309, 1985, 13, 51174, 51174, 9647, 336, 300, 3565, 3142, 24590, 13165, 562, 288, 393, 747, 322, 732, 1944, 5598, 4190, 11, 51538, 51538, 2139, 1958, 420, 502, 13, 51686, 51686], "temperature": 0.0, "avg_logprob": -0.2396829922993978, "compression_ratio": 1.6108108108108108, "no_speech_prob": 0.010324439033865929}, {"id": 4, "seek": 0, "start": 23.48, "end": 26.44, "text": " either 0 or 1.", "tokens": [50364, 440, 2787, 41167, 24590, 9284, 307, 257, 2674, 2144, 295, 3565, 3142, 24590, 11, 597, 307, 257, 17434, 50788, 50788, 21538, 9284, 281, 264, 4825, 12, 27718, 21538, 4319, 13, 51014, 51014, 961, 311, 747, 257, 574, 412, 577, 309, 1985, 13, 51174, 51174, 9647, 336, 300, 3565, 3142, 24590, 13165, 562, 288, 393, 747, 322, 732, 1944, 5598, 4190, 11, 51538, 51538, 2139, 1958, 420, 502, 13, 51686, 51686], "temperature": 0.0, "avg_logprob": -0.2396829922993978, "compression_ratio": 1.6108108108108108, "no_speech_prob": 0.010324439033865929}, {"id": 5, "seek": 2644, "start": 26.44, "end": 32.56, "text": " And the way it computes its output is, you would first calculate z equals w dot product", "tokens": [50364, 400, 264, 636, 309, 715, 1819, 1080, 5598, 307, 11, 291, 576, 700, 8873, 710, 6915, 261, 5893, 1674, 50670, 50670, 365, 2031, 1804, 272, 11, 293, 550, 291, 576, 14722, 437, 286, 478, 516, 281, 818, 510, 257, 6915, 290, 295, 50994, 50994, 710, 11, 597, 307, 257, 4556, 3280, 327, 2445, 6456, 281, 710, 13, 51212, 51212, 400, 321, 26749, 341, 382, 3565, 3142, 24590, 311, 12539, 295, 264, 8482, 295, 288, 885, 2681, 51506, 51506, 281, 502, 11, 2212, 729, 4846, 4122, 2031, 13, 51646, 51646], "temperature": 0.0, "avg_logprob": -0.15979162153306897, "compression_ratio": 1.5446428571428572, "no_speech_prob": 1.4285130419011693e-05}, {"id": 6, "seek": 2644, "start": 32.56, "end": 39.04, "text": " with x plus b, and then you would compute what I'm going to call here a equals g of", "tokens": [50364, 400, 264, 636, 309, 715, 1819, 1080, 5598, 307, 11, 291, 576, 700, 8873, 710, 6915, 261, 5893, 1674, 50670, 50670, 365, 2031, 1804, 272, 11, 293, 550, 291, 576, 14722, 437, 286, 478, 516, 281, 818, 510, 257, 6915, 290, 295, 50994, 50994, 710, 11, 597, 307, 257, 4556, 3280, 327, 2445, 6456, 281, 710, 13, 51212, 51212, 400, 321, 26749, 341, 382, 3565, 3142, 24590, 311, 12539, 295, 264, 8482, 295, 288, 885, 2681, 51506, 51506, 281, 502, 11, 2212, 729, 4846, 4122, 2031, 13, 51646, 51646], "temperature": 0.0, "avg_logprob": -0.15979162153306897, "compression_ratio": 1.5446428571428572, "no_speech_prob": 1.4285130419011693e-05}, {"id": 7, "seek": 2644, "start": 39.04, "end": 43.400000000000006, "text": " z, which is a sigmoid function applied to z.", "tokens": [50364, 400, 264, 636, 309, 715, 1819, 1080, 5598, 307, 11, 291, 576, 700, 8873, 710, 6915, 261, 5893, 1674, 50670, 50670, 365, 2031, 1804, 272, 11, 293, 550, 291, 576, 14722, 437, 286, 478, 516, 281, 818, 510, 257, 6915, 290, 295, 50994, 50994, 710, 11, 597, 307, 257, 4556, 3280, 327, 2445, 6456, 281, 710, 13, 51212, 51212, 400, 321, 26749, 341, 382, 3565, 3142, 24590, 311, 12539, 295, 264, 8482, 295, 288, 885, 2681, 51506, 51506, 281, 502, 11, 2212, 729, 4846, 4122, 2031, 13, 51646, 51646], "temperature": 0.0, "avg_logprob": -0.15979162153306897, "compression_ratio": 1.5446428571428572, "no_speech_prob": 1.4285130419011693e-05}, {"id": 8, "seek": 2644, "start": 43.400000000000006, "end": 49.28, "text": " And we interpreted this as logistic regression's estimate of the probability of y being equal", "tokens": [50364, 400, 264, 636, 309, 715, 1819, 1080, 5598, 307, 11, 291, 576, 700, 8873, 710, 6915, 261, 5893, 1674, 50670, 50670, 365, 2031, 1804, 272, 11, 293, 550, 291, 576, 14722, 437, 286, 478, 516, 281, 818, 510, 257, 6915, 290, 295, 50994, 50994, 710, 11, 597, 307, 257, 4556, 3280, 327, 2445, 6456, 281, 710, 13, 51212, 51212, 400, 321, 26749, 341, 382, 3565, 3142, 24590, 311, 12539, 295, 264, 8482, 295, 288, 885, 2681, 51506, 51506, 281, 502, 11, 2212, 729, 4846, 4122, 2031, 13, 51646, 51646], "temperature": 0.0, "avg_logprob": -0.15979162153306897, "compression_ratio": 1.5446428571428572, "no_speech_prob": 1.4285130419011693e-05}, {"id": 9, "seek": 2644, "start": 49.28, "end": 52.08, "text": " to 1, given those input features x.", "tokens": [50364, 400, 264, 636, 309, 715, 1819, 1080, 5598, 307, 11, 291, 576, 700, 8873, 710, 6915, 261, 5893, 1674, 50670, 50670, 365, 2031, 1804, 272, 11, 293, 550, 291, 576, 14722, 437, 286, 478, 516, 281, 818, 510, 257, 6915, 290, 295, 50994, 50994, 710, 11, 597, 307, 257, 4556, 3280, 327, 2445, 6456, 281, 710, 13, 51212, 51212, 400, 321, 26749, 341, 382, 3565, 3142, 24590, 311, 12539, 295, 264, 8482, 295, 288, 885, 2681, 51506, 51506, 281, 502, 11, 2212, 729, 4846, 4122, 2031, 13, 51646, 51646], "temperature": 0.0, "avg_logprob": -0.15979162153306897, "compression_ratio": 1.5446428571428572, "no_speech_prob": 1.4285130419011693e-05}, {"id": 10, "seek": 5208, "start": 52.08, "end": 57.199999999999996, "text": " Now, quick quiz question.", "tokens": [50364, 823, 11, 1702, 15450, 1168, 13, 50620, 50620, 759, 264, 8482, 295, 288, 6915, 502, 307, 1958, 13, 29985, 11, 550, 437, 307, 264, 8482, 300, 288, 307, 2681, 51092, 51092, 281, 1958, 30, 51164, 51164, 1042, 11, 264, 2931, 295, 288, 885, 502, 293, 264, 2931, 295, 288, 885, 1958, 11, 436, 600, 658, 281, 909, 493, 281, 502, 11, 51468, 51468, 558, 30, 51518, 51518, 407, 456, 311, 257, 30942, 4, 2931, 295, 309, 885, 502, 13, 51628, 51628], "temperature": 0.0, "avg_logprob": -0.19980600655797015, "compression_ratio": 1.56875, "no_speech_prob": 4.936887762596598e-06}, {"id": 11, "seek": 5208, "start": 57.199999999999996, "end": 66.64, "text": " If the probability of y equals 1 is 0.71, then what is the probability that y is equal", "tokens": [50364, 823, 11, 1702, 15450, 1168, 13, 50620, 50620, 759, 264, 8482, 295, 288, 6915, 502, 307, 1958, 13, 29985, 11, 550, 437, 307, 264, 8482, 300, 288, 307, 2681, 51092, 51092, 281, 1958, 30, 51164, 51164, 1042, 11, 264, 2931, 295, 288, 885, 502, 293, 264, 2931, 295, 288, 885, 1958, 11, 436, 600, 658, 281, 909, 493, 281, 502, 11, 51468, 51468, 558, 30, 51518, 51518, 407, 456, 311, 257, 30942, 4, 2931, 295, 309, 885, 502, 13, 51628, 51628], "temperature": 0.0, "avg_logprob": -0.19980600655797015, "compression_ratio": 1.56875, "no_speech_prob": 4.936887762596598e-06}, {"id": 12, "seek": 5208, "start": 66.64, "end": 68.08, "text": " to 0?", "tokens": [50364, 823, 11, 1702, 15450, 1168, 13, 50620, 50620, 759, 264, 8482, 295, 288, 6915, 502, 307, 1958, 13, 29985, 11, 550, 437, 307, 264, 8482, 300, 288, 307, 2681, 51092, 51092, 281, 1958, 30, 51164, 51164, 1042, 11, 264, 2931, 295, 288, 885, 502, 293, 264, 2931, 295, 288, 885, 1958, 11, 436, 600, 658, 281, 909, 493, 281, 502, 11, 51468, 51468, 558, 30, 51518, 51518, 407, 456, 311, 257, 30942, 4, 2931, 295, 309, 885, 502, 13, 51628, 51628], "temperature": 0.0, "avg_logprob": -0.19980600655797015, "compression_ratio": 1.56875, "no_speech_prob": 4.936887762596598e-06}, {"id": 13, "seek": 5208, "start": 68.08, "end": 74.16, "text": " Well, the chance of y being 1 and the chance of y being 0, they've got to add up to 1,", "tokens": [50364, 823, 11, 1702, 15450, 1168, 13, 50620, 50620, 759, 264, 8482, 295, 288, 6915, 502, 307, 1958, 13, 29985, 11, 550, 437, 307, 264, 8482, 300, 288, 307, 2681, 51092, 51092, 281, 1958, 30, 51164, 51164, 1042, 11, 264, 2931, 295, 288, 885, 502, 293, 264, 2931, 295, 288, 885, 1958, 11, 436, 600, 658, 281, 909, 493, 281, 502, 11, 51468, 51468, 558, 30, 51518, 51518, 407, 456, 311, 257, 30942, 4, 2931, 295, 309, 885, 502, 13, 51628, 51628], "temperature": 0.0, "avg_logprob": -0.19980600655797015, "compression_ratio": 1.56875, "no_speech_prob": 4.936887762596598e-06}, {"id": 14, "seek": 5208, "start": 74.16, "end": 75.16, "text": " right?", "tokens": [50364, 823, 11, 1702, 15450, 1168, 13, 50620, 50620, 759, 264, 8482, 295, 288, 6915, 502, 307, 1958, 13, 29985, 11, 550, 437, 307, 264, 8482, 300, 288, 307, 2681, 51092, 51092, 281, 1958, 30, 51164, 51164, 1042, 11, 264, 2931, 295, 288, 885, 502, 293, 264, 2931, 295, 288, 885, 1958, 11, 436, 600, 658, 281, 909, 493, 281, 502, 11, 51468, 51468, 558, 30, 51518, 51518, 407, 456, 311, 257, 30942, 4, 2931, 295, 309, 885, 502, 13, 51628, 51628], "temperature": 0.0, "avg_logprob": -0.19980600655797015, "compression_ratio": 1.56875, "no_speech_prob": 4.936887762596598e-06}, {"id": 15, "seek": 5208, "start": 75.16, "end": 77.36, "text": " So there's a 71% chance of it being 1.", "tokens": [50364, 823, 11, 1702, 15450, 1168, 13, 50620, 50620, 759, 264, 8482, 295, 288, 6915, 502, 307, 1958, 13, 29985, 11, 550, 437, 307, 264, 8482, 300, 288, 307, 2681, 51092, 51092, 281, 1958, 30, 51164, 51164, 1042, 11, 264, 2931, 295, 288, 885, 502, 293, 264, 2931, 295, 288, 885, 1958, 11, 436, 600, 658, 281, 909, 493, 281, 502, 11, 51468, 51468, 558, 30, 51518, 51518, 407, 456, 311, 257, 30942, 4, 2931, 295, 309, 885, 502, 13, 51628, 51628], "temperature": 0.0, "avg_logprob": -0.19980600655797015, "compression_ratio": 1.56875, "no_speech_prob": 4.936887762596598e-06}, {"id": 16, "seek": 7736, "start": 77.36, "end": 85.16, "text": " There has to be a 29% or a 0.29 chance of it being equal to 0.", "tokens": [50364, 821, 575, 281, 312, 257, 9413, 4, 420, 257, 1958, 13, 11871, 2931, 295, 309, 885, 2681, 281, 1958, 13, 50754, 50754, 407, 281, 846, 7100, 742, 3565, 3142, 24590, 257, 707, 857, 294, 1668, 281, 992, 505, 493, 337, 264, 2674, 2144, 51006, 51006, 281, 2787, 41167, 24590, 11, 286, 478, 516, 281, 519, 295, 3565, 3142, 24590, 382, 767, 15866, 51260, 51260, 732, 3547, 13, 51322, 51322, 2386, 11, 257, 502, 11, 597, 307, 341, 11275, 300, 321, 632, 8046, 295, 264, 2931, 295, 288, 885, 2681, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.11816837967083019, "compression_ratio": 1.5681818181818181, "no_speech_prob": 4.936843652103562e-06}, {"id": 17, "seek": 7736, "start": 85.16, "end": 90.2, "text": " So to embellish logistic regression a little bit in order to set us up for the generalization", "tokens": [50364, 821, 575, 281, 312, 257, 9413, 4, 420, 257, 1958, 13, 11871, 2931, 295, 309, 885, 2681, 281, 1958, 13, 50754, 50754, 407, 281, 846, 7100, 742, 3565, 3142, 24590, 257, 707, 857, 294, 1668, 281, 992, 505, 493, 337, 264, 2674, 2144, 51006, 51006, 281, 2787, 41167, 24590, 11, 286, 478, 516, 281, 519, 295, 3565, 3142, 24590, 382, 767, 15866, 51260, 51260, 732, 3547, 13, 51322, 51322, 2386, 11, 257, 502, 11, 597, 307, 341, 11275, 300, 321, 632, 8046, 295, 264, 2931, 295, 288, 885, 2681, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.11816837967083019, "compression_ratio": 1.5681818181818181, "no_speech_prob": 4.936843652103562e-06}, {"id": 18, "seek": 7736, "start": 90.2, "end": 95.28, "text": " to softmax regression, I'm going to think of logistic regression as actually computing", "tokens": [50364, 821, 575, 281, 312, 257, 9413, 4, 420, 257, 1958, 13, 11871, 2931, 295, 309, 885, 2681, 281, 1958, 13, 50754, 50754, 407, 281, 846, 7100, 742, 3565, 3142, 24590, 257, 707, 857, 294, 1668, 281, 992, 505, 493, 337, 264, 2674, 2144, 51006, 51006, 281, 2787, 41167, 24590, 11, 286, 478, 516, 281, 519, 295, 3565, 3142, 24590, 382, 767, 15866, 51260, 51260, 732, 3547, 13, 51322, 51322, 2386, 11, 257, 502, 11, 597, 307, 341, 11275, 300, 321, 632, 8046, 295, 264, 2931, 295, 288, 885, 2681, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.11816837967083019, "compression_ratio": 1.5681818181818181, "no_speech_prob": 4.936843652103562e-06}, {"id": 19, "seek": 7736, "start": 95.28, "end": 96.52, "text": " two numbers.", "tokens": [50364, 821, 575, 281, 312, 257, 9413, 4, 420, 257, 1958, 13, 11871, 2931, 295, 309, 885, 2681, 281, 1958, 13, 50754, 50754, 407, 281, 846, 7100, 742, 3565, 3142, 24590, 257, 707, 857, 294, 1668, 281, 992, 505, 493, 337, 264, 2674, 2144, 51006, 51006, 281, 2787, 41167, 24590, 11, 286, 478, 516, 281, 519, 295, 3565, 3142, 24590, 382, 767, 15866, 51260, 51260, 732, 3547, 13, 51322, 51322, 2386, 11, 257, 502, 11, 597, 307, 341, 11275, 300, 321, 632, 8046, 295, 264, 2931, 295, 288, 885, 2681, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.11816837967083019, "compression_ratio": 1.5681818181818181, "no_speech_prob": 4.936843652103562e-06}, {"id": 20, "seek": 7736, "start": 96.52, "end": 103.76, "text": " First, a 1, which is this quantity that we had previously of the chance of y being equal", "tokens": [50364, 821, 575, 281, 312, 257, 9413, 4, 420, 257, 1958, 13, 11871, 2931, 295, 309, 885, 2681, 281, 1958, 13, 50754, 50754, 407, 281, 846, 7100, 742, 3565, 3142, 24590, 257, 707, 857, 294, 1668, 281, 992, 505, 493, 337, 264, 2674, 2144, 51006, 51006, 281, 2787, 41167, 24590, 11, 286, 478, 516, 281, 519, 295, 3565, 3142, 24590, 382, 767, 15866, 51260, 51260, 732, 3547, 13, 51322, 51322, 2386, 11, 257, 502, 11, 597, 307, 341, 11275, 300, 321, 632, 8046, 295, 264, 2931, 295, 288, 885, 2681, 51684, 51684], "temperature": 0.0, "avg_logprob": -0.11816837967083019, "compression_ratio": 1.5681818181818181, "no_speech_prob": 4.936843652103562e-06}, {"id": 21, "seek": 10376, "start": 103.76, "end": 109.64, "text": " to 1, given x, and second, I'm going to think of logistic regression as also computing a", "tokens": [50364, 281, 502, 11, 2212, 2031, 11, 293, 1150, 11, 286, 478, 516, 281, 519, 295, 3565, 3142, 24590, 382, 611, 15866, 257, 50658, 50658, 568, 11, 597, 307, 502, 3175, 341, 11, 597, 307, 445, 264, 2931, 295, 288, 885, 2681, 281, 1958, 11, 2212, 264, 4846, 51216, 51216, 4122, 2031, 13, 51266, 51266, 400, 370, 257, 502, 293, 257, 568, 11, 295, 1164, 11, 362, 281, 909, 493, 281, 502, 13, 51518, 51518, 961, 311, 586, 2674, 1125, 341, 281, 2787, 41167, 24590, 13, 51730, 51730], "temperature": 0.0, "avg_logprob": -0.11181086636661144, "compression_ratio": 1.5, "no_speech_prob": 2.7264586606179364e-06}, {"id": 22, "seek": 10376, "start": 109.64, "end": 120.80000000000001, "text": " 2, which is 1 minus this, which is just the chance of y being equal to 0, given the input", "tokens": [50364, 281, 502, 11, 2212, 2031, 11, 293, 1150, 11, 286, 478, 516, 281, 519, 295, 3565, 3142, 24590, 382, 611, 15866, 257, 50658, 50658, 568, 11, 597, 307, 502, 3175, 341, 11, 597, 307, 445, 264, 2931, 295, 288, 885, 2681, 281, 1958, 11, 2212, 264, 4846, 51216, 51216, 4122, 2031, 13, 51266, 51266, 400, 370, 257, 502, 293, 257, 568, 11, 295, 1164, 11, 362, 281, 909, 493, 281, 502, 13, 51518, 51518, 961, 311, 586, 2674, 1125, 341, 281, 2787, 41167, 24590, 13, 51730, 51730], "temperature": 0.0, "avg_logprob": -0.11181086636661144, "compression_ratio": 1.5, "no_speech_prob": 2.7264586606179364e-06}, {"id": 23, "seek": 10376, "start": 120.80000000000001, "end": 121.80000000000001, "text": " features x.", "tokens": [50364, 281, 502, 11, 2212, 2031, 11, 293, 1150, 11, 286, 478, 516, 281, 519, 295, 3565, 3142, 24590, 382, 611, 15866, 257, 50658, 50658, 568, 11, 597, 307, 502, 3175, 341, 11, 597, 307, 445, 264, 2931, 295, 288, 885, 2681, 281, 1958, 11, 2212, 264, 4846, 51216, 51216, 4122, 2031, 13, 51266, 51266, 400, 370, 257, 502, 293, 257, 568, 11, 295, 1164, 11, 362, 281, 909, 493, 281, 502, 13, 51518, 51518, 961, 311, 586, 2674, 1125, 341, 281, 2787, 41167, 24590, 13, 51730, 51730], "temperature": 0.0, "avg_logprob": -0.11181086636661144, "compression_ratio": 1.5, "no_speech_prob": 2.7264586606179364e-06}, {"id": 24, "seek": 10376, "start": 121.80000000000001, "end": 126.84, "text": " And so a 1 and a 2, of course, have to add up to 1.", "tokens": [50364, 281, 502, 11, 2212, 2031, 11, 293, 1150, 11, 286, 478, 516, 281, 519, 295, 3565, 3142, 24590, 382, 611, 15866, 257, 50658, 50658, 568, 11, 597, 307, 502, 3175, 341, 11, 597, 307, 445, 264, 2931, 295, 288, 885, 2681, 281, 1958, 11, 2212, 264, 4846, 51216, 51216, 4122, 2031, 13, 51266, 51266, 400, 370, 257, 502, 293, 257, 568, 11, 295, 1164, 11, 362, 281, 909, 493, 281, 502, 13, 51518, 51518, 961, 311, 586, 2674, 1125, 341, 281, 2787, 41167, 24590, 13, 51730, 51730], "temperature": 0.0, "avg_logprob": -0.11181086636661144, "compression_ratio": 1.5, "no_speech_prob": 2.7264586606179364e-06}, {"id": 25, "seek": 10376, "start": 126.84, "end": 131.08, "text": " Let's now generalize this to softmax regression.", "tokens": [50364, 281, 502, 11, 2212, 2031, 11, 293, 1150, 11, 286, 478, 516, 281, 519, 295, 3565, 3142, 24590, 382, 611, 15866, 257, 50658, 50658, 568, 11, 597, 307, 502, 3175, 341, 11, 597, 307, 445, 264, 2931, 295, 288, 885, 2681, 281, 1958, 11, 2212, 264, 4846, 51216, 51216, 4122, 2031, 13, 51266, 51266, 400, 370, 257, 502, 293, 257, 568, 11, 295, 1164, 11, 362, 281, 909, 493, 281, 502, 13, 51518, 51518, 961, 311, 586, 2674, 1125, 341, 281, 2787, 41167, 24590, 13, 51730, 51730], "temperature": 0.0, "avg_logprob": -0.11181086636661144, "compression_ratio": 1.5, "no_speech_prob": 2.7264586606179364e-06}, {"id": 26, "seek": 13108, "start": 131.08, "end": 137.72000000000003, "text": " And I'm going to do this with a concrete example of when y can take on four possible outputs.", "tokens": [50364, 400, 286, 478, 516, 281, 360, 341, 365, 257, 9859, 1365, 295, 562, 288, 393, 747, 322, 1451, 1944, 23930, 13, 50696, 50696, 407, 288, 393, 747, 322, 264, 4190, 502, 11, 568, 11, 805, 11, 420, 1017, 13, 50960, 50960, 1692, 311, 437, 2787, 41167, 24590, 486, 360, 13, 51096, 51096, 467, 486, 14722, 710, 16, 382, 261, 16, 5893, 1674, 365, 2031, 1804, 272, 16, 11, 293, 550, 710, 17, 6915, 261, 17, 5893, 1674, 51562, 51562, 365, 2031, 1804, 272, 17, 11, 293, 370, 322, 337, 710, 18, 293, 710, 19, 13, 51820, 51820], "temperature": 0.0, "avg_logprob": -0.11897854853158045, "compression_ratio": 1.5431472081218274, "no_speech_prob": 1.7330443142782315e-06}, {"id": 27, "seek": 13108, "start": 137.72000000000003, "end": 143.0, "text": " So y can take on the values 1, 2, 3, or 4.", "tokens": [50364, 400, 286, 478, 516, 281, 360, 341, 365, 257, 9859, 1365, 295, 562, 288, 393, 747, 322, 1451, 1944, 23930, 13, 50696, 50696, 407, 288, 393, 747, 322, 264, 4190, 502, 11, 568, 11, 805, 11, 420, 1017, 13, 50960, 50960, 1692, 311, 437, 2787, 41167, 24590, 486, 360, 13, 51096, 51096, 467, 486, 14722, 710, 16, 382, 261, 16, 5893, 1674, 365, 2031, 1804, 272, 16, 11, 293, 550, 710, 17, 6915, 261, 17, 5893, 1674, 51562, 51562, 365, 2031, 1804, 272, 17, 11, 293, 370, 322, 337, 710, 18, 293, 710, 19, 13, 51820, 51820], "temperature": 0.0, "avg_logprob": -0.11897854853158045, "compression_ratio": 1.5431472081218274, "no_speech_prob": 1.7330443142782315e-06}, {"id": 28, "seek": 13108, "start": 143.0, "end": 145.72000000000003, "text": " Here's what softmax regression will do.", "tokens": [50364, 400, 286, 478, 516, 281, 360, 341, 365, 257, 9859, 1365, 295, 562, 288, 393, 747, 322, 1451, 1944, 23930, 13, 50696, 50696, 407, 288, 393, 747, 322, 264, 4190, 502, 11, 568, 11, 805, 11, 420, 1017, 13, 50960, 50960, 1692, 311, 437, 2787, 41167, 24590, 486, 360, 13, 51096, 51096, 467, 486, 14722, 710, 16, 382, 261, 16, 5893, 1674, 365, 2031, 1804, 272, 16, 11, 293, 550, 710, 17, 6915, 261, 17, 5893, 1674, 51562, 51562, 365, 2031, 1804, 272, 17, 11, 293, 370, 322, 337, 710, 18, 293, 710, 19, 13, 51820, 51820], "temperature": 0.0, "avg_logprob": -0.11897854853158045, "compression_ratio": 1.5431472081218274, "no_speech_prob": 1.7330443142782315e-06}, {"id": 29, "seek": 13108, "start": 145.72000000000003, "end": 155.04000000000002, "text": " It will compute z1 as w1 dot product with x plus b1, and then z2 equals w2 dot product", "tokens": [50364, 400, 286, 478, 516, 281, 360, 341, 365, 257, 9859, 1365, 295, 562, 288, 393, 747, 322, 1451, 1944, 23930, 13, 50696, 50696, 407, 288, 393, 747, 322, 264, 4190, 502, 11, 568, 11, 805, 11, 420, 1017, 13, 50960, 50960, 1692, 311, 437, 2787, 41167, 24590, 486, 360, 13, 51096, 51096, 467, 486, 14722, 710, 16, 382, 261, 16, 5893, 1674, 365, 2031, 1804, 272, 16, 11, 293, 550, 710, 17, 6915, 261, 17, 5893, 1674, 51562, 51562, 365, 2031, 1804, 272, 17, 11, 293, 370, 322, 337, 710, 18, 293, 710, 19, 13, 51820, 51820], "temperature": 0.0, "avg_logprob": -0.11897854853158045, "compression_ratio": 1.5431472081218274, "no_speech_prob": 1.7330443142782315e-06}, {"id": 30, "seek": 13108, "start": 155.04000000000002, "end": 160.20000000000002, "text": " with x plus b2, and so on for z3 and z4.", "tokens": [50364, 400, 286, 478, 516, 281, 360, 341, 365, 257, 9859, 1365, 295, 562, 288, 393, 747, 322, 1451, 1944, 23930, 13, 50696, 50696, 407, 288, 393, 747, 322, 264, 4190, 502, 11, 568, 11, 805, 11, 420, 1017, 13, 50960, 50960, 1692, 311, 437, 2787, 41167, 24590, 486, 360, 13, 51096, 51096, 467, 486, 14722, 710, 16, 382, 261, 16, 5893, 1674, 365, 2031, 1804, 272, 16, 11, 293, 550, 710, 17, 6915, 261, 17, 5893, 1674, 51562, 51562, 365, 2031, 1804, 272, 17, 11, 293, 370, 322, 337, 710, 18, 293, 710, 19, 13, 51820, 51820], "temperature": 0.0, "avg_logprob": -0.11897854853158045, "compression_ratio": 1.5431472081218274, "no_speech_prob": 1.7330443142782315e-06}, {"id": 31, "seek": 16020, "start": 160.2, "end": 170.56, "text": " Here w1, w2, w3, w4, as well as b1, b2, b3, b4, these are the parameters of softmax regression.", "tokens": [50364, 1692, 261, 16, 11, 261, 17, 11, 261, 18, 11, 261, 19, 11, 382, 731, 382, 272, 16, 11, 272, 17, 11, 272, 18, 11, 272, 19, 11, 613, 366, 264, 9834, 295, 2787, 41167, 24590, 13, 50882, 50882, 3087, 11, 510, 311, 264, 8513, 337, 2787, 41167, 24590, 13, 51132, 51132, 492, 603, 14722, 257, 16, 6915, 308, 281, 264, 710, 16, 6666, 538, 308, 281, 264, 710, 16, 1804, 308, 281, 264, 710, 17, 1804, 308, 281, 51570, 51570, 264, 710, 18, 1804, 308, 281, 264, 710, 19, 13, 51712, 51712], "temperature": 0.0, "avg_logprob": -0.1152027029740183, "compression_ratio": 1.6666666666666667, "no_speech_prob": 1.1365621048753383e-06}, {"id": 32, "seek": 16020, "start": 170.56, "end": 175.56, "text": " Next, here's the formula for softmax regression.", "tokens": [50364, 1692, 261, 16, 11, 261, 17, 11, 261, 18, 11, 261, 19, 11, 382, 731, 382, 272, 16, 11, 272, 17, 11, 272, 18, 11, 272, 19, 11, 613, 366, 264, 9834, 295, 2787, 41167, 24590, 13, 50882, 50882, 3087, 11, 510, 311, 264, 8513, 337, 2787, 41167, 24590, 13, 51132, 51132, 492, 603, 14722, 257, 16, 6915, 308, 281, 264, 710, 16, 6666, 538, 308, 281, 264, 710, 16, 1804, 308, 281, 264, 710, 17, 1804, 308, 281, 51570, 51570, 264, 710, 18, 1804, 308, 281, 264, 710, 19, 13, 51712, 51712], "temperature": 0.0, "avg_logprob": -0.1152027029740183, "compression_ratio": 1.6666666666666667, "no_speech_prob": 1.1365621048753383e-06}, {"id": 33, "seek": 16020, "start": 175.56, "end": 184.32, "text": " We'll compute a1 equals e to the z1 divided by e to the z1 plus e to the z2 plus e to", "tokens": [50364, 1692, 261, 16, 11, 261, 17, 11, 261, 18, 11, 261, 19, 11, 382, 731, 382, 272, 16, 11, 272, 17, 11, 272, 18, 11, 272, 19, 11, 613, 366, 264, 9834, 295, 2787, 41167, 24590, 13, 50882, 50882, 3087, 11, 510, 311, 264, 8513, 337, 2787, 41167, 24590, 13, 51132, 51132, 492, 603, 14722, 257, 16, 6915, 308, 281, 264, 710, 16, 6666, 538, 308, 281, 264, 710, 16, 1804, 308, 281, 264, 710, 17, 1804, 308, 281, 51570, 51570, 264, 710, 18, 1804, 308, 281, 264, 710, 19, 13, 51712, 51712], "temperature": 0.0, "avg_logprob": -0.1152027029740183, "compression_ratio": 1.6666666666666667, "no_speech_prob": 1.1365621048753383e-06}, {"id": 34, "seek": 16020, "start": 184.32, "end": 187.16, "text": " the z3 plus e to the z4.", "tokens": [50364, 1692, 261, 16, 11, 261, 17, 11, 261, 18, 11, 261, 19, 11, 382, 731, 382, 272, 16, 11, 272, 17, 11, 272, 18, 11, 272, 19, 11, 613, 366, 264, 9834, 295, 2787, 41167, 24590, 13, 50882, 50882, 3087, 11, 510, 311, 264, 8513, 337, 2787, 41167, 24590, 13, 51132, 51132, 492, 603, 14722, 257, 16, 6915, 308, 281, 264, 710, 16, 6666, 538, 308, 281, 264, 710, 16, 1804, 308, 281, 264, 710, 17, 1804, 308, 281, 51570, 51570, 264, 710, 18, 1804, 308, 281, 264, 710, 19, 13, 51712, 51712], "temperature": 0.0, "avg_logprob": -0.1152027029740183, "compression_ratio": 1.6666666666666667, "no_speech_prob": 1.1365621048753383e-06}, {"id": 35, "seek": 18716, "start": 187.16, "end": 193.68, "text": " And a1 will be interpreted as the average estimate of the chance of y being equal to", "tokens": [50364, 400, 257, 16, 486, 312, 26749, 382, 264, 4274, 12539, 295, 264, 2931, 295, 288, 885, 2681, 281, 50690, 50690, 502, 11, 2212, 264, 4846, 4122, 2031, 13, 50826, 50826, 1396, 264, 8513, 337, 2787, 41167, 24590, 486, 14722, 257, 17, 6915, 308, 281, 264, 710, 17, 6666, 538, 264, 51294, 51294, 912, 20687, 11, 308, 281, 264, 710, 16, 1804, 308, 281, 264, 710, 17, 1804, 308, 281, 264, 710, 18, 1804, 308, 281, 264, 710, 19, 11, 293, 51562, 51562, 486, 7302, 257, 17, 382, 264, 4274, 12539, 295, 264, 2931, 300, 288, 307, 2681, 281, 568, 11, 2212, 51848, 51848], "temperature": 0.0, "avg_logprob": -0.12126071566627139, "compression_ratio": 1.875, "no_speech_prob": 1.328773009845463e-06}, {"id": 36, "seek": 18716, "start": 193.68, "end": 196.4, "text": " 1, given the input features x.", "tokens": [50364, 400, 257, 16, 486, 312, 26749, 382, 264, 4274, 12539, 295, 264, 2931, 295, 288, 885, 2681, 281, 50690, 50690, 502, 11, 2212, 264, 4846, 4122, 2031, 13, 50826, 50826, 1396, 264, 8513, 337, 2787, 41167, 24590, 486, 14722, 257, 17, 6915, 308, 281, 264, 710, 17, 6666, 538, 264, 51294, 51294, 912, 20687, 11, 308, 281, 264, 710, 16, 1804, 308, 281, 264, 710, 17, 1804, 308, 281, 264, 710, 18, 1804, 308, 281, 264, 710, 19, 11, 293, 51562, 51562, 486, 7302, 257, 17, 382, 264, 4274, 12539, 295, 264, 2931, 300, 288, 307, 2681, 281, 568, 11, 2212, 51848, 51848], "temperature": 0.0, "avg_logprob": -0.12126071566627139, "compression_ratio": 1.875, "no_speech_prob": 1.328773009845463e-06}, {"id": 37, "seek": 18716, "start": 196.4, "end": 205.76, "text": " Then the formula for softmax regression will compute a2 equals e to the z2 divided by the", "tokens": [50364, 400, 257, 16, 486, 312, 26749, 382, 264, 4274, 12539, 295, 264, 2931, 295, 288, 885, 2681, 281, 50690, 50690, 502, 11, 2212, 264, 4846, 4122, 2031, 13, 50826, 50826, 1396, 264, 8513, 337, 2787, 41167, 24590, 486, 14722, 257, 17, 6915, 308, 281, 264, 710, 17, 6666, 538, 264, 51294, 51294, 912, 20687, 11, 308, 281, 264, 710, 16, 1804, 308, 281, 264, 710, 17, 1804, 308, 281, 264, 710, 18, 1804, 308, 281, 264, 710, 19, 11, 293, 51562, 51562, 486, 7302, 257, 17, 382, 264, 4274, 12539, 295, 264, 2931, 300, 288, 307, 2681, 281, 568, 11, 2212, 51848, 51848], "temperature": 0.0, "avg_logprob": -0.12126071566627139, "compression_ratio": 1.875, "no_speech_prob": 1.328773009845463e-06}, {"id": 38, "seek": 18716, "start": 205.76, "end": 211.12, "text": " same denominator, e to the z1 plus e to the z2 plus e to the z3 plus e to the z4, and", "tokens": [50364, 400, 257, 16, 486, 312, 26749, 382, 264, 4274, 12539, 295, 264, 2931, 295, 288, 885, 2681, 281, 50690, 50690, 502, 11, 2212, 264, 4846, 4122, 2031, 13, 50826, 50826, 1396, 264, 8513, 337, 2787, 41167, 24590, 486, 14722, 257, 17, 6915, 308, 281, 264, 710, 17, 6666, 538, 264, 51294, 51294, 912, 20687, 11, 308, 281, 264, 710, 16, 1804, 308, 281, 264, 710, 17, 1804, 308, 281, 264, 710, 18, 1804, 308, 281, 264, 710, 19, 11, 293, 51562, 51562, 486, 7302, 257, 17, 382, 264, 4274, 12539, 295, 264, 2931, 300, 288, 307, 2681, 281, 568, 11, 2212, 51848, 51848], "temperature": 0.0, "avg_logprob": -0.12126071566627139, "compression_ratio": 1.875, "no_speech_prob": 1.328773009845463e-06}, {"id": 39, "seek": 18716, "start": 211.12, "end": 216.84, "text": " will interpret a2 as the average estimate of the chance that y is equal to 2, given", "tokens": [50364, 400, 257, 16, 486, 312, 26749, 382, 264, 4274, 12539, 295, 264, 2931, 295, 288, 885, 2681, 281, 50690, 50690, 502, 11, 2212, 264, 4846, 4122, 2031, 13, 50826, 50826, 1396, 264, 8513, 337, 2787, 41167, 24590, 486, 14722, 257, 17, 6915, 308, 281, 264, 710, 17, 6666, 538, 264, 51294, 51294, 912, 20687, 11, 308, 281, 264, 710, 16, 1804, 308, 281, 264, 710, 17, 1804, 308, 281, 264, 710, 18, 1804, 308, 281, 264, 710, 19, 11, 293, 51562, 51562, 486, 7302, 257, 17, 382, 264, 4274, 12539, 295, 264, 2931, 300, 288, 307, 2681, 281, 568, 11, 2212, 51848, 51848], "temperature": 0.0, "avg_logprob": -0.12126071566627139, "compression_ratio": 1.875, "no_speech_prob": 1.328773009845463e-06}, {"id": 40, "seek": 21684, "start": 216.84, "end": 218.44, "text": " the input features x.", "tokens": [50364, 264, 4846, 4122, 2031, 13, 50444, 50444, 400, 14138, 337, 257, 18, 11, 689, 510, 264, 30380, 307, 586, 308, 281, 264, 710, 18, 6666, 538, 264, 912, 20687, 11, 50820, 50820, 300, 311, 264, 14109, 2931, 295, 288, 885, 2681, 281, 805, 11, 293, 14138, 257, 19, 2516, 322, 341, 6114, 13, 51174, 51174, 13813, 322, 264, 1411, 11, 321, 4114, 760, 264, 31256, 337, 264, 3565, 3142, 24590, 2316, 11, 613, 11787, 51547, 51547, 322, 264, 558, 366, 527, 31256, 337, 264, 2787, 41167, 24590, 2316, 13, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.12553209899574197, "compression_ratio": 1.72, "no_speech_prob": 9.223364941135515e-06}, {"id": 41, "seek": 21684, "start": 218.44, "end": 225.96, "text": " And similarly for a3, where here the numerator is now e to the z3 divided by the same denominator,", "tokens": [50364, 264, 4846, 4122, 2031, 13, 50444, 50444, 400, 14138, 337, 257, 18, 11, 689, 510, 264, 30380, 307, 586, 308, 281, 264, 710, 18, 6666, 538, 264, 912, 20687, 11, 50820, 50820, 300, 311, 264, 14109, 2931, 295, 288, 885, 2681, 281, 805, 11, 293, 14138, 257, 19, 2516, 322, 341, 6114, 13, 51174, 51174, 13813, 322, 264, 1411, 11, 321, 4114, 760, 264, 31256, 337, 264, 3565, 3142, 24590, 2316, 11, 613, 11787, 51547, 51547, 322, 264, 558, 366, 527, 31256, 337, 264, 2787, 41167, 24590, 2316, 13, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.12553209899574197, "compression_ratio": 1.72, "no_speech_prob": 9.223364941135515e-06}, {"id": 42, "seek": 21684, "start": 225.96, "end": 233.04, "text": " that's the estimated chance of y being equal to 3, and similarly a4 takes on this expression.", "tokens": [50364, 264, 4846, 4122, 2031, 13, 50444, 50444, 400, 14138, 337, 257, 18, 11, 689, 510, 264, 30380, 307, 586, 308, 281, 264, 710, 18, 6666, 538, 264, 912, 20687, 11, 50820, 50820, 300, 311, 264, 14109, 2931, 295, 288, 885, 2681, 281, 805, 11, 293, 14138, 257, 19, 2516, 322, 341, 6114, 13, 51174, 51174, 13813, 322, 264, 1411, 11, 321, 4114, 760, 264, 31256, 337, 264, 3565, 3142, 24590, 2316, 11, 613, 11787, 51547, 51547, 322, 264, 558, 366, 527, 31256, 337, 264, 2787, 41167, 24590, 2316, 13, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.12553209899574197, "compression_ratio": 1.72, "no_speech_prob": 9.223364941135515e-06}, {"id": 43, "seek": 21684, "start": 233.04, "end": 240.5, "text": " Whereas on the left, we wrote down the specification for the logistic regression model, these equations", "tokens": [50364, 264, 4846, 4122, 2031, 13, 50444, 50444, 400, 14138, 337, 257, 18, 11, 689, 510, 264, 30380, 307, 586, 308, 281, 264, 710, 18, 6666, 538, 264, 912, 20687, 11, 50820, 50820, 300, 311, 264, 14109, 2931, 295, 288, 885, 2681, 281, 805, 11, 293, 14138, 257, 19, 2516, 322, 341, 6114, 13, 51174, 51174, 13813, 322, 264, 1411, 11, 321, 4114, 760, 264, 31256, 337, 264, 3565, 3142, 24590, 2316, 11, 613, 11787, 51547, 51547, 322, 264, 558, 366, 527, 31256, 337, 264, 2787, 41167, 24590, 2316, 13, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.12553209899574197, "compression_ratio": 1.72, "no_speech_prob": 9.223364941135515e-06}, {"id": 44, "seek": 21684, "start": 240.5, "end": 246.6, "text": " on the right are our specification for the softmax regression model.", "tokens": [50364, 264, 4846, 4122, 2031, 13, 50444, 50444, 400, 14138, 337, 257, 18, 11, 689, 510, 264, 30380, 307, 586, 308, 281, 264, 710, 18, 6666, 538, 264, 912, 20687, 11, 50820, 50820, 300, 311, 264, 14109, 2931, 295, 288, 885, 2681, 281, 805, 11, 293, 14138, 257, 19, 2516, 322, 341, 6114, 13, 51174, 51174, 13813, 322, 264, 1411, 11, 321, 4114, 760, 264, 31256, 337, 264, 3565, 3142, 24590, 2316, 11, 613, 11787, 51547, 51547, 322, 264, 558, 366, 527, 31256, 337, 264, 2787, 41167, 24590, 2316, 13, 51852, 51852], "temperature": 0.0, "avg_logprob": -0.12553209899574197, "compression_ratio": 1.72, "no_speech_prob": 9.223364941135515e-06}, {"id": 45, "seek": 24660, "start": 246.6, "end": 254.12, "text": " It has parameters w1 through w4 and b1 through b4, and if you can learn appropriate choices", "tokens": [50364, 467, 575, 9834, 261, 16, 807, 261, 19, 293, 272, 16, 807, 272, 19, 11, 293, 498, 291, 393, 1466, 6854, 7994, 50740, 50740, 337, 439, 613, 9834, 11, 550, 341, 2709, 291, 257, 636, 295, 32884, 437, 311, 264, 2931, 50981, 50981, 295, 288, 885, 502, 11, 568, 11, 805, 420, 1017, 11, 2212, 257, 992, 295, 4846, 4122, 2031, 13, 51318, 51318, 12101, 15450, 11, 718, 311, 584, 291, 1190, 2787, 41167, 24590, 322, 257, 777, 4846, 2031, 11, 293, 291, 915, 300, 257, 16, 307, 51618, 51618], "temperature": 0.0, "avg_logprob": -0.12315245296644128, "compression_ratio": 1.528301886792453, "no_speech_prob": 2.3922750187921338e-05}, {"id": 46, "seek": 24660, "start": 254.12, "end": 258.94, "text": " for all these parameters, then this gives you a way of predicting what's the chance", "tokens": [50364, 467, 575, 9834, 261, 16, 807, 261, 19, 293, 272, 16, 807, 272, 19, 11, 293, 498, 291, 393, 1466, 6854, 7994, 50740, 50740, 337, 439, 613, 9834, 11, 550, 341, 2709, 291, 257, 636, 295, 32884, 437, 311, 264, 2931, 50981, 50981, 295, 288, 885, 502, 11, 568, 11, 805, 420, 1017, 11, 2212, 257, 992, 295, 4846, 4122, 2031, 13, 51318, 51318, 12101, 15450, 11, 718, 311, 584, 291, 1190, 2787, 41167, 24590, 322, 257, 777, 4846, 2031, 11, 293, 291, 915, 300, 257, 16, 307, 51618, 51618], "temperature": 0.0, "avg_logprob": -0.12315245296644128, "compression_ratio": 1.528301886792453, "no_speech_prob": 2.3922750187921338e-05}, {"id": 47, "seek": 24660, "start": 258.94, "end": 265.68, "text": " of y being 1, 2, 3 or 4, given a set of input features x.", "tokens": [50364, 467, 575, 9834, 261, 16, 807, 261, 19, 293, 272, 16, 807, 272, 19, 11, 293, 498, 291, 393, 1466, 6854, 7994, 50740, 50740, 337, 439, 613, 9834, 11, 550, 341, 2709, 291, 257, 636, 295, 32884, 437, 311, 264, 2931, 50981, 50981, 295, 288, 885, 502, 11, 568, 11, 805, 420, 1017, 11, 2212, 257, 992, 295, 4846, 4122, 2031, 13, 51318, 51318, 12101, 15450, 11, 718, 311, 584, 291, 1190, 2787, 41167, 24590, 322, 257, 777, 4846, 2031, 11, 293, 291, 915, 300, 257, 16, 307, 51618, 51618], "temperature": 0.0, "avg_logprob": -0.12315245296644128, "compression_ratio": 1.528301886792453, "no_speech_prob": 2.3922750187921338e-05}, {"id": 48, "seek": 24660, "start": 265.68, "end": 271.68, "text": " Quick quiz, let's say you run softmax regression on a new input x, and you find that a1 is", "tokens": [50364, 467, 575, 9834, 261, 16, 807, 261, 19, 293, 272, 16, 807, 272, 19, 11, 293, 498, 291, 393, 1466, 6854, 7994, 50740, 50740, 337, 439, 613, 9834, 11, 550, 341, 2709, 291, 257, 636, 295, 32884, 437, 311, 264, 2931, 50981, 50981, 295, 288, 885, 502, 11, 568, 11, 805, 420, 1017, 11, 2212, 257, 992, 295, 4846, 4122, 2031, 13, 51318, 51318, 12101, 15450, 11, 718, 311, 584, 291, 1190, 2787, 41167, 24590, 322, 257, 777, 4846, 2031, 11, 293, 291, 915, 300, 257, 16, 307, 51618, 51618], "temperature": 0.0, "avg_logprob": -0.12315245296644128, "compression_ratio": 1.528301886792453, "no_speech_prob": 2.3922750187921338e-05}, {"id": 49, "seek": 27168, "start": 271.68, "end": 280.76, "text": " 0.30, a2 is 0.20, a3 is 0.15.", "tokens": [50364, 1958, 13, 3446, 11, 257, 17, 307, 1958, 13, 2009, 11, 257, 18, 307, 1958, 13, 5211, 13, 50818, 50818, 708, 360, 291, 519, 257, 19, 486, 312, 30, 50920, 50920, 1545, 500, 380, 291, 747, 257, 574, 412, 341, 15450, 293, 536, 498, 291, 393, 2573, 484, 264, 558, 1867, 13, 51258, 51258, 407, 291, 1062, 362, 5334, 300, 570, 264, 2931, 295, 288, 1940, 322, 264, 4190, 295, 502, 11, 568, 11, 51528, 51528, 805, 420, 1017, 11, 436, 362, 281, 909, 493, 281, 502, 11, 257, 19, 11, 264, 2931, 295, 288, 885, 2681, 281, 1017, 11, 575, 281, 312, 1958, 13, 5211, 13, 51860, 51860], "temperature": 0.0, "avg_logprob": -0.15270387804186022, "compression_ratio": 1.5841584158415842, "no_speech_prob": 3.7852769310120493e-06}, {"id": 50, "seek": 27168, "start": 280.76, "end": 282.8, "text": " What do you think a4 will be?", "tokens": [50364, 1958, 13, 3446, 11, 257, 17, 307, 1958, 13, 2009, 11, 257, 18, 307, 1958, 13, 5211, 13, 50818, 50818, 708, 360, 291, 519, 257, 19, 486, 312, 30, 50920, 50920, 1545, 500, 380, 291, 747, 257, 574, 412, 341, 15450, 293, 536, 498, 291, 393, 2573, 484, 264, 558, 1867, 13, 51258, 51258, 407, 291, 1062, 362, 5334, 300, 570, 264, 2931, 295, 288, 1940, 322, 264, 4190, 295, 502, 11, 568, 11, 51528, 51528, 805, 420, 1017, 11, 436, 362, 281, 909, 493, 281, 502, 11, 257, 19, 11, 264, 2931, 295, 288, 885, 2681, 281, 1017, 11, 575, 281, 312, 1958, 13, 5211, 13, 51860, 51860], "temperature": 0.0, "avg_logprob": -0.15270387804186022, "compression_ratio": 1.5841584158415842, "no_speech_prob": 3.7852769310120493e-06}, {"id": 51, "seek": 27168, "start": 282.8, "end": 289.56, "text": " Why don't you take a look at this quiz and see if you can figure out the right answer.", "tokens": [50364, 1958, 13, 3446, 11, 257, 17, 307, 1958, 13, 2009, 11, 257, 18, 307, 1958, 13, 5211, 13, 50818, 50818, 708, 360, 291, 519, 257, 19, 486, 312, 30, 50920, 50920, 1545, 500, 380, 291, 747, 257, 574, 412, 341, 15450, 293, 536, 498, 291, 393, 2573, 484, 264, 558, 1867, 13, 51258, 51258, 407, 291, 1062, 362, 5334, 300, 570, 264, 2931, 295, 288, 1940, 322, 264, 4190, 295, 502, 11, 568, 11, 51528, 51528, 805, 420, 1017, 11, 436, 362, 281, 909, 493, 281, 502, 11, 257, 19, 11, 264, 2931, 295, 288, 885, 2681, 281, 1017, 11, 575, 281, 312, 1958, 13, 5211, 13, 51860, 51860], "temperature": 0.0, "avg_logprob": -0.15270387804186022, "compression_ratio": 1.5841584158415842, "no_speech_prob": 3.7852769310120493e-06}, {"id": 52, "seek": 27168, "start": 289.56, "end": 294.96000000000004, "text": " So you might have realized that because the chance of y taking on the values of 1, 2,", "tokens": [50364, 1958, 13, 3446, 11, 257, 17, 307, 1958, 13, 2009, 11, 257, 18, 307, 1958, 13, 5211, 13, 50818, 50818, 708, 360, 291, 519, 257, 19, 486, 312, 30, 50920, 50920, 1545, 500, 380, 291, 747, 257, 574, 412, 341, 15450, 293, 536, 498, 291, 393, 2573, 484, 264, 558, 1867, 13, 51258, 51258, 407, 291, 1062, 362, 5334, 300, 570, 264, 2931, 295, 288, 1940, 322, 264, 4190, 295, 502, 11, 568, 11, 51528, 51528, 805, 420, 1017, 11, 436, 362, 281, 909, 493, 281, 502, 11, 257, 19, 11, 264, 2931, 295, 288, 885, 2681, 281, 1017, 11, 575, 281, 312, 1958, 13, 5211, 13, 51860, 51860], "temperature": 0.0, "avg_logprob": -0.15270387804186022, "compression_ratio": 1.5841584158415842, "no_speech_prob": 3.7852769310120493e-06}, {"id": 53, "seek": 27168, "start": 294.96000000000004, "end": 301.6, "text": " 3 or 4, they have to add up to 1, a4, the chance of y being equal to 4, has to be 0.15.", "tokens": [50364, 1958, 13, 3446, 11, 257, 17, 307, 1958, 13, 2009, 11, 257, 18, 307, 1958, 13, 5211, 13, 50818, 50818, 708, 360, 291, 519, 257, 19, 486, 312, 30, 50920, 50920, 1545, 500, 380, 291, 747, 257, 574, 412, 341, 15450, 293, 536, 498, 291, 393, 2573, 484, 264, 558, 1867, 13, 51258, 51258, 407, 291, 1062, 362, 5334, 300, 570, 264, 2931, 295, 288, 1940, 322, 264, 4190, 295, 502, 11, 568, 11, 51528, 51528, 805, 420, 1017, 11, 436, 362, 281, 909, 493, 281, 502, 11, 257, 19, 11, 264, 2931, 295, 288, 885, 2681, 281, 1017, 11, 575, 281, 312, 1958, 13, 5211, 13, 51860, 51860], "temperature": 0.0, "avg_logprob": -0.15270387804186022, "compression_ratio": 1.5841584158415842, "no_speech_prob": 3.7852769310120493e-06}, {"id": 54, "seek": 30160, "start": 301.6, "end": 307.72, "text": " So 0.35, which is 1 minus 0.3 minus 0.2 minus 0.15.", "tokens": [50364, 407, 1958, 13, 8794, 11, 597, 307, 502, 3175, 1958, 13, 18, 3175, 1958, 13, 17, 3175, 1958, 13, 5211, 13, 50670, 50670, 407, 510, 286, 4114, 760, 264, 30546, 337, 2787, 41167, 24590, 294, 264, 1389, 295, 1017, 1944, 23930, 11, 51036, 51036, 293, 718, 311, 586, 2464, 760, 264, 8513, 337, 264, 2674, 1389, 337, 2787, 41167, 24590, 13, 51348, 51348, 682, 264, 2674, 1389, 11, 288, 393, 747, 322, 297, 1944, 4190, 11, 370, 288, 393, 312, 502, 11, 568, 11, 805, 293, 370, 322, 493, 281, 51700, 51700, 297, 13, 51770, 51770], "temperature": 0.0, "avg_logprob": -0.12602744783673966, "compression_ratio": 1.7666666666666666, "no_speech_prob": 5.594304639089387e-06}, {"id": 55, "seek": 30160, "start": 307.72, "end": 315.04, "text": " So here I wrote down the formulas for softmax regression in the case of 4 possible outputs,", "tokens": [50364, 407, 1958, 13, 8794, 11, 597, 307, 502, 3175, 1958, 13, 18, 3175, 1958, 13, 17, 3175, 1958, 13, 5211, 13, 50670, 50670, 407, 510, 286, 4114, 760, 264, 30546, 337, 2787, 41167, 24590, 294, 264, 1389, 295, 1017, 1944, 23930, 11, 51036, 51036, 293, 718, 311, 586, 2464, 760, 264, 8513, 337, 264, 2674, 1389, 337, 2787, 41167, 24590, 13, 51348, 51348, 682, 264, 2674, 1389, 11, 288, 393, 747, 322, 297, 1944, 4190, 11, 370, 288, 393, 312, 502, 11, 568, 11, 805, 293, 370, 322, 493, 281, 51700, 51700, 297, 13, 51770, 51770], "temperature": 0.0, "avg_logprob": -0.12602744783673966, "compression_ratio": 1.7666666666666666, "no_speech_prob": 5.594304639089387e-06}, {"id": 56, "seek": 30160, "start": 315.04, "end": 321.28000000000003, "text": " and let's now write down the formula for the general case for softmax regression.", "tokens": [50364, 407, 1958, 13, 8794, 11, 597, 307, 502, 3175, 1958, 13, 18, 3175, 1958, 13, 17, 3175, 1958, 13, 5211, 13, 50670, 50670, 407, 510, 286, 4114, 760, 264, 30546, 337, 2787, 41167, 24590, 294, 264, 1389, 295, 1017, 1944, 23930, 11, 51036, 51036, 293, 718, 311, 586, 2464, 760, 264, 8513, 337, 264, 2674, 1389, 337, 2787, 41167, 24590, 13, 51348, 51348, 682, 264, 2674, 1389, 11, 288, 393, 747, 322, 297, 1944, 4190, 11, 370, 288, 393, 312, 502, 11, 568, 11, 805, 293, 370, 322, 493, 281, 51700, 51700, 297, 13, 51770, 51770], "temperature": 0.0, "avg_logprob": -0.12602744783673966, "compression_ratio": 1.7666666666666666, "no_speech_prob": 5.594304639089387e-06}, {"id": 57, "seek": 30160, "start": 321.28000000000003, "end": 328.32000000000005, "text": " In the general case, y can take on n possible values, so y can be 1, 2, 3 and so on up to", "tokens": [50364, 407, 1958, 13, 8794, 11, 597, 307, 502, 3175, 1958, 13, 18, 3175, 1958, 13, 17, 3175, 1958, 13, 5211, 13, 50670, 50670, 407, 510, 286, 4114, 760, 264, 30546, 337, 2787, 41167, 24590, 294, 264, 1389, 295, 1017, 1944, 23930, 11, 51036, 51036, 293, 718, 311, 586, 2464, 760, 264, 8513, 337, 264, 2674, 1389, 337, 2787, 41167, 24590, 13, 51348, 51348, 682, 264, 2674, 1389, 11, 288, 393, 747, 322, 297, 1944, 4190, 11, 370, 288, 393, 312, 502, 11, 568, 11, 805, 293, 370, 322, 493, 281, 51700, 51700, 297, 13, 51770, 51770], "temperature": 0.0, "avg_logprob": -0.12602744783673966, "compression_ratio": 1.7666666666666666, "no_speech_prob": 5.594304639089387e-06}, {"id": 58, "seek": 30160, "start": 328.32000000000005, "end": 329.72, "text": " n.", "tokens": [50364, 407, 1958, 13, 8794, 11, 597, 307, 502, 3175, 1958, 13, 18, 3175, 1958, 13, 17, 3175, 1958, 13, 5211, 13, 50670, 50670, 407, 510, 286, 4114, 760, 264, 30546, 337, 2787, 41167, 24590, 294, 264, 1389, 295, 1017, 1944, 23930, 11, 51036, 51036, 293, 718, 311, 586, 2464, 760, 264, 8513, 337, 264, 2674, 1389, 337, 2787, 41167, 24590, 13, 51348, 51348, 682, 264, 2674, 1389, 11, 288, 393, 747, 322, 297, 1944, 4190, 11, 370, 288, 393, 312, 502, 11, 568, 11, 805, 293, 370, 322, 493, 281, 51700, 51700, 297, 13, 51770, 51770], "temperature": 0.0, "avg_logprob": -0.12602744783673966, "compression_ratio": 1.7666666666666666, "no_speech_prob": 5.594304639089387e-06}, {"id": 59, "seek": 32972, "start": 329.72, "end": 338.68, "text": " In that case, softmax regression will compute zj equals wj dot product with x plus bj, where", "tokens": [50364, 682, 300, 1389, 11, 2787, 41167, 24590, 486, 14722, 710, 73, 6915, 261, 73, 5893, 1674, 365, 2031, 1804, 272, 73, 11, 689, 50812, 50812, 586, 264, 9834, 295, 2787, 41167, 24590, 366, 261, 16, 11, 261, 17, 807, 45368, 11, 382, 731, 382, 272, 16, 11, 272, 17, 807, 51280, 51280, 272, 77, 13, 51366, 51366], "temperature": 0.0, "avg_logprob": -0.13965564663127317, "compression_ratio": 1.4198473282442747, "no_speech_prob": 2.2125081159174442e-05}, {"id": 60, "seek": 32972, "start": 338.68, "end": 348.04, "text": " now the parameters of softmax regression are w1, w2 through wn, as well as b1, b2 through", "tokens": [50364, 682, 300, 1389, 11, 2787, 41167, 24590, 486, 14722, 710, 73, 6915, 261, 73, 5893, 1674, 365, 2031, 1804, 272, 73, 11, 689, 50812, 50812, 586, 264, 9834, 295, 2787, 41167, 24590, 366, 261, 16, 11, 261, 17, 807, 45368, 11, 382, 731, 382, 272, 16, 11, 272, 17, 807, 51280, 51280, 272, 77, 13, 51366, 51366], "temperature": 0.0, "avg_logprob": -0.13965564663127317, "compression_ratio": 1.4198473282442747, "no_speech_prob": 2.2125081159174442e-05}, {"id": 61, "seek": 32972, "start": 348.04, "end": 349.76000000000005, "text": " bn.", "tokens": [50364, 682, 300, 1389, 11, 2787, 41167, 24590, 486, 14722, 710, 73, 6915, 261, 73, 5893, 1674, 365, 2031, 1804, 272, 73, 11, 689, 50812, 50812, 586, 264, 9834, 295, 2787, 41167, 24590, 366, 261, 16, 11, 261, 17, 807, 45368, 11, 382, 731, 382, 272, 16, 11, 272, 17, 807, 51280, 51280, 272, 77, 13, 51366, 51366], "temperature": 0.0, "avg_logprob": -0.13965564663127317, "compression_ratio": 1.4198473282442747, "no_speech_prob": 2.2125081159174442e-05}, {"id": 62, "seek": 34976, "start": 349.76, "end": 362.56, "text": " And then finally it will compute aj equals e to the zj divided by sum from k equals 1 to n of e to the z sub k.", "tokens": [50364, 400, 550, 2721, 309, 486, 14722, 17680, 6915, 308, 281, 264, 710, 73, 6666, 538, 2408, 490, 350, 6915, 502, 281, 297, 295, 308, 281, 264, 710, 1422, 350, 13, 51004, 51004, 1042, 510, 286, 478, 1228, 1071, 7006, 350, 281, 8186, 264, 28811, 11, 570, 510, 361, 14942, 51336, 51336, 281, 257, 2685, 6806, 1230, 411, 361, 6915, 502, 13, 51508, 51508], "temperature": 0.0, "avg_logprob": -0.17784912402813252, "compression_ratio": 1.4545454545454546, "no_speech_prob": 3.726621571331634e-06}, {"id": 63, "seek": 34976, "start": 362.56, "end": 369.2, "text": " Well here I'm using another variable k to index the summation, because here j refers", "tokens": [50364, 400, 550, 2721, 309, 486, 14722, 17680, 6915, 308, 281, 264, 710, 73, 6666, 538, 2408, 490, 350, 6915, 502, 281, 297, 295, 308, 281, 264, 710, 1422, 350, 13, 51004, 51004, 1042, 510, 286, 478, 1228, 1071, 7006, 350, 281, 8186, 264, 28811, 11, 570, 510, 361, 14942, 51336, 51336, 281, 257, 2685, 6806, 1230, 411, 361, 6915, 502, 13, 51508, 51508], "temperature": 0.0, "avg_logprob": -0.17784912402813252, "compression_ratio": 1.4545454545454546, "no_speech_prob": 3.726621571331634e-06}, {"id": 64, "seek": 34976, "start": 369.2, "end": 372.64, "text": " to a specific fixed number like j equals 1.", "tokens": [50364, 400, 550, 2721, 309, 486, 14722, 17680, 6915, 308, 281, 264, 710, 73, 6666, 538, 2408, 490, 350, 6915, 502, 281, 297, 295, 308, 281, 264, 710, 1422, 350, 13, 51004, 51004, 1042, 510, 286, 478, 1228, 1071, 7006, 350, 281, 8186, 264, 28811, 11, 570, 510, 361, 14942, 51336, 51336, 281, 257, 2685, 6806, 1230, 411, 361, 6915, 502, 13, 51508, 51508], "temperature": 0.0, "avg_logprob": -0.17784912402813252, "compression_ratio": 1.4545454545454546, "no_speech_prob": 3.726621571331634e-06}, {"id": 65, "seek": 37264, "start": 372.64, "end": 380.0, "text": " aj is interpreted as the model's estimate that y is equal to j given the input features", "tokens": [50364, 17680, 307, 26749, 382, 264, 2316, 311, 12539, 300, 288, 307, 2681, 281, 361, 2212, 264, 4846, 4122, 50732, 50732, 2031, 13, 50782, 50782, 400, 3449, 300, 538, 6435, 295, 341, 8513, 11, 498, 291, 909, 493, 257, 16, 11, 257, 17, 439, 264, 636, 807, 364, 11, 51120, 51120, 613, 3547, 1009, 486, 917, 493, 5127, 493, 281, 502, 13, 51280, 51280, 407, 321, 22206, 577, 291, 576, 14722, 264, 2787, 41167, 24590, 2316, 13, 51556, 51556, 400, 286, 1582, 380, 7081, 309, 294, 341, 960, 11, 457, 309, 4523, 484, 300, 498, 291, 3079, 2787, 41167, 24590, 51796, 51796], "temperature": 0.0, "avg_logprob": -0.12391472788690364, "compression_ratio": 1.5959183673469388, "no_speech_prob": 2.0261290956113953e-06}, {"id": 66, "seek": 37264, "start": 380.0, "end": 381.0, "text": " x.", "tokens": [50364, 17680, 307, 26749, 382, 264, 2316, 311, 12539, 300, 288, 307, 2681, 281, 361, 2212, 264, 4846, 4122, 50732, 50732, 2031, 13, 50782, 50782, 400, 3449, 300, 538, 6435, 295, 341, 8513, 11, 498, 291, 909, 493, 257, 16, 11, 257, 17, 439, 264, 636, 807, 364, 11, 51120, 51120, 613, 3547, 1009, 486, 917, 493, 5127, 493, 281, 502, 13, 51280, 51280, 407, 321, 22206, 577, 291, 576, 14722, 264, 2787, 41167, 24590, 2316, 13, 51556, 51556, 400, 286, 1582, 380, 7081, 309, 294, 341, 960, 11, 457, 309, 4523, 484, 300, 498, 291, 3079, 2787, 41167, 24590, 51796, 51796], "temperature": 0.0, "avg_logprob": -0.12391472788690364, "compression_ratio": 1.5959183673469388, "no_speech_prob": 2.0261290956113953e-06}, {"id": 67, "seek": 37264, "start": 381.0, "end": 387.76, "text": " And notice that by construction of this formula, if you add up a1, a2 all the way through an,", "tokens": [50364, 17680, 307, 26749, 382, 264, 2316, 311, 12539, 300, 288, 307, 2681, 281, 361, 2212, 264, 4846, 4122, 50732, 50732, 2031, 13, 50782, 50782, 400, 3449, 300, 538, 6435, 295, 341, 8513, 11, 498, 291, 909, 493, 257, 16, 11, 257, 17, 439, 264, 636, 807, 364, 11, 51120, 51120, 613, 3547, 1009, 486, 917, 493, 5127, 493, 281, 502, 13, 51280, 51280, 407, 321, 22206, 577, 291, 576, 14722, 264, 2787, 41167, 24590, 2316, 13, 51556, 51556, 400, 286, 1582, 380, 7081, 309, 294, 341, 960, 11, 457, 309, 4523, 484, 300, 498, 291, 3079, 2787, 41167, 24590, 51796, 51796], "temperature": 0.0, "avg_logprob": -0.12391472788690364, "compression_ratio": 1.5959183673469388, "no_speech_prob": 2.0261290956113953e-06}, {"id": 68, "seek": 37264, "start": 387.76, "end": 390.96, "text": " these numbers always will end up adding up to 1.", "tokens": [50364, 17680, 307, 26749, 382, 264, 2316, 311, 12539, 300, 288, 307, 2681, 281, 361, 2212, 264, 4846, 4122, 50732, 50732, 2031, 13, 50782, 50782, 400, 3449, 300, 538, 6435, 295, 341, 8513, 11, 498, 291, 909, 493, 257, 16, 11, 257, 17, 439, 264, 636, 807, 364, 11, 51120, 51120, 613, 3547, 1009, 486, 917, 493, 5127, 493, 281, 502, 13, 51280, 51280, 407, 321, 22206, 577, 291, 576, 14722, 264, 2787, 41167, 24590, 2316, 13, 51556, 51556, 400, 286, 1582, 380, 7081, 309, 294, 341, 960, 11, 457, 309, 4523, 484, 300, 498, 291, 3079, 2787, 41167, 24590, 51796, 51796], "temperature": 0.0, "avg_logprob": -0.12391472788690364, "compression_ratio": 1.5959183673469388, "no_speech_prob": 2.0261290956113953e-06}, {"id": 69, "seek": 37264, "start": 390.96, "end": 396.47999999999996, "text": " So we specified how you would compute the softmax regression model.", "tokens": [50364, 17680, 307, 26749, 382, 264, 2316, 311, 12539, 300, 288, 307, 2681, 281, 361, 2212, 264, 4846, 4122, 50732, 50732, 2031, 13, 50782, 50782, 400, 3449, 300, 538, 6435, 295, 341, 8513, 11, 498, 291, 909, 493, 257, 16, 11, 257, 17, 439, 264, 636, 807, 364, 11, 51120, 51120, 613, 3547, 1009, 486, 917, 493, 5127, 493, 281, 502, 13, 51280, 51280, 407, 321, 22206, 577, 291, 576, 14722, 264, 2787, 41167, 24590, 2316, 13, 51556, 51556, 400, 286, 1582, 380, 7081, 309, 294, 341, 960, 11, 457, 309, 4523, 484, 300, 498, 291, 3079, 2787, 41167, 24590, 51796, 51796], "temperature": 0.0, "avg_logprob": -0.12391472788690364, "compression_ratio": 1.5959183673469388, "no_speech_prob": 2.0261290956113953e-06}, {"id": 70, "seek": 37264, "start": 396.47999999999996, "end": 401.28, "text": " And I won't prove it in this video, but it turns out that if you apply softmax regression", "tokens": [50364, 17680, 307, 26749, 382, 264, 2316, 311, 12539, 300, 288, 307, 2681, 281, 361, 2212, 264, 4846, 4122, 50732, 50732, 2031, 13, 50782, 50782, 400, 3449, 300, 538, 6435, 295, 341, 8513, 11, 498, 291, 909, 493, 257, 16, 11, 257, 17, 439, 264, 636, 807, 364, 11, 51120, 51120, 613, 3547, 1009, 486, 917, 493, 5127, 493, 281, 502, 13, 51280, 51280, 407, 321, 22206, 577, 291, 576, 14722, 264, 2787, 41167, 24590, 2316, 13, 51556, 51556, 400, 286, 1582, 380, 7081, 309, 294, 341, 960, 11, 457, 309, 4523, 484, 300, 498, 291, 3079, 2787, 41167, 24590, 51796, 51796], "temperature": 0.0, "avg_logprob": -0.12391472788690364, "compression_ratio": 1.5959183673469388, "no_speech_prob": 2.0261290956113953e-06}, {"id": 71, "seek": 40128, "start": 401.28, "end": 408.28, "text": " with n equals 2, so there are only two possible output classes, then softmax regression ends", "tokens": [50364, 365, 297, 6915, 568, 11, 370, 456, 366, 787, 732, 1944, 5598, 5359, 11, 550, 2787, 41167, 24590, 5314, 50714, 50714, 493, 15866, 1936, 264, 912, 551, 382, 3565, 3142, 24590, 13, 50952, 50952, 440, 9834, 917, 493, 885, 257, 707, 857, 819, 11, 457, 309, 5314, 493, 12245, 281, 257, 3565, 3142, 24590, 51190, 51190, 2316, 13, 51240, 51240, 583, 300, 311, 983, 264, 2787, 41167, 24590, 2316, 307, 257, 2674, 2144, 295, 3565, 3142, 24590, 13, 51532, 51532, 10222, 7642, 577, 2787, 41167, 24590, 715, 1819, 1080, 23930, 11, 718, 311, 586, 747, 257, 574, 412, 577, 51786, 51786], "temperature": 0.0, "avg_logprob": -0.0728526346891829, "compression_ratio": 1.8215767634854771, "no_speech_prob": 8.186316904357227e-07}, {"id": 72, "seek": 40128, "start": 408.28, "end": 413.03999999999996, "text": " up computing basically the same thing as logistic regression.", "tokens": [50364, 365, 297, 6915, 568, 11, 370, 456, 366, 787, 732, 1944, 5598, 5359, 11, 550, 2787, 41167, 24590, 5314, 50714, 50714, 493, 15866, 1936, 264, 912, 551, 382, 3565, 3142, 24590, 13, 50952, 50952, 440, 9834, 917, 493, 885, 257, 707, 857, 819, 11, 457, 309, 5314, 493, 12245, 281, 257, 3565, 3142, 24590, 51190, 51190, 2316, 13, 51240, 51240, 583, 300, 311, 983, 264, 2787, 41167, 24590, 2316, 307, 257, 2674, 2144, 295, 3565, 3142, 24590, 13, 51532, 51532, 10222, 7642, 577, 2787, 41167, 24590, 715, 1819, 1080, 23930, 11, 718, 311, 586, 747, 257, 574, 412, 577, 51786, 51786], "temperature": 0.0, "avg_logprob": -0.0728526346891829, "compression_ratio": 1.8215767634854771, "no_speech_prob": 8.186316904357227e-07}, {"id": 73, "seek": 40128, "start": 413.03999999999996, "end": 417.79999999999995, "text": " The parameters end up being a little bit different, but it ends up reducing to a logistic regression", "tokens": [50364, 365, 297, 6915, 568, 11, 370, 456, 366, 787, 732, 1944, 5598, 5359, 11, 550, 2787, 41167, 24590, 5314, 50714, 50714, 493, 15866, 1936, 264, 912, 551, 382, 3565, 3142, 24590, 13, 50952, 50952, 440, 9834, 917, 493, 885, 257, 707, 857, 819, 11, 457, 309, 5314, 493, 12245, 281, 257, 3565, 3142, 24590, 51190, 51190, 2316, 13, 51240, 51240, 583, 300, 311, 983, 264, 2787, 41167, 24590, 2316, 307, 257, 2674, 2144, 295, 3565, 3142, 24590, 13, 51532, 51532, 10222, 7642, 577, 2787, 41167, 24590, 715, 1819, 1080, 23930, 11, 718, 311, 586, 747, 257, 574, 412, 577, 51786, 51786], "temperature": 0.0, "avg_logprob": -0.0728526346891829, "compression_ratio": 1.8215767634854771, "no_speech_prob": 8.186316904357227e-07}, {"id": 74, "seek": 40128, "start": 417.79999999999995, "end": 418.79999999999995, "text": " model.", "tokens": [50364, 365, 297, 6915, 568, 11, 370, 456, 366, 787, 732, 1944, 5598, 5359, 11, 550, 2787, 41167, 24590, 5314, 50714, 50714, 493, 15866, 1936, 264, 912, 551, 382, 3565, 3142, 24590, 13, 50952, 50952, 440, 9834, 917, 493, 885, 257, 707, 857, 819, 11, 457, 309, 5314, 493, 12245, 281, 257, 3565, 3142, 24590, 51190, 51190, 2316, 13, 51240, 51240, 583, 300, 311, 983, 264, 2787, 41167, 24590, 2316, 307, 257, 2674, 2144, 295, 3565, 3142, 24590, 13, 51532, 51532, 10222, 7642, 577, 2787, 41167, 24590, 715, 1819, 1080, 23930, 11, 718, 311, 586, 747, 257, 574, 412, 577, 51786, 51786], "temperature": 0.0, "avg_logprob": -0.0728526346891829, "compression_ratio": 1.8215767634854771, "no_speech_prob": 8.186316904357227e-07}, {"id": 75, "seek": 40128, "start": 418.79999999999995, "end": 424.64, "text": " But that's why the softmax regression model is a generalization of logistic regression.", "tokens": [50364, 365, 297, 6915, 568, 11, 370, 456, 366, 787, 732, 1944, 5598, 5359, 11, 550, 2787, 41167, 24590, 5314, 50714, 50714, 493, 15866, 1936, 264, 912, 551, 382, 3565, 3142, 24590, 13, 50952, 50952, 440, 9834, 917, 493, 885, 257, 707, 857, 819, 11, 457, 309, 5314, 493, 12245, 281, 257, 3565, 3142, 24590, 51190, 51190, 2316, 13, 51240, 51240, 583, 300, 311, 983, 264, 2787, 41167, 24590, 2316, 307, 257, 2674, 2144, 295, 3565, 3142, 24590, 13, 51532, 51532, 10222, 7642, 577, 2787, 41167, 24590, 715, 1819, 1080, 23930, 11, 718, 311, 586, 747, 257, 574, 412, 577, 51786, 51786], "temperature": 0.0, "avg_logprob": -0.0728526346891829, "compression_ratio": 1.8215767634854771, "no_speech_prob": 8.186316904357227e-07}, {"id": 76, "seek": 40128, "start": 424.64, "end": 429.71999999999997, "text": " Having defined how softmax regression computes its outputs, let's now take a look at how", "tokens": [50364, 365, 297, 6915, 568, 11, 370, 456, 366, 787, 732, 1944, 5598, 5359, 11, 550, 2787, 41167, 24590, 5314, 50714, 50714, 493, 15866, 1936, 264, 912, 551, 382, 3565, 3142, 24590, 13, 50952, 50952, 440, 9834, 917, 493, 885, 257, 707, 857, 819, 11, 457, 309, 5314, 493, 12245, 281, 257, 3565, 3142, 24590, 51190, 51190, 2316, 13, 51240, 51240, 583, 300, 311, 983, 264, 2787, 41167, 24590, 2316, 307, 257, 2674, 2144, 295, 3565, 3142, 24590, 13, 51532, 51532, 10222, 7642, 577, 2787, 41167, 24590, 715, 1819, 1080, 23930, 11, 718, 311, 586, 747, 257, 574, 412, 577, 51786, 51786], "temperature": 0.0, "avg_logprob": -0.0728526346891829, "compression_ratio": 1.8215767634854771, "no_speech_prob": 8.186316904357227e-07}, {"id": 77, "seek": 42972, "start": 429.72, "end": 434.84000000000003, "text": " to specify the cost function for softmax regression.", "tokens": [50364, 281, 16500, 264, 2063, 2445, 337, 2787, 41167, 24590, 13, 50620, 50620, 9647, 336, 337, 3565, 3142, 24590, 11, 341, 307, 437, 321, 632, 13, 50754, 50754, 492, 848, 710, 307, 2681, 281, 341, 11, 293, 550, 286, 4114, 3071, 300, 257, 16, 307, 290, 295, 710, 11, 309, 390, 26749, 51146, 51146, 382, 264, 8482, 300, 288, 307, 2681, 281, 502, 13, 51272, 51272, 400, 321, 611, 4114, 257, 17, 307, 264, 8482, 300, 288, 307, 2681, 281, 25925, 1958, 13, 51626, 51626], "temperature": 0.0, "avg_logprob": -0.15300798416137695, "compression_ratio": 1.6721311475409837, "no_speech_prob": 2.1233490770100616e-06}, {"id": 78, "seek": 42972, "start": 434.84000000000003, "end": 437.52000000000004, "text": " Recall for logistic regression, this is what we had.", "tokens": [50364, 281, 16500, 264, 2063, 2445, 337, 2787, 41167, 24590, 13, 50620, 50620, 9647, 336, 337, 3565, 3142, 24590, 11, 341, 307, 437, 321, 632, 13, 50754, 50754, 492, 848, 710, 307, 2681, 281, 341, 11, 293, 550, 286, 4114, 3071, 300, 257, 16, 307, 290, 295, 710, 11, 309, 390, 26749, 51146, 51146, 382, 264, 8482, 300, 288, 307, 2681, 281, 502, 13, 51272, 51272, 400, 321, 611, 4114, 257, 17, 307, 264, 8482, 300, 288, 307, 2681, 281, 25925, 1958, 13, 51626, 51626], "temperature": 0.0, "avg_logprob": -0.15300798416137695, "compression_ratio": 1.6721311475409837, "no_speech_prob": 2.1233490770100616e-06}, {"id": 79, "seek": 42972, "start": 437.52000000000004, "end": 445.36, "text": " We said z is equal to this, and then I wrote earlier that a1 is g of z, it was interpreted", "tokens": [50364, 281, 16500, 264, 2063, 2445, 337, 2787, 41167, 24590, 13, 50620, 50620, 9647, 336, 337, 3565, 3142, 24590, 11, 341, 307, 437, 321, 632, 13, 50754, 50754, 492, 848, 710, 307, 2681, 281, 341, 11, 293, 550, 286, 4114, 3071, 300, 257, 16, 307, 290, 295, 710, 11, 309, 390, 26749, 51146, 51146, 382, 264, 8482, 300, 288, 307, 2681, 281, 502, 13, 51272, 51272, 400, 321, 611, 4114, 257, 17, 307, 264, 8482, 300, 288, 307, 2681, 281, 25925, 1958, 13, 51626, 51626], "temperature": 0.0, "avg_logprob": -0.15300798416137695, "compression_ratio": 1.6721311475409837, "no_speech_prob": 2.1233490770100616e-06}, {"id": 80, "seek": 42972, "start": 445.36, "end": 447.88000000000005, "text": " as the probability that y is equal to 1.", "tokens": [50364, 281, 16500, 264, 2063, 2445, 337, 2787, 41167, 24590, 13, 50620, 50620, 9647, 336, 337, 3565, 3142, 24590, 11, 341, 307, 437, 321, 632, 13, 50754, 50754, 492, 848, 710, 307, 2681, 281, 341, 11, 293, 550, 286, 4114, 3071, 300, 257, 16, 307, 290, 295, 710, 11, 309, 390, 26749, 51146, 51146, 382, 264, 8482, 300, 288, 307, 2681, 281, 502, 13, 51272, 51272, 400, 321, 611, 4114, 257, 17, 307, 264, 8482, 300, 288, 307, 2681, 281, 25925, 1958, 13, 51626, 51626], "temperature": 0.0, "avg_logprob": -0.15300798416137695, "compression_ratio": 1.6721311475409837, "no_speech_prob": 2.1233490770100616e-06}, {"id": 81, "seek": 42972, "start": 447.88000000000005, "end": 454.96000000000004, "text": " And we also wrote a2 is the probability that y is equal to clause 0.", "tokens": [50364, 281, 16500, 264, 2063, 2445, 337, 2787, 41167, 24590, 13, 50620, 50620, 9647, 336, 337, 3565, 3142, 24590, 11, 341, 307, 437, 321, 632, 13, 50754, 50754, 492, 848, 710, 307, 2681, 281, 341, 11, 293, 550, 286, 4114, 3071, 300, 257, 16, 307, 290, 295, 710, 11, 309, 390, 26749, 51146, 51146, 382, 264, 8482, 300, 288, 307, 2681, 281, 502, 13, 51272, 51272, 400, 321, 611, 4114, 257, 17, 307, 264, 8482, 300, 288, 307, 2681, 281, 25925, 1958, 13, 51626, 51626], "temperature": 0.0, "avg_logprob": -0.15300798416137695, "compression_ratio": 1.6721311475409837, "no_speech_prob": 2.1233490770100616e-06}, {"id": 82, "seek": 45496, "start": 454.96, "end": 463.59999999999997, "text": " So previously we had written the loss of logistic regression as negative y log a1 minus 1 minus", "tokens": [50364, 407, 8046, 321, 632, 3720, 264, 4470, 295, 3565, 3142, 24590, 382, 3671, 288, 3565, 257, 16, 3175, 502, 3175, 50796, 50796, 288, 3565, 502, 3175, 257, 16, 13, 50980, 50980, 583, 502, 3175, 257, 16, 307, 611, 2681, 281, 445, 257, 17, 11, 570, 257, 17, 307, 502, 3175, 257, 16, 4650, 281, 341, 6114, 51476, 51476, 670, 510, 13, 51571, 51571], "temperature": 0.0, "avg_logprob": -0.12965620481050932, "compression_ratio": 1.5208333333333333, "no_speech_prob": 2.7693904485204257e-06}, {"id": 83, "seek": 45496, "start": 463.59999999999997, "end": 467.28, "text": " y log 1 minus a1.", "tokens": [50364, 407, 8046, 321, 632, 3720, 264, 4470, 295, 3565, 3142, 24590, 382, 3671, 288, 3565, 257, 16, 3175, 502, 3175, 50796, 50796, 288, 3565, 502, 3175, 257, 16, 13, 50980, 50980, 583, 502, 3175, 257, 16, 307, 611, 2681, 281, 445, 257, 17, 11, 570, 257, 17, 307, 502, 3175, 257, 16, 4650, 281, 341, 6114, 51476, 51476, 670, 510, 13, 51571, 51571], "temperature": 0.0, "avg_logprob": -0.12965620481050932, "compression_ratio": 1.5208333333333333, "no_speech_prob": 2.7693904485204257e-06}, {"id": 84, "seek": 45496, "start": 467.28, "end": 477.2, "text": " But 1 minus a1 is also equal to just a2, because a2 is 1 minus a1 according to this expression", "tokens": [50364, 407, 8046, 321, 632, 3720, 264, 4470, 295, 3565, 3142, 24590, 382, 3671, 288, 3565, 257, 16, 3175, 502, 3175, 50796, 50796, 288, 3565, 502, 3175, 257, 16, 13, 50980, 50980, 583, 502, 3175, 257, 16, 307, 611, 2681, 281, 445, 257, 17, 11, 570, 257, 17, 307, 502, 3175, 257, 16, 4650, 281, 341, 6114, 51476, 51476, 670, 510, 13, 51571, 51571], "temperature": 0.0, "avg_logprob": -0.12965620481050932, "compression_ratio": 1.5208333333333333, "no_speech_prob": 2.7693904485204257e-06}, {"id": 85, "seek": 45496, "start": 477.2, "end": 479.09999999999997, "text": " over here.", "tokens": [50364, 407, 8046, 321, 632, 3720, 264, 4470, 295, 3565, 3142, 24590, 382, 3671, 288, 3565, 257, 16, 3175, 502, 3175, 50796, 50796, 288, 3565, 502, 3175, 257, 16, 13, 50980, 50980, 583, 502, 3175, 257, 16, 307, 611, 2681, 281, 445, 257, 17, 11, 570, 257, 17, 307, 502, 3175, 257, 16, 4650, 281, 341, 6114, 51476, 51476, 670, 510, 13, 51571, 51571], "temperature": 0.0, "avg_logprob": -0.12965620481050932, "compression_ratio": 1.5208333333333333, "no_speech_prob": 2.7693904485204257e-06}, {"id": 86, "seek": 47910, "start": 479.1, "end": 484.92, "text": " So I can rewrite or simplify the loss for logistic regression a little bit to be negative", "tokens": [50364, 407, 286, 393, 28132, 420, 20460, 264, 4470, 337, 3565, 3142, 24590, 257, 707, 857, 281, 312, 3671, 50655, 50655, 288, 3565, 257, 16, 3175, 502, 3175, 288, 3565, 295, 257, 17, 13, 50973, 50973, 400, 294, 661, 2283, 11, 264, 4470, 498, 288, 307, 2681, 281, 502, 307, 3671, 3565, 257, 16, 11, 293, 498, 288, 307, 2681, 51413, 51413, 281, 1958, 11, 550, 264, 4470, 307, 3671, 3565, 257, 17, 13, 51690, 51690], "temperature": 0.0, "avg_logprob": -0.12362995395412693, "compression_ratio": 1.6733333333333333, "no_speech_prob": 2.9022962735325564e-06}, {"id": 87, "seek": 47910, "start": 484.92, "end": 491.28000000000003, "text": " y log a1 minus 1 minus y log of a2.", "tokens": [50364, 407, 286, 393, 28132, 420, 20460, 264, 4470, 337, 3565, 3142, 24590, 257, 707, 857, 281, 312, 3671, 50655, 50655, 288, 3565, 257, 16, 3175, 502, 3175, 288, 3565, 295, 257, 17, 13, 50973, 50973, 400, 294, 661, 2283, 11, 264, 4470, 498, 288, 307, 2681, 281, 502, 307, 3671, 3565, 257, 16, 11, 293, 498, 288, 307, 2681, 51413, 51413, 281, 1958, 11, 550, 264, 4470, 307, 3671, 3565, 257, 17, 13, 51690, 51690], "temperature": 0.0, "avg_logprob": -0.12362995395412693, "compression_ratio": 1.6733333333333333, "no_speech_prob": 2.9022962735325564e-06}, {"id": 88, "seek": 47910, "start": 491.28000000000003, "end": 500.08000000000004, "text": " And in other words, the loss if y is equal to 1 is negative log a1, and if y is equal", "tokens": [50364, 407, 286, 393, 28132, 420, 20460, 264, 4470, 337, 3565, 3142, 24590, 257, 707, 857, 281, 312, 3671, 50655, 50655, 288, 3565, 257, 16, 3175, 502, 3175, 288, 3565, 295, 257, 17, 13, 50973, 50973, 400, 294, 661, 2283, 11, 264, 4470, 498, 288, 307, 2681, 281, 502, 307, 3671, 3565, 257, 16, 11, 293, 498, 288, 307, 2681, 51413, 51413, 281, 1958, 11, 550, 264, 4470, 307, 3671, 3565, 257, 17, 13, 51690, 51690], "temperature": 0.0, "avg_logprob": -0.12362995395412693, "compression_ratio": 1.6733333333333333, "no_speech_prob": 2.9022962735325564e-06}, {"id": 89, "seek": 47910, "start": 500.08000000000004, "end": 505.62, "text": " to 0, then the loss is negative log a2.", "tokens": [50364, 407, 286, 393, 28132, 420, 20460, 264, 4470, 337, 3565, 3142, 24590, 257, 707, 857, 281, 312, 3671, 50655, 50655, 288, 3565, 257, 16, 3175, 502, 3175, 288, 3565, 295, 257, 17, 13, 50973, 50973, 400, 294, 661, 2283, 11, 264, 4470, 498, 288, 307, 2681, 281, 502, 307, 3671, 3565, 257, 16, 11, 293, 498, 288, 307, 2681, 51413, 51413, 281, 1958, 11, 550, 264, 4470, 307, 3671, 3565, 257, 17, 13, 51690, 51690], "temperature": 0.0, "avg_logprob": -0.12362995395412693, "compression_ratio": 1.6733333333333333, "no_speech_prob": 2.9022962735325564e-06}, {"id": 90, "seek": 50562, "start": 505.62, "end": 509.88, "text": " And then same as before, the cost function for all the parameters in the model is the", "tokens": [50364, 400, 550, 912, 382, 949, 11, 264, 2063, 2445, 337, 439, 264, 9834, 294, 264, 2316, 307, 264, 50577, 50577, 4274, 4470, 11, 4274, 670, 264, 2302, 3097, 992, 13, 50780, 50780, 407, 300, 390, 264, 2063, 2445, 337, 3565, 3142, 24590, 13, 50955, 50955, 961, 311, 2464, 760, 264, 2063, 2445, 300, 307, 10286, 379, 1143, 337, 2787, 41167, 24590, 13, 51337, 51337, 9647, 336, 300, 613, 366, 264, 11787, 321, 764, 337, 2787, 41167, 24590, 13, 51583, 51583, 440, 4470, 321, 434, 516, 281, 764, 337, 2787, 41167, 24590, 307, 445, 341, 13, 51807, 51807], "temperature": 0.0, "avg_logprob": -0.10400780764493076, "compression_ratio": 1.957142857142857, "no_speech_prob": 1.628034169698367e-06}, {"id": 91, "seek": 50562, "start": 509.88, "end": 513.94, "text": " average loss, average over the entire training set.", "tokens": [50364, 400, 550, 912, 382, 949, 11, 264, 2063, 2445, 337, 439, 264, 9834, 294, 264, 2316, 307, 264, 50577, 50577, 4274, 4470, 11, 4274, 670, 264, 2302, 3097, 992, 13, 50780, 50780, 407, 300, 390, 264, 2063, 2445, 337, 3565, 3142, 24590, 13, 50955, 50955, 961, 311, 2464, 760, 264, 2063, 2445, 300, 307, 10286, 379, 1143, 337, 2787, 41167, 24590, 13, 51337, 51337, 9647, 336, 300, 613, 366, 264, 11787, 321, 764, 337, 2787, 41167, 24590, 13, 51583, 51583, 440, 4470, 321, 434, 516, 281, 764, 337, 2787, 41167, 24590, 307, 445, 341, 13, 51807, 51807], "temperature": 0.0, "avg_logprob": -0.10400780764493076, "compression_ratio": 1.957142857142857, "no_speech_prob": 1.628034169698367e-06}, {"id": 92, "seek": 50562, "start": 513.94, "end": 517.44, "text": " So that was the cost function for logistic regression.", "tokens": [50364, 400, 550, 912, 382, 949, 11, 264, 2063, 2445, 337, 439, 264, 9834, 294, 264, 2316, 307, 264, 50577, 50577, 4274, 4470, 11, 4274, 670, 264, 2302, 3097, 992, 13, 50780, 50780, 407, 300, 390, 264, 2063, 2445, 337, 3565, 3142, 24590, 13, 50955, 50955, 961, 311, 2464, 760, 264, 2063, 2445, 300, 307, 10286, 379, 1143, 337, 2787, 41167, 24590, 13, 51337, 51337, 9647, 336, 300, 613, 366, 264, 11787, 321, 764, 337, 2787, 41167, 24590, 13, 51583, 51583, 440, 4470, 321, 434, 516, 281, 764, 337, 2787, 41167, 24590, 307, 445, 341, 13, 51807, 51807], "temperature": 0.0, "avg_logprob": -0.10400780764493076, "compression_ratio": 1.957142857142857, "no_speech_prob": 1.628034169698367e-06}, {"id": 93, "seek": 50562, "start": 517.44, "end": 525.08, "text": " Let's write down the cost function that is conventionally used for softmax regression.", "tokens": [50364, 400, 550, 912, 382, 949, 11, 264, 2063, 2445, 337, 439, 264, 9834, 294, 264, 2316, 307, 264, 50577, 50577, 4274, 4470, 11, 4274, 670, 264, 2302, 3097, 992, 13, 50780, 50780, 407, 300, 390, 264, 2063, 2445, 337, 3565, 3142, 24590, 13, 50955, 50955, 961, 311, 2464, 760, 264, 2063, 2445, 300, 307, 10286, 379, 1143, 337, 2787, 41167, 24590, 13, 51337, 51337, 9647, 336, 300, 613, 366, 264, 11787, 321, 764, 337, 2787, 41167, 24590, 13, 51583, 51583, 440, 4470, 321, 434, 516, 281, 764, 337, 2787, 41167, 24590, 307, 445, 341, 13, 51807, 51807], "temperature": 0.0, "avg_logprob": -0.10400780764493076, "compression_ratio": 1.957142857142857, "no_speech_prob": 1.628034169698367e-06}, {"id": 94, "seek": 50562, "start": 525.08, "end": 530.0, "text": " Recall that these are the equations we use for softmax regression.", "tokens": [50364, 400, 550, 912, 382, 949, 11, 264, 2063, 2445, 337, 439, 264, 9834, 294, 264, 2316, 307, 264, 50577, 50577, 4274, 4470, 11, 4274, 670, 264, 2302, 3097, 992, 13, 50780, 50780, 407, 300, 390, 264, 2063, 2445, 337, 3565, 3142, 24590, 13, 50955, 50955, 961, 311, 2464, 760, 264, 2063, 2445, 300, 307, 10286, 379, 1143, 337, 2787, 41167, 24590, 13, 51337, 51337, 9647, 336, 300, 613, 366, 264, 11787, 321, 764, 337, 2787, 41167, 24590, 13, 51583, 51583, 440, 4470, 321, 434, 516, 281, 764, 337, 2787, 41167, 24590, 307, 445, 341, 13, 51807, 51807], "temperature": 0.0, "avg_logprob": -0.10400780764493076, "compression_ratio": 1.957142857142857, "no_speech_prob": 1.628034169698367e-06}, {"id": 95, "seek": 50562, "start": 530.0, "end": 534.48, "text": " The loss we're going to use for softmax regression is just this.", "tokens": [50364, 400, 550, 912, 382, 949, 11, 264, 2063, 2445, 337, 439, 264, 9834, 294, 264, 2316, 307, 264, 50577, 50577, 4274, 4470, 11, 4274, 670, 264, 2302, 3097, 992, 13, 50780, 50780, 407, 300, 390, 264, 2063, 2445, 337, 3565, 3142, 24590, 13, 50955, 50955, 961, 311, 2464, 760, 264, 2063, 2445, 300, 307, 10286, 379, 1143, 337, 2787, 41167, 24590, 13, 51337, 51337, 9647, 336, 300, 613, 366, 264, 11787, 321, 764, 337, 2787, 41167, 24590, 13, 51583, 51583, 440, 4470, 321, 434, 516, 281, 764, 337, 2787, 41167, 24590, 307, 445, 341, 13, 51807, 51807], "temperature": 0.0, "avg_logprob": -0.10400780764493076, "compression_ratio": 1.957142857142857, "no_speech_prob": 1.628034169698367e-06}, {"id": 96, "seek": 53448, "start": 534.48, "end": 546.52, "text": " The loss for if the algorithm outputs a1 through an, and the ground truth label is y, is if", "tokens": [50364, 440, 4470, 337, 498, 264, 9284, 23930, 257, 16, 807, 364, 11, 293, 264, 2727, 3494, 7645, 307, 288, 11, 307, 498, 50966, 50966, 288, 6915, 502, 11, 264, 4470, 307, 3671, 3565, 257, 16, 11, 370, 309, 311, 3671, 3565, 295, 264, 8482, 300, 51276, 51276, 309, 1194, 288, 390, 2681, 281, 502, 13, 51458, 51458, 1610, 498, 288, 307, 2681, 281, 568, 11, 550, 264, 4470, 286, 478, 516, 281, 6964, 382, 3671, 3565, 257, 17, 13, 51791, 51791], "temperature": 0.0, "avg_logprob": -0.1179532774959702, "compression_ratio": 1.6647058823529413, "no_speech_prob": 2.0784731532330625e-05}, {"id": 97, "seek": 53448, "start": 546.52, "end": 552.72, "text": " y equals 1, the loss is negative log a1, so it's negative log of the probability that", "tokens": [50364, 440, 4470, 337, 498, 264, 9284, 23930, 257, 16, 807, 364, 11, 293, 264, 2727, 3494, 7645, 307, 288, 11, 307, 498, 50966, 50966, 288, 6915, 502, 11, 264, 4470, 307, 3671, 3565, 257, 16, 11, 370, 309, 311, 3671, 3565, 295, 264, 8482, 300, 51276, 51276, 309, 1194, 288, 390, 2681, 281, 502, 13, 51458, 51458, 1610, 498, 288, 307, 2681, 281, 568, 11, 550, 264, 4470, 286, 478, 516, 281, 6964, 382, 3671, 3565, 257, 17, 13, 51791, 51791], "temperature": 0.0, "avg_logprob": -0.1179532774959702, "compression_ratio": 1.6647058823529413, "no_speech_prob": 2.0784731532330625e-05}, {"id": 98, "seek": 53448, "start": 552.72, "end": 556.36, "text": " it thought y was equal to 1.", "tokens": [50364, 440, 4470, 337, 498, 264, 9284, 23930, 257, 16, 807, 364, 11, 293, 264, 2727, 3494, 7645, 307, 288, 11, 307, 498, 50966, 50966, 288, 6915, 502, 11, 264, 4470, 307, 3671, 3565, 257, 16, 11, 370, 309, 311, 3671, 3565, 295, 264, 8482, 300, 51276, 51276, 309, 1194, 288, 390, 2681, 281, 502, 13, 51458, 51458, 1610, 498, 288, 307, 2681, 281, 568, 11, 550, 264, 4470, 286, 478, 516, 281, 6964, 382, 3671, 3565, 257, 17, 13, 51791, 51791], "temperature": 0.0, "avg_logprob": -0.1179532774959702, "compression_ratio": 1.6647058823529413, "no_speech_prob": 2.0784731532330625e-05}, {"id": 99, "seek": 53448, "start": 556.36, "end": 563.02, "text": " Or if y is equal to 2, then the loss I'm going to define as negative log a2.", "tokens": [50364, 440, 4470, 337, 498, 264, 9284, 23930, 257, 16, 807, 364, 11, 293, 264, 2727, 3494, 7645, 307, 288, 11, 307, 498, 50966, 50966, 288, 6915, 502, 11, 264, 4470, 307, 3671, 3565, 257, 16, 11, 370, 309, 311, 3671, 3565, 295, 264, 8482, 300, 51276, 51276, 309, 1194, 288, 390, 2681, 281, 502, 13, 51458, 51458, 1610, 498, 288, 307, 2681, 281, 568, 11, 550, 264, 4470, 286, 478, 516, 281, 6964, 382, 3671, 3565, 257, 17, 13, 51791, 51791], "temperature": 0.0, "avg_logprob": -0.1179532774959702, "compression_ratio": 1.6647058823529413, "no_speech_prob": 2.0784731532330625e-05}, {"id": 100, "seek": 56302, "start": 563.02, "end": 569.9399999999999, "text": " So if y is equal to 2, the loss of the algorithm on this example is negative log of the probability", "tokens": [50364, 407, 498, 288, 307, 2681, 281, 568, 11, 264, 4470, 295, 264, 9284, 322, 341, 1365, 307, 3671, 3565, 295, 264, 8482, 50710, 50710, 309, 1194, 288, 390, 2681, 281, 568, 13, 50843, 50843, 400, 370, 322, 439, 264, 636, 760, 281, 498, 288, 307, 2681, 281, 297, 11, 550, 264, 4470, 307, 3671, 3565, 295, 364, 13, 51241, 51241, 400, 281, 23221, 437, 341, 307, 884, 11, 498, 288, 307, 2681, 281, 361, 11, 550, 264, 4470, 307, 3671, 51675, 51675], "temperature": 0.0, "avg_logprob": -0.07482949892679851, "compression_ratio": 1.929032258064516, "no_speech_prob": 3.500830416669487e-06}, {"id": 101, "seek": 56302, "start": 569.9399999999999, "end": 572.6, "text": " it thought y was equal to 2.", "tokens": [50364, 407, 498, 288, 307, 2681, 281, 568, 11, 264, 4470, 295, 264, 9284, 322, 341, 1365, 307, 3671, 3565, 295, 264, 8482, 50710, 50710, 309, 1194, 288, 390, 2681, 281, 568, 13, 50843, 50843, 400, 370, 322, 439, 264, 636, 760, 281, 498, 288, 307, 2681, 281, 297, 11, 550, 264, 4470, 307, 3671, 3565, 295, 364, 13, 51241, 51241, 400, 281, 23221, 437, 341, 307, 884, 11, 498, 288, 307, 2681, 281, 361, 11, 550, 264, 4470, 307, 3671, 51675, 51675], "temperature": 0.0, "avg_logprob": -0.07482949892679851, "compression_ratio": 1.929032258064516, "no_speech_prob": 3.500830416669487e-06}, {"id": 102, "seek": 56302, "start": 572.6, "end": 580.56, "text": " And so on all the way down to if y is equal to n, then the loss is negative log of an.", "tokens": [50364, 407, 498, 288, 307, 2681, 281, 568, 11, 264, 4470, 295, 264, 9284, 322, 341, 1365, 307, 3671, 3565, 295, 264, 8482, 50710, 50710, 309, 1194, 288, 390, 2681, 281, 568, 13, 50843, 50843, 400, 370, 322, 439, 264, 636, 760, 281, 498, 288, 307, 2681, 281, 297, 11, 550, 264, 4470, 307, 3671, 3565, 295, 364, 13, 51241, 51241, 400, 281, 23221, 437, 341, 307, 884, 11, 498, 288, 307, 2681, 281, 361, 11, 550, 264, 4470, 307, 3671, 51675, 51675], "temperature": 0.0, "avg_logprob": -0.07482949892679851, "compression_ratio": 1.929032258064516, "no_speech_prob": 3.500830416669487e-06}, {"id": 103, "seek": 56302, "start": 580.56, "end": 589.24, "text": " And to illustrate what this is doing, if y is equal to j, then the loss is negative", "tokens": [50364, 407, 498, 288, 307, 2681, 281, 568, 11, 264, 4470, 295, 264, 9284, 322, 341, 1365, 307, 3671, 3565, 295, 264, 8482, 50710, 50710, 309, 1194, 288, 390, 2681, 281, 568, 13, 50843, 50843, 400, 370, 322, 439, 264, 636, 760, 281, 498, 288, 307, 2681, 281, 297, 11, 550, 264, 4470, 307, 3671, 3565, 295, 364, 13, 51241, 51241, 400, 281, 23221, 437, 341, 307, 884, 11, 498, 288, 307, 2681, 281, 361, 11, 550, 264, 4470, 307, 3671, 51675, 51675], "temperature": 0.0, "avg_logprob": -0.07482949892679851, "compression_ratio": 1.929032258064516, "no_speech_prob": 3.500830416669487e-06}, {"id": 104, "seek": 58924, "start": 589.24, "end": 595.16, "text": " log of aj, and that's what this function looks like.", "tokens": [50364, 3565, 295, 17680, 11, 293, 300, 311, 437, 341, 2445, 1542, 411, 13, 50660, 50660, 43230, 3565, 295, 17680, 307, 257, 7605, 300, 1542, 411, 341, 13, 50896, 50896, 400, 370, 498, 17680, 390, 588, 1998, 281, 502, 11, 550, 291, 1116, 312, 322, 341, 644, 295, 264, 7605, 293, 264, 4470, 51210, 51210, 576, 312, 588, 1359, 13, 51320, 51320, 583, 498, 309, 1194, 11, 584, 11, 17680, 632, 787, 257, 2625, 4, 2931, 11, 550, 264, 4470, 2170, 257, 707, 857, 3801, 13, 51638, 51638], "temperature": 0.0, "avg_logprob": -0.12537225444665115, "compression_ratio": 1.5487179487179488, "no_speech_prob": 4.4951625568501186e-06}, {"id": 105, "seek": 58924, "start": 595.16, "end": 599.88, "text": " Negative log of aj is a curve that looks like this.", "tokens": [50364, 3565, 295, 17680, 11, 293, 300, 311, 437, 341, 2445, 1542, 411, 13, 50660, 50660, 43230, 3565, 295, 17680, 307, 257, 7605, 300, 1542, 411, 341, 13, 50896, 50896, 400, 370, 498, 17680, 390, 588, 1998, 281, 502, 11, 550, 291, 1116, 312, 322, 341, 644, 295, 264, 7605, 293, 264, 4470, 51210, 51210, 576, 312, 588, 1359, 13, 51320, 51320, 583, 498, 309, 1194, 11, 584, 11, 17680, 632, 787, 257, 2625, 4, 2931, 11, 550, 264, 4470, 2170, 257, 707, 857, 3801, 13, 51638, 51638], "temperature": 0.0, "avg_logprob": -0.12537225444665115, "compression_ratio": 1.5487179487179488, "no_speech_prob": 4.4951625568501186e-06}, {"id": 106, "seek": 58924, "start": 599.88, "end": 606.16, "text": " And so if aj was very close to 1, then you'd be on this part of the curve and the loss", "tokens": [50364, 3565, 295, 17680, 11, 293, 300, 311, 437, 341, 2445, 1542, 411, 13, 50660, 50660, 43230, 3565, 295, 17680, 307, 257, 7605, 300, 1542, 411, 341, 13, 50896, 50896, 400, 370, 498, 17680, 390, 588, 1998, 281, 502, 11, 550, 291, 1116, 312, 322, 341, 644, 295, 264, 7605, 293, 264, 4470, 51210, 51210, 576, 312, 588, 1359, 13, 51320, 51320, 583, 498, 309, 1194, 11, 584, 11, 17680, 632, 787, 257, 2625, 4, 2931, 11, 550, 264, 4470, 2170, 257, 707, 857, 3801, 13, 51638, 51638], "temperature": 0.0, "avg_logprob": -0.12537225444665115, "compression_ratio": 1.5487179487179488, "no_speech_prob": 4.4951625568501186e-06}, {"id": 107, "seek": 58924, "start": 606.16, "end": 608.36, "text": " would be very small.", "tokens": [50364, 3565, 295, 17680, 11, 293, 300, 311, 437, 341, 2445, 1542, 411, 13, 50660, 50660, 43230, 3565, 295, 17680, 307, 257, 7605, 300, 1542, 411, 341, 13, 50896, 50896, 400, 370, 498, 17680, 390, 588, 1998, 281, 502, 11, 550, 291, 1116, 312, 322, 341, 644, 295, 264, 7605, 293, 264, 4470, 51210, 51210, 576, 312, 588, 1359, 13, 51320, 51320, 583, 498, 309, 1194, 11, 584, 11, 17680, 632, 787, 257, 2625, 4, 2931, 11, 550, 264, 4470, 2170, 257, 707, 857, 3801, 13, 51638, 51638], "temperature": 0.0, "avg_logprob": -0.12537225444665115, "compression_ratio": 1.5487179487179488, "no_speech_prob": 4.4951625568501186e-06}, {"id": 108, "seek": 58924, "start": 608.36, "end": 614.72, "text": " But if it thought, say, aj had only a 50% chance, then the loss gets a little bit bigger.", "tokens": [50364, 3565, 295, 17680, 11, 293, 300, 311, 437, 341, 2445, 1542, 411, 13, 50660, 50660, 43230, 3565, 295, 17680, 307, 257, 7605, 300, 1542, 411, 341, 13, 50896, 50896, 400, 370, 498, 17680, 390, 588, 1998, 281, 502, 11, 550, 291, 1116, 312, 322, 341, 644, 295, 264, 7605, 293, 264, 4470, 51210, 51210, 576, 312, 588, 1359, 13, 51320, 51320, 583, 498, 309, 1194, 11, 584, 11, 17680, 632, 787, 257, 2625, 4, 2931, 11, 550, 264, 4470, 2170, 257, 707, 857, 3801, 13, 51638, 51638], "temperature": 0.0, "avg_logprob": -0.12537225444665115, "compression_ratio": 1.5487179487179488, "no_speech_prob": 4.4951625568501186e-06}, {"id": 109, "seek": 61472, "start": 614.72, "end": 619.36, "text": " And the smaller aj is, the bigger the loss.", "tokens": [50364, 400, 264, 4356, 17680, 307, 11, 264, 3801, 264, 4470, 13, 50596, 50596, 400, 370, 341, 35328, 5660, 264, 9284, 281, 652, 17680, 382, 2416, 382, 1944, 11, 382, 1998, 281, 50916, 50916, 502, 382, 1944, 11, 570, 2035, 264, 3539, 2158, 288, 390, 11, 291, 528, 264, 9284, 281, 584, 11, 51174, 51174, 4696, 11, 300, 264, 2931, 295, 288, 885, 300, 2158, 390, 1238, 2416, 13, 51418, 51418, 13428, 300, 294, 341, 4470, 2445, 11, 288, 294, 1184, 3097, 1365, 393, 747, 322, 787, 472, 2158, 11, 51777, 51777], "temperature": 0.0, "avg_logprob": -0.1171290797571982, "compression_ratio": 1.6940639269406392, "no_speech_prob": 3.2887230645428644e-06}, {"id": 110, "seek": 61472, "start": 619.36, "end": 625.76, "text": " And so this incentivizes the algorithm to make aj as large as possible, as close to", "tokens": [50364, 400, 264, 4356, 17680, 307, 11, 264, 3801, 264, 4470, 13, 50596, 50596, 400, 370, 341, 35328, 5660, 264, 9284, 281, 652, 17680, 382, 2416, 382, 1944, 11, 382, 1998, 281, 50916, 50916, 502, 382, 1944, 11, 570, 2035, 264, 3539, 2158, 288, 390, 11, 291, 528, 264, 9284, 281, 584, 11, 51174, 51174, 4696, 11, 300, 264, 2931, 295, 288, 885, 300, 2158, 390, 1238, 2416, 13, 51418, 51418, 13428, 300, 294, 341, 4470, 2445, 11, 288, 294, 1184, 3097, 1365, 393, 747, 322, 787, 472, 2158, 11, 51777, 51777], "temperature": 0.0, "avg_logprob": -0.1171290797571982, "compression_ratio": 1.6940639269406392, "no_speech_prob": 3.2887230645428644e-06}, {"id": 111, "seek": 61472, "start": 625.76, "end": 630.9200000000001, "text": " 1 as possible, because whatever the actual value y was, you want the algorithm to say,", "tokens": [50364, 400, 264, 4356, 17680, 307, 11, 264, 3801, 264, 4470, 13, 50596, 50596, 400, 370, 341, 35328, 5660, 264, 9284, 281, 652, 17680, 382, 2416, 382, 1944, 11, 382, 1998, 281, 50916, 50916, 502, 382, 1944, 11, 570, 2035, 264, 3539, 2158, 288, 390, 11, 291, 528, 264, 9284, 281, 584, 11, 51174, 51174, 4696, 11, 300, 264, 2931, 295, 288, 885, 300, 2158, 390, 1238, 2416, 13, 51418, 51418, 13428, 300, 294, 341, 4470, 2445, 11, 288, 294, 1184, 3097, 1365, 393, 747, 322, 787, 472, 2158, 11, 51777, 51777], "temperature": 0.0, "avg_logprob": -0.1171290797571982, "compression_ratio": 1.6940639269406392, "no_speech_prob": 3.2887230645428644e-06}, {"id": 112, "seek": 61472, "start": 630.9200000000001, "end": 635.8000000000001, "text": " hopefully, that the chance of y being that value was pretty large.", "tokens": [50364, 400, 264, 4356, 17680, 307, 11, 264, 3801, 264, 4470, 13, 50596, 50596, 400, 370, 341, 35328, 5660, 264, 9284, 281, 652, 17680, 382, 2416, 382, 1944, 11, 382, 1998, 281, 50916, 50916, 502, 382, 1944, 11, 570, 2035, 264, 3539, 2158, 288, 390, 11, 291, 528, 264, 9284, 281, 584, 11, 51174, 51174, 4696, 11, 300, 264, 2931, 295, 288, 885, 300, 2158, 390, 1238, 2416, 13, 51418, 51418, 13428, 300, 294, 341, 4470, 2445, 11, 288, 294, 1184, 3097, 1365, 393, 747, 322, 787, 472, 2158, 11, 51777, 51777], "temperature": 0.0, "avg_logprob": -0.1171290797571982, "compression_ratio": 1.6940639269406392, "no_speech_prob": 3.2887230645428644e-06}, {"id": 113, "seek": 61472, "start": 635.8000000000001, "end": 642.98, "text": " Notice that in this loss function, y in each training example can take on only one value,", "tokens": [50364, 400, 264, 4356, 17680, 307, 11, 264, 3801, 264, 4470, 13, 50596, 50596, 400, 370, 341, 35328, 5660, 264, 9284, 281, 652, 17680, 382, 2416, 382, 1944, 11, 382, 1998, 281, 50916, 50916, 502, 382, 1944, 11, 570, 2035, 264, 3539, 2158, 288, 390, 11, 291, 528, 264, 9284, 281, 584, 11, 51174, 51174, 4696, 11, 300, 264, 2931, 295, 288, 885, 300, 2158, 390, 1238, 2416, 13, 51418, 51418, 13428, 300, 294, 341, 4470, 2445, 11, 288, 294, 1184, 3097, 1365, 393, 747, 322, 787, 472, 2158, 11, 51777, 51777], "temperature": 0.0, "avg_logprob": -0.1171290797571982, "compression_ratio": 1.6940639269406392, "no_speech_prob": 3.2887230645428644e-06}, {"id": 114, "seek": 64298, "start": 642.98, "end": 650.44, "text": " and so you end up computing this negative log of aj only for one value of aj, which", "tokens": [50364, 293, 370, 291, 917, 493, 15866, 341, 3671, 3565, 295, 17680, 787, 337, 472, 2158, 295, 17680, 11, 597, 50737, 50737, 307, 2035, 390, 264, 3539, 2158, 295, 288, 6915, 361, 294, 300, 1729, 3097, 1365, 13, 50995, 50995, 1171, 1365, 11, 498, 288, 390, 2681, 281, 568, 11, 291, 917, 493, 15866, 3671, 3565, 295, 257, 17, 11, 457, 406, 604, 51279, 51279, 295, 264, 661, 3671, 3565, 295, 257, 16, 420, 264, 661, 2115, 510, 13, 51450, 51450, 407, 300, 311, 264, 1254, 295, 264, 2316, 11, 382, 731, 382, 264, 2063, 2445, 337, 2787, 41167, 24590, 13, 51739, 51739], "temperature": 0.0, "avg_logprob": -0.06669861078262329, "compression_ratio": 1.7882882882882882, "no_speech_prob": 2.123368176398799e-06}, {"id": 115, "seek": 64298, "start": 650.44, "end": 655.6, "text": " is whatever was the actual value of y equals j in that particular training example.", "tokens": [50364, 293, 370, 291, 917, 493, 15866, 341, 3671, 3565, 295, 17680, 787, 337, 472, 2158, 295, 17680, 11, 597, 50737, 50737, 307, 2035, 390, 264, 3539, 2158, 295, 288, 6915, 361, 294, 300, 1729, 3097, 1365, 13, 50995, 50995, 1171, 1365, 11, 498, 288, 390, 2681, 281, 568, 11, 291, 917, 493, 15866, 3671, 3565, 295, 257, 17, 11, 457, 406, 604, 51279, 51279, 295, 264, 661, 3671, 3565, 295, 257, 16, 420, 264, 661, 2115, 510, 13, 51450, 51450, 407, 300, 311, 264, 1254, 295, 264, 2316, 11, 382, 731, 382, 264, 2063, 2445, 337, 2787, 41167, 24590, 13, 51739, 51739], "temperature": 0.0, "avg_logprob": -0.06669861078262329, "compression_ratio": 1.7882882882882882, "no_speech_prob": 2.123368176398799e-06}, {"id": 116, "seek": 64298, "start": 655.6, "end": 661.28, "text": " For example, if y was equal to 2, you end up computing negative log of a2, but not any", "tokens": [50364, 293, 370, 291, 917, 493, 15866, 341, 3671, 3565, 295, 17680, 787, 337, 472, 2158, 295, 17680, 11, 597, 50737, 50737, 307, 2035, 390, 264, 3539, 2158, 295, 288, 6915, 361, 294, 300, 1729, 3097, 1365, 13, 50995, 50995, 1171, 1365, 11, 498, 288, 390, 2681, 281, 568, 11, 291, 917, 493, 15866, 3671, 3565, 295, 257, 17, 11, 457, 406, 604, 51279, 51279, 295, 264, 661, 3671, 3565, 295, 257, 16, 420, 264, 661, 2115, 510, 13, 51450, 51450, 407, 300, 311, 264, 1254, 295, 264, 2316, 11, 382, 731, 382, 264, 2063, 2445, 337, 2787, 41167, 24590, 13, 51739, 51739], "temperature": 0.0, "avg_logprob": -0.06669861078262329, "compression_ratio": 1.7882882882882882, "no_speech_prob": 2.123368176398799e-06}, {"id": 117, "seek": 64298, "start": 661.28, "end": 664.7, "text": " of the other negative log of a1 or the other terms here.", "tokens": [50364, 293, 370, 291, 917, 493, 15866, 341, 3671, 3565, 295, 17680, 787, 337, 472, 2158, 295, 17680, 11, 597, 50737, 50737, 307, 2035, 390, 264, 3539, 2158, 295, 288, 6915, 361, 294, 300, 1729, 3097, 1365, 13, 50995, 50995, 1171, 1365, 11, 498, 288, 390, 2681, 281, 568, 11, 291, 917, 493, 15866, 3671, 3565, 295, 257, 17, 11, 457, 406, 604, 51279, 51279, 295, 264, 661, 3671, 3565, 295, 257, 16, 420, 264, 661, 2115, 510, 13, 51450, 51450, 407, 300, 311, 264, 1254, 295, 264, 2316, 11, 382, 731, 382, 264, 2063, 2445, 337, 2787, 41167, 24590, 13, 51739, 51739], "temperature": 0.0, "avg_logprob": -0.06669861078262329, "compression_ratio": 1.7882882882882882, "no_speech_prob": 2.123368176398799e-06}, {"id": 118, "seek": 64298, "start": 664.7, "end": 670.48, "text": " So that's the form of the model, as well as the cost function for softmax regression.", "tokens": [50364, 293, 370, 291, 917, 493, 15866, 341, 3671, 3565, 295, 17680, 787, 337, 472, 2158, 295, 17680, 11, 597, 50737, 50737, 307, 2035, 390, 264, 3539, 2158, 295, 288, 6915, 361, 294, 300, 1729, 3097, 1365, 13, 50995, 50995, 1171, 1365, 11, 498, 288, 390, 2681, 281, 568, 11, 291, 917, 493, 15866, 3671, 3565, 295, 257, 17, 11, 457, 406, 604, 51279, 51279, 295, 264, 661, 3671, 3565, 295, 257, 16, 420, 264, 661, 2115, 510, 13, 51450, 51450, 407, 300, 311, 264, 1254, 295, 264, 2316, 11, 382, 731, 382, 264, 2063, 2445, 337, 2787, 41167, 24590, 13, 51739, 51739], "temperature": 0.0, "avg_logprob": -0.06669861078262329, "compression_ratio": 1.7882882882882882, "no_speech_prob": 2.123368176398799e-06}, {"id": 119, "seek": 67048, "start": 670.48, "end": 675.36, "text": " And if you were to train this model, you can start to build multi-class classification", "tokens": [50364, 400, 498, 291, 645, 281, 3847, 341, 2316, 11, 291, 393, 722, 281, 1322, 4825, 12, 11665, 21538, 50608, 50608, 14642, 13, 50702, 50702, 400, 437, 321, 1116, 411, 281, 360, 958, 307, 747, 341, 2787, 41167, 24590, 2316, 293, 3318, 309, 666, 257, 50948, 50948, 18161, 3209, 370, 300, 291, 434, 516, 281, 360, 746, 754, 1101, 11, 597, 307, 281, 3847, 257, 51196, 51196, 18161, 3209, 337, 4825, 12, 11665, 21538, 13, 51364, 51364, 961, 311, 352, 360, 300, 294, 264, 958, 960, 13, 51452], "temperature": 0.0, "avg_logprob": -0.14282243707206813, "compression_ratio": 1.7004830917874396, "no_speech_prob": 1.4964693946240004e-05}, {"id": 120, "seek": 67048, "start": 675.36, "end": 677.24, "text": " algorithms.", "tokens": [50364, 400, 498, 291, 645, 281, 3847, 341, 2316, 11, 291, 393, 722, 281, 1322, 4825, 12, 11665, 21538, 50608, 50608, 14642, 13, 50702, 50702, 400, 437, 321, 1116, 411, 281, 360, 958, 307, 747, 341, 2787, 41167, 24590, 2316, 293, 3318, 309, 666, 257, 50948, 50948, 18161, 3209, 370, 300, 291, 434, 516, 281, 360, 746, 754, 1101, 11, 597, 307, 281, 3847, 257, 51196, 51196, 18161, 3209, 337, 4825, 12, 11665, 21538, 13, 51364, 51364, 961, 311, 352, 360, 300, 294, 264, 958, 960, 13, 51452], "temperature": 0.0, "avg_logprob": -0.14282243707206813, "compression_ratio": 1.7004830917874396, "no_speech_prob": 1.4964693946240004e-05}, {"id": 121, "seek": 67048, "start": 677.24, "end": 682.16, "text": " And what we'd like to do next is take this softmax regression model and fit it into a", "tokens": [50364, 400, 498, 291, 645, 281, 3847, 341, 2316, 11, 291, 393, 722, 281, 1322, 4825, 12, 11665, 21538, 50608, 50608, 14642, 13, 50702, 50702, 400, 437, 321, 1116, 411, 281, 360, 958, 307, 747, 341, 2787, 41167, 24590, 2316, 293, 3318, 309, 666, 257, 50948, 50948, 18161, 3209, 370, 300, 291, 434, 516, 281, 360, 746, 754, 1101, 11, 597, 307, 281, 3847, 257, 51196, 51196, 18161, 3209, 337, 4825, 12, 11665, 21538, 13, 51364, 51364, 961, 311, 352, 360, 300, 294, 264, 958, 960, 13, 51452], "temperature": 0.0, "avg_logprob": -0.14282243707206813, "compression_ratio": 1.7004830917874396, "no_speech_prob": 1.4964693946240004e-05}, {"id": 122, "seek": 67048, "start": 682.16, "end": 687.12, "text": " neural network so that you're going to do something even better, which is to train a", "tokens": [50364, 400, 498, 291, 645, 281, 3847, 341, 2316, 11, 291, 393, 722, 281, 1322, 4825, 12, 11665, 21538, 50608, 50608, 14642, 13, 50702, 50702, 400, 437, 321, 1116, 411, 281, 360, 958, 307, 747, 341, 2787, 41167, 24590, 2316, 293, 3318, 309, 666, 257, 50948, 50948, 18161, 3209, 370, 300, 291, 434, 516, 281, 360, 746, 754, 1101, 11, 597, 307, 281, 3847, 257, 51196, 51196, 18161, 3209, 337, 4825, 12, 11665, 21538, 13, 51364, 51364, 961, 311, 352, 360, 300, 294, 264, 958, 960, 13, 51452], "temperature": 0.0, "avg_logprob": -0.14282243707206813, "compression_ratio": 1.7004830917874396, "no_speech_prob": 1.4964693946240004e-05}, {"id": 123, "seek": 67048, "start": 687.12, "end": 690.48, "text": " neural network for multi-class classification.", "tokens": [50364, 400, 498, 291, 645, 281, 3847, 341, 2316, 11, 291, 393, 722, 281, 1322, 4825, 12, 11665, 21538, 50608, 50608, 14642, 13, 50702, 50702, 400, 437, 321, 1116, 411, 281, 360, 958, 307, 747, 341, 2787, 41167, 24590, 2316, 293, 3318, 309, 666, 257, 50948, 50948, 18161, 3209, 370, 300, 291, 434, 516, 281, 360, 746, 754, 1101, 11, 597, 307, 281, 3847, 257, 51196, 51196, 18161, 3209, 337, 4825, 12, 11665, 21538, 13, 51364, 51364, 961, 311, 352, 360, 300, 294, 264, 958, 960, 13, 51452], "temperature": 0.0, "avg_logprob": -0.14282243707206813, "compression_ratio": 1.7004830917874396, "no_speech_prob": 1.4964693946240004e-05}, {"id": 124, "seek": 69048, "start": 690.48, "end": 701.16, "text": " Let's go through that in the next video.", "tokens": [50364, 961, 311, 352, 807, 300, 294, 264, 958, 960, 13, 50898], "temperature": 0.0, "avg_logprob": -0.41036253709059495, "compression_ratio": 0.8888888888888888, "no_speech_prob": 9.743701957631856e-05}], "language": "en", "video_id": "pzxxgEZkdLM", "entity": "ML Specialization, Andrew Ng (2022)"}}